# LocalMCP Docker Compose Configuration
# Multi-service deployment for LocalMCP with all dependencies
# 
# Benefits for vibe coders:
# - One command deployment: docker-compose up
# - All services configured and connected
# - Easy local testing and development
# - Production-ready configuration
# - Built-in monitoring and health checks

version: '3.8'

services:
  # Main LocalMCP service
  localmcp:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: localmcp-main
    ports:
      - "3000:3000"  # Main API
      - "3001:3001"  # Admin console
      - "3002:3002"  # Monitoring dashboard
    environment:
      - NODE_ENV=production
      - PORT=3000
      - ADMIN_PORT=3001
      - MONITORING_PORT=3002
      - CONTEXT7_API_URL=https://context7.com/api/v1
      - CONTEXT7_API_KEY=ctx7sk-13b1dff8-2c28-4b3e-9b8c-83937f5a4ac3
      - VECTOR_DB_PATH=/app/data/vector-db
      - CACHE_PATH=/app/data/cache
      - LOGS_PATH=/app/data/logs
      - BACKUPS_PATH=/app/data/backups
    volumes:
      - localmcp_data:/app/data
      - localmcp_logs:/app/logs
    networks:
      - localmcp-network
    depends_on:
      - qdrant
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Qdrant vector database for RAG and lessons learned
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: localmcp-qdrant
    ports:
      - "6333:6333"  # REST API
      - "6334:6334"  # gRPC API
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - localmcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: localmcp-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - localmcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: localmcp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    networks:
      - localmcp-network
    depends_on:
      - localmcp
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:latest
    container_name: localmcp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - localmcp-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: localmcp-grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=localmcp123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - localmcp-network
    depends_on:
      - prometheus
    restart: unless-stopped

# Networks
networks:
  localmcp-network:
    driver: bridge
    name: localmcp-network

# Volumes
volumes:
  localmcp_data:
    name: localmcp_data
  localmcp_logs:
    name: localmcp_logs
  qdrant_data:
    name: localmcp_qdrant_data
  redis_data:
    name: localmcp_redis_data
  nginx_logs:
    name: localmcp_nginx_logs
  prometheus_data:
    name: localmcp_prometheus_data
  grafana_data:
    name: localmcp_grafana_data