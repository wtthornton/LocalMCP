# PromptMCP Development Rules

## Project Identity
You are building PromptMCP - a local MCP server for "vibe coders" - developers who want AI assistance for technical decisions without deep framework expertise. PromptMCP exposes exactly 4 simple tools: analyze, create, fix, learn.

## Core Mission
Create a local MCP server that provides faster, more contextual AI coding assistance through:
- 4 simple tools: promptmcp.analyze, promptmcp.create, promptmcp.fix, promptmcp.learn
- Context7 caching for instant framework docs
- Project-aware RAG from docs/ADRs
- Learning from coding patterns
- Invisible dynamic pipeline processing

## Vibe Coder Principles
- Simple setup (docker run and ready)
- Smart defaults (no configuration)
- Instant feedback
- Less Googling, fewer wrong turns
- Learning over time

## Architecture Boundaries
- Node.js 22 LTS + Docker
- SQLite + LRU cache (no Redis dependency)
- Qdrant vector DB for RAG
- Playwright as simple sidecar only
- MCP protocol (JSON RPC)

## Development Standards
- TypeScript for better DX
- Comprehensive error handling
- Detailed comments explaining vibe coder benefits
- Include Docker configuration
- Validate success metrics (≥70% first-pass, ≤2 retries)

## Scope Protection
DO NOT expand beyond core components. Keep Playwright simple. Focus on caching, RAG, and learning.

## MCP Tool Usage
- Use tappmcp tools for project planning and code generation
- Use Playwright MCP for testing and UI validation
- Use Context7 MCP for documentation research
- Always consider how to cache Context7 responses locally
- Maintain PromptMCP's role as a coordinator, not replacement
- Focus on implementing the 4 core tools: analyze, create, fix, learn

## Code Generation Guidelines
When generating code for this project:
- Include comprehensive error handling
- Add detailed comments explaining the vibe coder benefits
- Use TypeScript for better developer experience
- Include Docker configuration
- Add proper logging for debugging
- Follow the defined tool interfaces (promptmcp.analyze, promptmcp.create, promptmcp.fix, promptmcp.learn)
- Always explain how each piece helps vibe coders
- Reference implementation docs in imp/ folder when available

## Documentation Standards
When creating or updating documentation:
- Always explain the vibe coder benefit
- Include practical examples
- Keep technical jargon minimal
- Focus on "what it does for you" not "how it works"
- Include quick start guides
- Emphasize the "no configuration needed" aspect
- Put implementation details in imp/ folder
- Keep main project docs focused on end-user experience

## Testing & Quality Standards
Code quality standards:
- Write tests that validate vibe coder experience
- Ensure fast startup times (<15 min on new repo)
- Validate that Context7 cache actually improves response times
- Test that lessons learned system reduces retries
- Verify offline mode works (cache + RAG only)

## Development Workflow
Development approach:
- Start with Phase 0 MVP (Week 1 goals)
- Use tappmcp smart_begin to initialize project structure
- Use tappmcp smart_plan for detailed implementation plans
- Use tappmcp smart_write for production-ready code
- Test with Playwright MCP when applicable
- Validate with tappmcp smart_finish
- Update progress in imp/progress/ folder
- Reference design docs in imp/design/ folder

## Success Criteria
- Week 1: Vibe coders can say "create me a dark theme Hello World" and get production-ready code
- Week 3: Reduces "Google time" by 80% through cached docs
- Week 6: Provides project-specific solutions 90% of the time
- Week 9: Learns developer's coding style and suggests accordingly
- Month 3: Fast startup (<15 min on new repo), ≥70% first-pass success rate, ≤2 retries median

## CRITICAL: Scope Protection
DO NOT expand project scope beyond the original vision:
- Only 4 tools: promptmcp.analyze, promptmcp.create, promptmcp.fix, promptmcp.learn
- No extensive testing frameworks beyond basic Playwright sidecar
- No complex orchestration of multiple MCP servers
- No advanced UI features beyond basic screenshots
- Keep focus on Context7 caching, RAG, and lessons learned
- Maintain simple, vibe coder friendly interface

If suggestions expand scope, redirect back to the 4 core tools and PromptMCP's mission.
