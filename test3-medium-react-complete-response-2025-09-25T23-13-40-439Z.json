{
  "testCase": {
    "id": "medium-react",
    "name": "Medium React Component",
    "prompt": "Create a React component that displays a list of users with search functionality",
    "expectedFrameworks": [
      "react"
    ],
    "expectedContext7Libraries": [
      "/facebook/react"
    ],
    "qualityCriteria": {
      "shouldIncludeReactPatterns": true,
      "shouldIncludeStateManagement": true,
      "shouldIncludeSearchLogic": true,
      "shouldBeProductionReady": true,
      "maxTokens": 1000,
      "maxResponseTime": 500
    }
  },
  "completeResponse": {
    "enhanced_prompt": "Create a React component that displays a list of users with search functionality\n\n## Quality Requirements\n\n1. **type-safety** ðŸŸ  (high priority)\n   - TypeScript type safety and strict typing\n2. **testing** ðŸŸ¡ (medium priority)\n   - Comprehensive test coverage and quality\n3. **performance** ðŸŸ¡ (medium priority)\n   - Build optimization and performance\n4. **accessibility** ðŸŸ  (high priority)\n   - Accessibility best practices and WCAG compliance\n5. **responsive** ðŸŸ¡ (medium priority)\n   - Mobile-first responsive design\n6. **security** ðŸŸ  (high priority)\n   - Security best practices and input validation\n\n\n## Framework Best Practices:\n## /websites/react_dev Documentation:\n================\nCODE SNIPPETS\n================\nTITLE: Composing React Components for Page Layout\nDESCRIPTION: Illustrates how React components can be composed, nested, and ordered to design a full page layout. This example shows high-level components like `PageLayout` containing other components such as `NavigationHeader` and `PageContent`.\n\nSOURCE: https://react.dev/learn/your-first-component\n\nLANGUAGE: jsx\nCODE:\n```\n<PageLayout>\n  <NavigationHeader>\n    <SearchBar />\n    <Link to=\"/docs\">Docs</Link>\n  </NavigationHeader>\n  <Sidebar />\n  <PageContent>\n    <TableOfContents />\n    <DocumentationText />\n  </PageContent>\n</PageLayout>\n```\n\n--------------------------------\n\nTITLE: Nest React Components in an Application\nDESCRIPTION: This example shows how to nest a previously defined `MyButton` component within a main `MyApp` component. The `export default` keywords make `MyApp` the primary component for the file, illustrating basic component composition.\n\nSOURCE: https://react.dev/learn\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function MyApp() {  \n  return (  \n    <div>  \n      <h1>Welcome to my app</h1>  \n      <MyButton />  \n    </div>  \n  );  \n}\n```\n\n--------------------------------\n\nTITLE: Composing Server Components with Client Components for Interactivity\nDESCRIPTION: This set of snippets shows how to introduce interactivity into Server Components by importing and composing them with Client Components. The Server Component fetches data, while the Client Component, marked with `\"use client\"`, handles interactive UI elements like state management.\n\nSOURCE: https://react.dev/reference/rsc/server-components\n\nLANGUAGE: javascript\nCODE:\n```\n// Server Component  \nimport Expandable from './Expandable';  \n\nasync function Notes() {  \n  const notes = await db.notes.getAll();  \n  return (  \n    <div>  \n      {notes.map(note => (  \n        <Expandable key={note.id}>  \n          <p note={note} />  \n        </Expandable>  \n      ))}  \n    </div>  \n  )  \n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Client Component  \n\"use client\"  \n\nexport default function Expandable({children}) {  \n  const [expanded, setExpanded] = useState(false);  \n  return (  \n    <div>  \n      <button  \n        onClick={() => setExpanded(!expanded)}  \n      >  \n        Toggle  \n      </button>  \n      {expanded && children}  \n    </div>  \n  )  \n}\n```\n\n--------------------------------\n\nTITLE: Use a React Component within Another Component\nDESCRIPTION: This JavaScript code illustrates how to import and use a previously defined React component, `MyComponent`, within another functional component, `App`. This represents a component usage, where an instance of the component definition is rendered.\n\nSOURCE: https://react.dev/reference/rsc/use-client\n\nLANGUAGE: javascript\nCODE:\n```\nimport MyComponent from '.\n\n## Repository Context:\nProject name: promptmcp\nProject description: A focused MCP server for intelligent prompt enhancement with dynamic framework detection, Context7 integration, comprehensive testing suite, and organized test artifacts management\nUses Playwright framework (^1.55.0)\nUses TypeScript framework (^5.0.0)\nUses Vitest framework (^1.0.0)\nProject type: Frontend application\nHas testing setup\nHas build process\nSource directories: src\nConfiguration files: tsconfig.json\nUses TypeScript for type safety\nUses Node.js/Express for backend\nUses testing with 297 test files\nUses Model Context Protocol (MCP) for AI integration\nUses service-oriented architecture with 153 service files\nUses tool-based architecture with 39 tool files\n\n## Existing Code Patterns:\n```typescript\nFocus on actionable, specific tasks`\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: `User Request: ${prompt}\r\n\r\nRelevant Documentation:\r\n${context}\r\n\r\nPlease break this down into structured tasks.`\r\n          }\r\n        ],\r\n        temperature: this.config.temperature || 0.3,\r\n        max_tokens: this.config.maxTokens || 2000\r\n      });\r\n\r\n      const content = response.choices[0]?.message?.content;\r\n      if (!content) {\r\n        throw new Error('No response content from OpenAI');\r\n      }\r\n\r\n      this.logger.debug('OpenAI response received', { \r\n        responseLength: content.length,\r\n        usage: response.usage \r\n      });\r\n\r\n      // Track cost and usage\r\n      if (response.usage) {\r\n        this.trackUsage(response.usage, this.config.model || 'gpt-4');\r\n      }\r\n\r\n      // Parse and validate the JSON response\r\n      const breakdown = this.parseAndValidateBreakdown(content);\r\n      \r\n      this.logger.info('Task breakdown completed successfully', {\r\n        mainTasks: breakdown.mainTasks.length,\r\n        subtasks: breakdown.subtasks.length,\r\n        dependencies: breakdown.dependencies.length\r\n      });\r\n\r\n      return breakdown;\r\n\r\n    } catch (error) {\r\n      // Enhanced error handling with specific API key error detection\r\n      if (error instanceof Error && error.message.includes('401')) {\r\n        this.logger.error('OpenAI API key invalid or expired', {\r\n          error: 'API key authentication failed',\r\n          suggestion: 'Please update OPENAI_API_KEY environment variable',\r\n          prompt: prompt.substring(0, 100) + '...'\r\n        });\r\n        throw new Error('OpenAI API key is invalid or expired. Please check your OPENAI_API_KEY environment variable.');\r\n      } else if (error instanceof Error && error.message.includes('429')) {\r\n        this.logger.error('OpenAI API rate limit exceeded', {\r\n          error: 'Rate limit exceeded',\r\n          suggestion: 'Please wait before retrying or upgrade your OpenAI plan',\r\n          prompt: prompt.substring(0, 100) + '...'\r\n        });\r\n        throw new Error('OpenAI API rate limit exceeded. Please wait before retrying.');\r\n      } else if (error instanceof Error && error.message.includes('403')) {\r\n        this.logger.\n```\n\n## Instructions:\nMake your response consistent with the project's existing patterns, best practices, and coding standards. Use the provided context to ensure your solution fits well with the existing codebase.",
    "context_used": {
      "repo_facts": [
        "Project name: promptmcp",
        "Project description: A focused MCP server for intelligent prompt enhancement with dynamic framework detection, Context7 integration, comprehensive testing suite, and organized test artifacts management",
        "Uses Playwright framework (^1.55.0)",
        "Uses TypeScript framework (^5.0.0)",
        "Uses Vitest framework (^1.0.0)",
        "Project type: Frontend application",
        "Has testing setup",
        "Has build process",
        "Source directories: src",
        "Configuration files: tsconfig.json",
        "Uses TypeScript for type safety",
        "Uses Node.js/Express for backend",
        "Uses testing with 297 test files",
        "Uses Model Context Protocol (MCP) for AI integration",
        "Uses service-oriented architecture with 153 service files",
        "Uses tool-based architecture with 39 tool files"
      ],
      "code_snippets": [
        "File: src/services/ai/context7-curation.service.ts\nDescription: Class definition: Context7CurationService\nCode:\nexport class Context7CurationService {\r\n  private logger: Logger;\r\n  private openaiService: OpenAIService;\r\n  private config: CurationConfig;\r\n\r\n  constructor(logger: Logger, openaiService: OpenAIService, config: CurationConfig) {\r\n    this.logger = logger;\r\n    this.openaiService = openaiService;\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Curate Context7 content for Cursor AI code generation\r\n   */\r\n  async curateForCursor(\r\n    context7Content: string,\r\n    libraryId: string,\r\n    prompt: string,\r\n    projectContext: any\r\n  ): Promise<CuratedContent> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      this.logger.debug('Starting Context7 content curation', {\r\n        libraryId,\r\n        originalLength: context7Content.length,\r\n        prompt: prompt.substring(0, 100) + '...'\r\n      });\r\n\r\n      // 1. Assess content quality\r\n      const qualityScore = await this.assessContentQuality(context7Content, prompt);\r\n      \r\n      // 2. If quality is too low, return original content\r\n      if (qualityScore < this.config.minQualityScore) {\r\n        this.logger.warn('Content quality too low, returning original', {\r\n          libraryId,\r\n          qualityScore,\r\n          minRequired: this.config.minQualityScore\r\n        });\r\n        \r\n        return this.createFallbackContent(context7Content, libraryId, startTime);\r\n      }\r\n\r\n      // 3. Extract key components\r\n      const keyComponents = await this.extractKeyComponents(context7Content, prompt, libraryId);\r\n      \r\n      // 4. Optimize tokens while preserving quality\r\n      const curatedContent = await this.optimizeTokens(\r\n        context7Content,\r\n        keyComponents,\r\n        prompt,\r\n        libraryId\r\n      );\r\n\r\n      // 5. Calculate metrics\r\n      const originalTokens = Math.ceil(context7Content.length / 4);\r\n      const curatedTokens = Math.ceil(curatedContent.length / 4);\r\n      const tokenReduction = 1 - (curatedTokens / originalTokens);\r\n\r\n      const result: CuratedContent = {\r\n        originalContent: context7Content,\r\n        curatedContent,\r\n        qualityScore,\r\n        tokenReduction,\r\n        cursorOptimized: true,\r\n        keyPatterns: keyComponents.patterns,\r\n        bestPractices: keyComponents.bestPractices,\r\n        codeExamples: keyComponents.codeExamples,\r\n        metadata: {\r\n          libraryId,\r\n          originalTokens,\r\n          curatedTokens,\r\n          processingTime: Date.now() - startTime,\r\n          confidence: qualityScore / 10\r\n        }\r\n      };\r\n\r\n      this.logger.info('Content curation completed successfully', {\r\n        libraryId,\r\n        qualityScore,\r\n        tokenReduction: `${(tokenReduction * 100).toFixed(1)}%`,\r\n        processingTime: result.metadata.processingTime\r\n      });\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Content curation failed', {\r\n        libraryId,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      });\r\n      \r\n      // Return original content as fallback\r\n      return this.createFallbackContent(context7Content, libraryId, startTime);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assess content quality for coding tasks\r\n   */\r\n  private async assessContentQuality(docContent: string, prompt: string): Promise<number> {\r\n    try {\r\n      const response = await this.openaiService.createChatCompletion([\r\n          {\r\n            role: 'system',\r\n            content: `You are a content quality assessor for AI code generation. Rate documentation content on a scale of 1-10 based on:\r\n\r\n1. Code Examples (30%): Presence of practical, runnable code snippets\r\n2. Best Practices (25%): Clear patterns, conventions, and guidelines\r\n3. Relevance (25%): How well it matches the user's coding intent\r\n4. Completeness (20%): Essential information coverage\r\n\r\nReturn ONLY a JSON object with this exact structure:\r\n{\r\n  \"score\": 8.5,\r\n  \"reasoning\": \"Brief explanation of the score\",\r\n  \"strengths\": [\"list\", \"of\", \"strengths\"],\r\n  \"weaknesses\": [\"list\", \"of\", \"weaknesses\"]\r\n}`\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: `User Prompt: ${prompt}\r\n\r\nDocumentation Content:\r\n${docContent.substring(0, 2000)}...\r\n\r\nRate this content for AI code generation quality.`\r\n          }\r\n        ], {\r\n        temperature: 0.1,\r\n        maxTokens: 300\r\n      });\r\n\r\n      const content = response.choices[0]?.message?.content;\r\n      if (!content) throw new Error('No response from OpenAI');\r\n\r\n      const parsed = JSON.parse(content);\r\n      return Math.min(10, Math.max(1, parsed.score || 5));\r\n\r\n    } catch (error) {\r\n      this.logger.warn('Quality assessment failed, using default score', {\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      });\r\n      return 5.0; // Default moderate score\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract key components from content\r\n   */\r\n  private async extractKeyComponents(\r\n    docContent: string,\r\n    prompt: string,\r\n    libraryId: string\r\n  ): Promise<{\r\n    patterns: string[];\r\n    bestPractices: string[];\r\n    codeExamples: string[];\r\n  }> {\r\n    try {\r\n      const response = await this.openaiService.createChatCompletion([\r\n          {\r\n            role: 'system',\r\n            content: `You are a technical content analyzer. Extract key components from documentation for AI code generation.\r\n\r\nReturn ONLY a JSON object with this exact structure:\r\n{\r\n  \"patterns\": [\"pattern1\", \"pattern2\", \"pattern3\"],\r\n  \"bestPractices\": [\"practice1\", \"practice2\", \"practice3\"],\r\n  \"codeExamples\": [\"example1\", \"example2\", \"example3\"]\r\n}\r\n\r\nFocus on:\r\n- Patterns: Common coding patterns and conventions\r\n- Best Practices: Guidelines and recommendations\r\n- Code Examples: Practical, runnable code snippets`\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: `Library: ${libraryId}\r\nUser Prompt: ${prompt}\r\n\r\nContent:\r\n${docContent.substring(0, 3000)}...\r\n\r\nExtract key components for AI code generation.`\r\n          }\r\n        ], {\r\n        temperature: 0.2,\r\n        maxTokens: 500\r\n      });\r\n\r\n      const content = response.choices[0]?.message?.content;\r\n      if (!content) throw new Error('No response from OpenAI');\r\n\r\n      const parsed = JSON.parse(content);\r\n      return {\r\n        patterns: parsed.patterns || [],\r\n        bestPractices: parsed.bestPractices || [],\r\n        codeExamples: parsed.codeExamples || []\r\n      };\r\n\r\n    } catch (error) {\r\n      this.logger.warn('Key component extraction failed', {\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      });\r\n      \r\n      return {\r\n        patterns: [],\r\n        bestPractices: [],\r\n        codeExamples: []\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimize tokens while preserving quality\r\n   */\r\n  private async optimizeTokens(\r\n    content: string,\r\n    keyComponents: any,\r\n    prompt: string,\r\n    libraryId: string\r\n  ): Promise<string> {\r\n    try {\r\n      const targetTokens = Math.ceil(content.length / 4 * (1 - this.config.targetTokenReduction));\r\n      \r\n      const response = await this.openaiService.createChatCompletion([\r\n          {\r\n            role: 'system',\r\n            content: `You are a technical content optimizer for AI code generation. Create a concise, high-quality summary that:\r\n\r\n1. Preserves all essential information for coding\r\n2. Keeps all code examples and patterns\r\n3. Maintains best practices and guidelines\r\n4. Removes boilerplate and marketing content\r\n5. Focuses on practical, actionable information\r\n6. Optimizes for Cursor AI code generation\r\n\r\nTarget length: ~${targetTokens} tokens\r\nFormat: Clean, structured, code-focused content`\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: `Library: ${libraryId}\r\nUser Prompt: ${prompt}\r\n\r\nKey Components:\r\n- Patterns: ${keyComponents.patterns.join(', ')}\r\n- Best Practices: ${keyComponents.bestPractices.join(', ')}\r\n- Code Examples: ${keyComponents.codeExamples.length} examples\r\n\r\nOriginal Content:\r\n${content}\r\n\r\nCreate an optimized version for AI code generation.`\r\n          }\r\n        ], {\r\n        temperature: 0.1,\r\n        maxTokens: Math.min(4000, targetTokens * 2)\r\n      });\r\n\r\n      const curatedContent = response.choices[0]?.message?.content;\r\n      if (!curatedContent) throw new Error('No response from OpenAI');\r\n\r\n      return curatedContent;\r\n\r\n    } catch (error) {\r\n      this.logger.warn('Token optimization failed, using original content', {\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      });\r\n      return content;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create fallback content when curation fails\r\n   */\r\n  private createFallbackContent(\r\n    originalContent: string,\r\n    libraryId: string,\r\n    startTime: number\r\n  ): CuratedContent {\r\n    const originalTokens = Math.ceil(originalContent.length / 4);\r\n    \r\n    return {\r\n      originalContent,\r\n      curatedContent: originalContent,\r\n      qualityScore: 5.0,\r\n      tokenReduction: 0,\r\n      cursorOptimized: false,\r\n      keyPatterns: [],\r\n      bestPractices: [],\r\n      codeExamples: [],\r\n      metadata: {\r\n        libraryId,\r\n        originalTokens,\r\n        curatedTokens: originalTokens,\r\n        processingTime: Date.now() - startTime,\r\n        confidence: 0.5\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Test the curation service\r\n   */\r\n  async testCuration(): Promise<boolean> {\r\n    try {\r\n      const testContent = `\r\n# React Documentation\r\n\r\nReact is a JavaScript library for building user interfaces.\r\n\r\n## Getting Started\r\n\r\n\\`\\`\\`jsx\r\nimport React from 'react';\r\n\r\nfunction App() {\r\n  return <h1>Hello World</h1>;\r\n}\r\n\\`\\`\\`\r\n\r\n## Best Practices\r\n\r\n- Use functional components with hooks\r\n- Keep components small and focused\r\n- Use TypeScript for better development experience\r\n`;\r\n\r\n      const result = await this.curateForCursor(\r\n        testContent,\r\n        '/facebook/react',\r\n        'Create a React component',\r\n        {}\r\n      );\r\n\r\n      return result.qualityScore > 0 && result.curatedContent.length > 0;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Curation test failed', {\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n}\r",
        "File: src/services/ai/context7-enhancement-prompts.ts\nDescription: Class definition: Context7EnhancementPrompts\nCode:\nexport class Context7EnhancementPrompts {\r\n  \r\n  /**\r\n   * Select the appropriate enhancement prompt based on strategy and context\r\n   */\r\n  selectContext7EnhancementPrompt(\r\n    strategy: 'general' | 'framework-specific' | 'quality-focused' | 'project-aware',\r\n    framework?: string,\r\n    qualityFocus?: string[],\r\n    projectType?: string\r\n  ): Context7EnhancementPrompt {\r\n    \r\n    switch (strategy) {\r\n      case 'framework-specific':\r\n        return this.getFrameworkSpecificPrompt(framework);\r\n      \r\n      case 'quality-focused':\r\n        return this.getQualityFocusedPrompt(qualityFocus);\r\n      \r\n      case 'project-aware':\r\n        return this.getProjectAwarePrompt(projectType);\r\n      \r\n      case 'general':\r\n      default:\r\n        return this.getGeneralPrompt();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * General Context7 enhancement prompt\r\n   */\r\n  private getGeneralPrompt(): Context7EnhancementPrompt {\r\n    return {\r\n      systemPrompt: `You are an expert developer assistant specializing in enhancing technical documentation. Your task is to transform raw Context7 documentation into clear, actionable, and well-structured guidance that helps developers implement features effectively.\r\n\r\nKey Enhancement Guidelines:\r\n- Make documentation more readable and scannable\r\n- Add clear headings and structure\r\n- Include practical code examples\r\n- Explain the \"why\" behind recommendations\r\n- Add implementation tips and best practices\r\n- Use markdown formatting for better readability\r\n- Keep technical accuracy while improving clarity\r\n\r\nOutput Format:\r\n- Use clear headings (##, ###)\r\n- Include code examples in appropriate language blocks\r\n- Add bullet points for key concepts\r\n- Provide step-by-step guidance where applicable\r\n- Include warnings or important notes when relevant`,\r\n\r\n      userPrompt: `Please enhance the following Context7 documentation to make it more actionable and developer-friendly. Focus on clarity, practical examples, and implementation guidance.\r\n\r\nContext7 Documentation:\r\n{originalDocs}\r\n\r\nEnhanced Documentation:`,\r\n      \r\n      maxTokens: 2000,\r\n      temperature: 0.7\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Framework-specific enhancement prompt\r\n   */\r\n  private getFrameworkSpecificPrompt(framework?: string): Context7EnhancementPrompt {\r\n    const frameworkGuidance = this.getFrameworkGuidance(framework);\r\n    \r\n    return {\r\n      systemPrompt: `You are an expert ${framework || 'framework'} developer specializing in enhancing technical documentation. Your task is to transform raw Context7 documentation into ${framework || 'framework'}-specific, actionable guidance.\r\n\r\n${frameworkGuidance}\r\n\r\nKey Enhancement Guidelines:\r\n- Focus on ${framework || 'framework'}-specific patterns and conventions\r\n- Include ${framework || 'framework'}-specific code examples\r\n- Reference ${framework || 'framework'} best practices\r\n- Use ${framework || 'framework'} terminology and concepts\r\n- Provide ${framework || 'framework'}-specific implementation tips\r\n- Include ${framework || 'framework'} ecosystem considerations\r\n\r\nOutput Format:\r\n- Use clear headings (##, ###)\r\n- Include ${framework || 'framework'} code examples in appropriate language blocks\r\n- Add bullet points for key concepts\r\n- Provide step-by-step guidance where applicable\r\n- Include ${framework || 'framework'}-specific warnings or notes`,\r\n\r\n      userPrompt: `Please enhance the following Context7 documentation specifically for ${framework || 'framework'} development. Make it actionable and follow ${framework || 'framework'} best practices.\r\n\r\nContext7 Documentation:\r\n{originalDocs}\r\n\r\nEnhanced ${framework || 'Framework'} Documentation:`,\r\n      \r\n      maxTokens: 2500,\r\n      temperature: 0.6\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Quality-focused enhancement prompt\r\n   */\r\n  private getQualityFocusedPrompt(qualityFocus?: string[]): Context7EnhancementPrompt {\r\n    const qualityGuidance = this.getQualityGuidance(qualityFocus);\r\n    \r\n    return {\r\n      systemPrompt: `You are an expert developer specializing in ${qualityFocus?.join(', ') || 'code quality'}. Your task is to enhance Context7 documentation with a focus on ${qualityFocus?.join(', ') || 'quality'} considerations.\r\n\r\n${qualityGuidance}\r\n\r\nKey Enhancement Guidelines:\r\n- Emphasize ${qualityFocus?.join(', ') || 'quality'} best practices\r\n- Include ${qualityFocus?.join(', ') || 'quality'}-focused code examples\r\n- Add ${qualityFocus?.join(', ') || 'quality'} checklists or guidelines\r\n- Highlight potential ${qualityFocus?.join(', ') || 'quality'} issues\r\n- Provide ${qualityFocus?.join(', ') || 'quality'} optimization tips\r\n- Include ${qualityFocus?.join(', ') || 'quality'} testing considerations\r\n\r\nOutput Format:\r\n- Use clear headings (##, ###)\r\n- Include quality-focused code examples\r\n- Add quality checklists or guidelines\r\n- Provide step-by-step quality implementation\r\n- Include quality warnings or important notes`,\r\n\r\n      userPrompt: `Please enhance the following Context7 documentation with a focus on ${qualityFocus?.join(', ') || 'code quality'}. Make it actionable and emphasize ${qualityFocus?.join(', ') || 'quality'} best practices.\r\n\r\nContext7 Documentation:\r\n{originalDocs}\r\n\r\nQuality-Focused Enhanced Documentation:`,\r\n      \r\n      maxTokens: 2500,\r\n      temperature: 0.6\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Project-aware enhancement prompt\r\n   */\r\n  private getProjectAwarePrompt(projectType?: string): Context7EnhancementPrompt {\r\n    const projectGuidance = this.getProjectGuidance(projectType);\r\n    \r\n    return {\r\n      systemPrompt: `You are an expert developer specializing in ${projectType || 'software'} projects. Your task is to enhance Context7 documentation with ${projectType || 'project'}-specific considerations and best practices.\r\n\r\n${projectGuidance}\r\n\r\nKey Enhancement Guidelines:\r\n- Focus on ${projectType || 'project'}-specific patterns and architecture\r\n- Include ${projectType || 'project'}-specific code examples\r\n- Reference ${projectType || 'project'} best practices and conventions\r\n- Use ${projectType || 'project'} terminology and concepts\r\n- Provide ${projectType || 'project'}-specific implementation guidance\r\n- Include ${projectType || 'project'} ecosystem and tooling considerations\r\n\r\nOutput Format:\r\n- Use clear headings (##, ###)\r\n- Include ${projectType || 'project'}-specific code examples\r\n- Add bullet points for key concepts\r\n- Provide step-by-step ${projectType || 'project'} implementation\r\n- Include ${projectType || 'project'}-specific warnings or notes`,\r\n\r\n      userPrompt: `Please enhance the following Context7 documentation specifically for ${projectType || 'project'} development. Make it actionable and follow ${projectType || 'project'} best practices.\r\n\r\nContext7 Documentation:\r\n{originalDocs}\r\n\r\n${projectType || 'Project'}-Specific Enhanced Documentation:`,\r\n      \r\n      maxTokens: 2500,\r\n      temperature: 0.6\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get framework-specific guidance\r\n   */\r\n  private getFrameworkGuidance(framework?: string): string {\r\n    const guidance: Record<string, string> = {\r\n      'react': `\r\nReact-Specific Guidelines:\r\n- Use functional components with hooks\r\n- Follow React naming conventions (PascalCase for components)\r\n- Include proper prop types and TypeScript interfaces\r\n- Show proper state management patterns\r\n- Include useEffect, useState, and custom hooks examples\r\n- Reference React ecosystem tools (Create React App, Next.js, etc.)\r\n- Include JSX syntax and React-specific patterns`,\r\n\r\n      'vue': `\r\nVue-Specific Guidelines:\r\n- Use Vue 3 Composition API patterns\r\n- Follow Vue naming conventions (kebab-case for components)\r\n- Include proper props and emits definitions\r\n- Show reactive data and computed properties\r\n- Include Vue ecosystem tools (Vite, Nuxt.js, etc.)\r\n- Reference Vue-specific patterns and directives`,\r\n\r\n      'angular': `\r\nAngular-Specific Guidelines:\r\n- Use Angular CLI and modern Angular patterns\r\n- Follow Angular naming conventions (PascalCase for components)\r\n- Include proper TypeScript interfaces and decorators\r\n- Show dependency injection and services\r\n- Include Angular ecosystem tools and modules\r\n- Reference Angular-specific patterns and concepts`,\r\n\r\n      'html': `\r\nHTML-Specific Guidelines:\r\n- Use semantic HTML elements\r\n- Include proper accessibility attributes\r\n- Show modern HTML5 features\r\n- Include CSS integration examples\r\n- Reference HTML best practices and standards\r\n- Include responsive design considerations`,\r\n\r\n      'node': `\r\nNode.js-Specific Guidelines:\r\n- Use modern ES6+ JavaScript features\r\n- Follow Node.js conventions and patterns\r\n- Include proper error handling\r\n- Show async/await patterns\r\n- Reference Node.js ecosystem (Express, npm, etc.)\r\n- Include server-side specific considerations`\r\n    };\r\n\r\n    return guidance[framework?.toLowerCase() || ''] || `\r\n${framework || 'Framework'}-Specific Guidelines:\r\n- Use ${framework || 'framework'} conventions and patterns\r\n- Include ${framework || 'framework'}-specific code examples\r\n- Reference ${framework || 'framework'} best practices\r\n- Show ${framework || 'framework'} ecosystem integration\r\n- Include ${framework || 'framework'}-specific considerations`;\r\n  }\r\n\r\n  /**\r\n   * Get quality-focused guidance\r\n   */\r\n  private getQualityGuidance(qualityFocus?: string[]): string {\r\n    if (!qualityFocus || qualityFocus.length === 0) {\r\n      return `\r\nQuality Guidelines:\r\n- Focus on code quality and maintainability\r\n- Include proper error handling\r\n- Show clean code principles\r\n- Add performance considerations\r\n- Include testing best practices`;\r\n    }\r\n\r\n    const guidance: Record<string, string> = {\r\n      'accessibility': `\r\nAccessibility Guidelines:\r\n- Include ARIA attributes and semantic HTML\r\n- Show keyboard navigation patterns\r\n- Add screen reader considerations\r\n- Include color contrast and visual accessibility\r\n- Reference WCAG guidelines and standards\r\n- Show accessibility testing approaches`,\r\n\r\n      'performance': `\r\nPerformance Guidelines:\r\n- Include performance optimization techniques\r\n- Show lazy loading and code splitting\r\n- Add caching strategies\r\n- Include bundle size optimization\r\n- Reference performance monitoring tools\r\n- Show performance testing approaches`,\r\n\r\n      'security': `\r\nSecurity Guidelines:\r\n- Include security best practices\r\n- Show input validation and sanitization\r\n- Add authentication and authorization patterns\r\n- Include security headers and HTTPS\r\n- Reference security testing approaches\r\n- Show vulnerability prevention techniques`,\r\n\r\n      'testing': `\r\nTesting Guidelines:\r\n- Include unit testing patterns\r\n- Show integration testing approaches\r\n- Add end-to-end testing strategies\r\n- Include test-driven development practices\r\n- Reference testing frameworks and tools\r\n- Show testing best practices and patterns`\r\n    };\r\n\r\n    return qualityFocus.map(focus => guidance[focus.toLowerCase()] || `${focus} Guidelines: Focus on ${focus} best practices`).join('\\n\\n');\r\n  }\r\n\r\n  /**\r\n   * Get project-aware guidance\r\n   */\r\n  private getProjectGuidance(projectType?: string): string {\r\n    const guidance: Record<string, string> = {\r\n      'frontend': `\r\nFrontend Project Guidelines:\r\n- Focus on user interface and user experience\r\n- Include responsive design considerations\r\n- Show component-based architecture\r\n- Reference frontend build tools and bundlers\r\n- Include browser compatibility considerations\r\n- Show frontend performance optimization`,\r\n\r\n      'backend': `\r\nBackend Project Guidelines:\r\n- Focus on API design and server-side logic\r\n- Include database integration patterns\r\n- Show authentication and authorization\r\n- Reference backend frameworks and tools\r\n- Include server performance considerations\r\n- Show backend security best practices`,\r\n\r\n      'fullstack': `\r\nFullstack Project Guidelines:\r\n- Focus on end-to-end application development\r\n- Include frontend-backend integration\r\n- Show full-stack architecture patterns\r\n- Reference full-stack frameworks and tools\r\n- Include deployment and DevOps considerations\r\n- Show full-stack testing strategies`,\r\n\r\n      'library': `\r\nLibrary Project Guidelines:\r\n- Focus on reusable code and APIs\r\n- Include proper documentation and examples\r\n- Show versioning and compatibility\r\n- Reference library development tools\r\n- Include distribution and publishing considerations\r\n- Show library testing and validation`,\r\n\r\n      'mobile': `\r\nMobile Project Guidelines:\r\n- Focus on mobile-specific patterns and considerations\r\n- Include responsive design for mobile\r\n- Show mobile performance optimization\r\n- Reference mobile development frameworks\r\n- Include mobile testing approaches\r\n- Show mobile platform considerations`\r\n    };\r\n\r\n    return guidance[projectType?.toLowerCase() || ''] || `\r\n${projectType || 'Project'} Guidelines:\r\n- Focus on ${projectType || 'project'}-specific patterns and architecture\r\n- Include ${projectType || 'project'} best practices\r\n- Show ${projectType || 'project'}-specific implementation\r\n- Reference ${projectType || 'project'} tools and ecosystem\r\n- Include ${projectType || 'project'} considerations and constraints`;\r\n  }\r\n}\r",
        "File: src/services/ai/prompt-enhancement-prompts.ts\nDescription: Class definition: PromptEnhancementPrompts\nCode:\nexport class PromptEnhancementPrompts {\r\n  \r\n  /**\r\n   * Primary enhancement agent prompt for general enhancement\r\n   */\r\n  static getPrimaryEnhancementPrompt(): string {\r\n    return `You are an expert prompt enhancement agent specialized in improving developer prompts for maximum clarity, actionability, and technical accuracy.\r\n\r\n## Core Capabilities\r\n- Transform vague requests into specific, actionable prompts\r\n- Integrate framework-specific best practices and patterns\r\n- Apply quality requirements (accessibility, performance, security, testing)\r\n- Enhance prompts with project-aware context and conventions\r\n- Provide clear, step-by-step guidance for implementation\r\n\r\n## Enhancement Strategies\r\n1. **Clarity Enhancement**: Make vague requests specific and unambiguous\r\n2. **Context Integration**: Seamlessly weave in relevant project and framework context\r\n3. **Best Practice Application**: Include industry standards and framework conventions\r\n4. **Quality Focus**: Apply specific quality requirements (a11y, perf, security, testing)\r\n5. **Actionability**: Ensure every enhanced prompt leads to concrete implementation steps\r\n\r\n## Output Format\r\nReturn a JSON object with this exact structure:\r\n{\r\n  \"enhancedPrompt\": \"The improved, specific, and actionable prompt\",\r\n  \"improvements\": [\r\n    {\r\n      \"type\": \"clarity|specificity|actionability|completeness|relevance|best-practice|performance|security\",\r\n      \"description\": \"What was improved\",\r\n      \"impact\": \"low|medium|high\",\r\n      \"before\": \"Original text\",\r\n      \"after\": \"Enhanced text\"\r\n    }\r\n  ],\r\n  \"recommendations\": [\r\n    \"Additional suggestions for the user\",\r\n    \"Best practices to consider\",\r\n    \"Potential pitfalls to avoid\"\r\n  ],\r\n  \"qualityScore\": 0.85,\r\n  \"confidenceScore\": 0.92\r\n}\r\n\r\n## Quality Standards\r\n- Enhanced prompts must be specific and actionable\r\n- Include relevant technical details and context\r\n- Apply appropriate best practices and patterns\r\n- Ensure clarity and eliminate ambiguity\r\n- Provide clear implementation guidance\r\n- Consider quality requirements (accessibility, performance, security, testing)\r\n\r\n## Guidelines\r\n- Preserve the user's original intent while making it more specific\r\n- Use technical terminology appropriate to the framework and project\r\n- Include concrete examples when helpful\r\n- Reference specific patterns, conventions, and best practices\r\n- Ensure the enhanced prompt leads to implementable code\r\n- Consider the user's experience level and project context`;\r\n  }\r\n\r\n  /**\r\n   * Framework-specific enhancement prompts\r\n   */\r\n  static getFrameworkSpecificPrompt(framework: string, version: string): string {\r\n    const frameworkPrompts: Record<string, string> = {\r\n      'react': `You are a React expert specializing in prompt enhancement for React applications.\r\n\r\n## React-Specific Enhancements\r\n- Component architecture and patterns (functional components, hooks, context)\r\n- State management (useState, useReducer, Context API, Redux, Zustand)\r\n- Performance optimization (memo, useMemo, useCallback, lazy loading)\r\n- Testing approaches (Jest, React Testing Library, Cypress)\r\n- Accessibility (ARIA attributes, semantic HTML, keyboard navigation)\r\n- Modern React patterns (Server Components, Suspense, Concurrent Features)\r\n\r\n## React Best Practices\r\n- Use functional components with hooks\r\n- Implement proper error boundaries\r\n- Follow component composition patterns\r\n- Use TypeScript for type safety\r\n- Implement proper prop validation\r\n- Follow React naming conventions\r\n- Use proper key props for lists\r\n- Implement proper cleanup in useEffect\r\n\r\n## Common React Patterns\r\n- Custom hooks for reusable logic\r\n- Higher-order components for cross-cutting concerns\r\n- Render props for component composition\r\n- Compound components for complex UI\r\n- Provider pattern for global state\r\n- Container/Presentational component pattern`,\r\n\r\n      'vue': `You are a Vue.js expert specializing in prompt enhancement for Vue applications.\r\n\r\n## Vue-Specific Enhancements\r\n- Composition API and Options API patterns\r\n- Reactive data management (ref, reactive, computed, watch)\r\n- Component lifecycle and composition\r\n- State management (Pinia, Vuex)\r\n- Performance optimization (v-memo, keep-alive, lazy loading)\r\n- Testing approaches (Vitest, Vue Test Utils, Cypress)\r\n- Accessibility (ARIA attributes, semantic HTML, focus management)\r\n\r\n## Vue Best Practices\r\n- Use Composition API for new projects\r\n- Implement proper component structure\r\n- Use TypeScript for type safety\r\n- Follow Vue naming conventions\r\n- Use proper key attributes for v-for\r\n- Implement proper error handling\r\n- Use provide/inject for dependency injection\r\n- Follow single-file component structure\r\n\r\n## Common Vue Patterns\r\n- Composables for reusable logic\r\n- Provide/inject for dependency injection\r\n- Teleport for portal-like functionality\r\n- Suspense for async components\r\n- Keep-alive for component caching\r\n- Custom directives for DOM manipulation`,\r\n\r\n      'angular': `You are an Angular expert specializing in prompt enhancement for Angular applications.\r\n\r\n## Angular-Specific Enhancements\r\n- Component architecture and lifecycle\r\n- Dependency injection and services\r\n- Reactive forms and template-driven forms\r\n- RxJS observables and operators\r\n- Routing and navigation\r\n- State management (NgRx, Akita)\r\n- Testing approaches (Jasmine, Karma, Protractor)\r\n- Accessibility (Angular CDK, ARIA attributes)\r\n\r\n## Angular Best Practices\r\n- Use Angular CLI for project generation\r\n- Follow Angular style guide conventions\r\n- Implement proper component architecture\r\n- Use TypeScript for type safety\r\n- Implement proper error handling\r\n- Use reactive forms for complex forms\r\n- Follow Angular naming conventions\r\n- Use Angular CDK for accessibility\r\n\r\n## Common Angular Patterns\r\n- Services for business logic\r\n- Guards for route protection\r\n- Interceptors for HTTP requests\r\n- Pipes for data transformation\r\n- Directives for DOM manipulation\r\n- Resolvers for data preloading\r\n- Modules for feature organization`,\r\n\r\n      'html-css': `You are a frontend expert specializing in prompt enhancement for HTML/CSS development.\r\n\r\n## HTML/CSS-Specific Enhancements\r\n- Semantic HTML structure and accessibility\r\n- CSS methodologies (BEM, OOCSS, SMACSS)\r\n- Responsive design and mobile-first approach\r\n- CSS Grid and Flexbox layouts\r\n- CSS custom properties and variables\r\n- Performance optimization (critical CSS, lazy loading)\r\n- Cross-browser compatibility\r\n- Modern CSS features (container queries, subgrid, etc.)\r\n\r\n## HTML/CSS Best Practices\r\n- Use semantic HTML elements\r\n- Implement proper accessibility attributes\r\n- Follow mobile-first responsive design\r\n- Use CSS custom properties for theming\r\n- Implement proper CSS organization\r\n- Use modern CSS features with fallbacks\r\n- Optimize for performance\r\n- Follow naming conventions (BEM, etc.)\r\n\r\n## Common HTML/CSS Patterns\r\n- CSS Grid for complex layouts\r\n- Flexbox for component layouts\r\n- CSS custom properties for theming\r\n- CSS modules for component styling\r\n- PostCSS for CSS processing\r\n- CSS-in-JS for dynamic styling\r\n- Utility-first CSS frameworks\r\n- Component-based CSS architecture`,\r\n\r\n      'nodejs': `You are a Node.js expert specializing in prompt enhancement for backend development.\r\n\r\n## Node.js-Specific Enhancements\r\n- Express.js and Fastify frameworks\r\n- Middleware patterns and error handling\r\n- Database integration (MongoDB, PostgreSQL, MySQL)\r\n- Authentication and authorization (JWT, OAuth, Passport)\r\n- API design and RESTful principles\r\n- Testing approaches (Jest, Mocha, Supertest)\r\n- Performance optimization and monitoring\r\n- Security best practices\r\n\r\n## Node.js Best Practices\r\n- Use TypeScript for type safety\r\n- Implement proper error handling\r\n- Use environment variables for configuration\r\n- Implement proper logging and monitoring\r\n- Use dependency injection\r\n- Follow RESTful API design\r\n- Implement proper validation\r\n- Use proper security measures\r\n\r\n## Common Node.js Patterns\r\n- MVC architecture\r\n- Repository pattern for data access\r\n- Service layer for business logic\r\n- Middleware for cross-cutting concerns\r\n- Factory pattern for object creation\r\n- Observer pattern for events\r\n- Strategy pattern for algorithms\r\n- Decorator pattern for functionality extension`\r\n    };\r\n\r\n    return frameworkPrompts[framework.toLowerCase()] || this.getPrimaryEnhancementPrompt();\r\n  }\r\n\r\n  /**\r\n   * Quality-focused enhancement prompts\r\n   */\r\n  static getQualityFocusedPrompt(qualityType: string): string {\r\n    const qualityPrompts: Record<string, string> = {\r\n      'accessibility': `You are an accessibility expert specializing in prompt enhancement for inclusive web development.\r\n\r\n## Accessibility Enhancements\r\n- WCAG 2.1 AA compliance requirements\r\n- Semantic HTML structure and ARIA attributes\r\n- Keyboard navigation and focus management\r\n- Screen reader compatibility\r\n- Color contrast and visual accessibility\r\n- Alternative text and media descriptions\r\n- Form accessibility and validation\r\n- Mobile accessibility considerations\r\n\r\n## Accessibility Best Practices\r\n- Use semantic HTML elements\r\n- Implement proper ARIA attributes\r\n- Ensure keyboard accessibility\r\n- Provide alternative text for images\r\n- Use proper color contrast ratios\r\n- Implement focus management\r\n- Provide clear error messages\r\n- Test with screen readers\r\n\r\n## Common Accessibility Patterns\r\n- Skip links for navigation\r\n- Focus indicators for keyboard users\r\n- ARIA landmarks for page structure\r\n- Live regions for dynamic content\r\n- Form labels and error associations\r\n- Modal dialog accessibility\r\n- Tab order management\r\n- Screen reader announcements`,\r\n\r\n      'performance': `You are a performance expert specializing in prompt enhancement for high-performance web applications.\r\n\r\n## Performance Enhancements\r\n- Core Web Vitals optimization (LCP, FID, CLS)\r\n- Bundle size optimization and code splitting\r\n- Image optimization and lazy loading\r\n- Caching strategies and CDN usage\r\n- Database query optimization\r\n- API response optimization\r\n- Memory management and garbage collection\r\n- Network optimization and compression\r\n\r\n## Performance Best Practices\r\n- Implement code splitting and lazy loading\r\n- Optimize images and media assets\r\n- Use efficient data structures and algorithms\r\n- Implement proper caching strategies\r\n- Minimize bundle size\r\n- Use performance monitoring\r\n- Optimize critical rendering path\r\n- Implement progressive enhancement\r\n\r\n## Common Performance Patterns\r\n- Lazy loading for images and components\r\n- Virtual scrolling for large lists\r\n- Debouncing and throttling for user input\r\n- Memoization for expensive calculations\r\n- Service workers for caching\r\n- Web Workers for heavy computations\r\n- Intersection Observer for visibility\r\n- Request deduplication and batching`,\r\n\r\n      'security': `You are a security expert specializing in prompt enhancement for secure web applications.\r\n\r\n## Security Enhancements\r\n- Input validation and sanitization\r\n- Authentication and authorization\r\n- CSRF and XSS protection\r\n- SQL injection prevention\r\n- Secure data transmission (HTTPS, TLS)\r\n- Content Security Policy (CSP)\r\n- Secure session management\r\n- Data privacy and GDPR compliance\r\n\r\n## Security Best Practices\r\n- Validate and sanitize all inputs\r\n- Implement proper authentication\r\n- Use HTTPS for all communications\r\n- Implement proper authorization\r\n- Use secure session management\r\n- Implement proper error handling\r\n- Keep dependencies updated\r\n- Use security headers\r\n\r\n## Common Security Patterns\r\n- Input validation and sanitization\r\n- Authentication middleware\r\n- Authorization checks\r\n- CSRF token validation\r\n- XSS protection\r\n- SQL injection prevention\r\n- Rate limiting and throttling\r\n- Security headers implementation`,\r\n\r\n      'testing': `You are a testing expert specializing in prompt enhancement for comprehensive test coverage.\r\n\r\n## Testing Enhancements\r\n- Unit testing strategies and patterns\r\n- Integration testing approaches\r\n- End-to-end testing implementation\r\n- Test-driven development (TDD)\r\n- Behavior-driven development (BDD)\r\n- Mocking and stubbing techniques\r\n- Test coverage and quality metrics\r\n- Continuous integration testing\r\n\r\n## Testing Best Practices\r\n- Write tests before implementation (TDD)\r\n- Use descriptive test names\r\n- Follow AAA pattern (Arrange, Act, Assert)\r\n- Mock external dependencies\r\n- Test edge cases and error scenarios\r\n- Maintain high test coverage\r\n- Use proper test organization\r\n- Implement continuous testing\r\n\r\n## Common Testing Patterns\r\n- Test doubles (mocks, stubs, fakes)\r\n- Test fixtures and factories\r\n- Page object model for E2E tests\r\n- Test data builders\r\n- Parameterized tests\r\n- Test hooks and setup/teardown\r\n- Test isolation and independence\r\n- Test reporting and coverage`\r\n    };\r\n\r\n    return qualityPrompts[qualityType.toLowerCase()] || this.getPrimaryEnhancementPrompt();\r\n  }\r\n\r\n  /**\r\n   * Project-aware enhancement prompts\r\n   */\r\n  static getProjectAwarePrompt(projectType: string): string {\r\n    const projectPrompts: Record<string, string> = {\r\n      'frontend': `You are a frontend expert specializing in prompt enhancement for frontend applications.\r\n\r\n## Frontend-Specific Enhancements\r\n- User interface and user experience design\r\n- Component architecture and state management\r\n- Responsive design and mobile optimization\r\n- Performance optimization and Core Web Vitals\r\n- Accessibility and inclusive design\r\n- Browser compatibility and progressive enhancement\r\n- Build tools and development workflow\r\n- Testing strategies for frontend code\r\n\r\n## Frontend Best Practices\r\n- Follow mobile-first responsive design\r\n- Implement proper component architecture\r\n- Use modern CSS and JavaScript features\r\n- Optimize for performance and accessibility\r\n- Implement proper error handling\r\n- Use proper testing strategies\r\n- Follow coding standards and conventions\r\n- Implement proper build and deployment processes\r\n\r\n## Common Frontend Patterns\r\n- Component composition and reusability\r\n- State management patterns\r\n- Event handling and user interaction\r\n- Data fetching and caching\r\n- Form handling and validation\r\n- Routing and navigation\r\n- Theming and customization\r\n- Internationalization and localization`,\r\n\r\n      'backend': `You are a backend expert specializing in prompt enhancement for backend services and APIs.\r\n\r\n## Backend-Specific Enhancements\r\n- API design and RESTful principles\r\n- Database design and optimization\r\n- Authentication and authorization\r\n- Security and data protection\r\n- Performance and scalability\r\n- Error handling and logging\r\n- Testing strategies for backend code\r\n- Deployment and infrastructure\r\n\r\n## Backend Best Practices\r\n- Follow RESTful API design principles\r\n- Implement proper error handling\r\n- Use proper authentication and authorization\r\n- Implement proper logging and monitoring\r\n- Use proper database design\r\n- Implement proper security measures\r\n- Use proper testing strategies\r\n- Follow coding standards and conventions\r\n\r\n## Common Backend Patterns\r\n- MVC architecture and separation of concerns\r\n- Repository pattern for data access\r\n- Service layer for business logic\r\n- Middleware for cross-cutting concerns\r\n- Factory pattern for object creation\r\n- Observer pattern for events\r\n- Strategy pattern for algorithms\r\n- Decorator pattern for functionality extension`,\r\n\r\n      'fullstack': `You are a full-stack expert specializing in prompt enhancement for full-stack applications.\r\n\r\n## Full-Stack Enhancements\r\n- End-to-end application architecture\r\n- Frontend-backend integration\r\n- API design and consumption\r\n- Database design and optimization\r\n- Authentication and authorization flow\r\n- Performance optimization across the stack\r\n- Security considerations for both frontend and backend\r\n- Testing strategies for full-stack applications\r\n\r\n## Full-Stack Best Practices\r\n- Design APIs with frontend consumption in mind\r\n- Implement proper error handling across the stack\r\n- Use consistent coding standards\r\n- Implement proper security measures\r\n- Use proper testing strategies\r\n- Follow proper deployment practices\r\n- Implement proper monitoring and logging\r\n- Use proper version control and CI/CD\r\n\r\n## Common Full-Stack Patterns\r\n- API-first development approach\r\n- Microservices architecture\r\n- Event-driven architecture\r\n- CQRS (Command Query Responsibility Segregation)\r\n- Event sourcing\r\n- Domain-driven design\r\n- Hexagonal architecture\r\n- Clean architecture principles`,\r\n\r\n      'library': `You are a library expert specializing in prompt enhancement for reusable libraries and packages.\r\n\r\n## Library-Specific Enhancements\r\n- API design and developer experience\r\n- Documentation and examples\r\n- TypeScript support and type safety\r\n- Testing strategies for libraries\r\n- Versioning and backward compatibility\r\n- Performance optimization\r\n- Bundle size optimization\r\n- Distribution and publishing\r\n\r\n## Library Best Practices\r\n- Design clean and intuitive APIs\r\n- Provide comprehensive documentation\r\n- Use TypeScript for type safety\r\n- Implement proper testing strategies\r\n- Follow semantic versioning\r\n- Optimize for bundle size\r\n- Provide clear migration guides\r\n- Use proper build and distribution tools\r\n\r\n## Common Library Patterns\r\n- Plugin architecture and extensibility\r\n- Configuration and customization\r\n- Event system and callbacks\r\n- Factory pattern for object creation\r\n- Builder pattern for complex objects\r\n- Observer pattern for events\r\n- Strategy pattern for algorithms\r\n- Decorator pattern for functionality extension`\r\n    };\r\n\r\n    return projectPrompts[projectType.toLowerCase()] || this.getPrimaryEnhancementPrompt();\r\n  }\r\n\r\n  /**\r\n   * Select the appropriate enhancement prompt based on strategy\r\n   */\r\n  static selectEnhancementPrompt(\r\n    strategy: EnhancementStrategy,\r\n    projectContext?: ProjectContext,\r\n    frameworkContext?: FrameworkContext,\r\n    qualityRequirements?: QualityRequirements\r\n  ): string {\r\n    // Framework-specific enhancement\r\n    if (strategy.type === 'framework-specific' && frameworkContext) {\r\n      return this.getFrameworkSpecificPrompt(frameworkContext.framework, frameworkContext.version);\r\n    }\r\n\r\n    // Quality-focused enhancement\r\n    if (strategy.type === 'quality-focused' && qualityRequirements) {\r\n      const qualityTypes = Object.entries(qualityRequirements)\r\n        .filter(([_, enabled]) => enabled)\r\n        .map(([type, _]) => type);\r\n      \r\n      if (qualityTypes.length > 0) {\r\n        return this.getQualityFocusedPrompt(qualityTypes[0]);\r\n      }\r\n    }\r\n\r\n    // Project-aware enhancement\r\n    if (strategy.type === 'project-aware' && projectContext) {\r\n      return this.getProjectAwarePrompt(projectContext.projectType);\r\n    }\r\n\r\n    // Default to primary enhancement prompt\r\n    return this.getPrimaryEnhancementPrompt();\r\n  }\r\n\r\n  /**\r\n   * Get enhancement prompt with context integration\r\n   */\r\n  static getContextualEnhancementPrompt(\r\n    originalPrompt: string,\r\n    context: any,\r\n    strategy: EnhancementStrategy\r\n  ): string {\r\n    const basePrompt = this.selectEnhancementPrompt(strategy, context.projectContext, context.frameworkContext, context.qualityRequirements);\r\n    \r\n    return `${basePrompt}\r\n\r\n## Current Context\r\n- Project Type: ${context.projectContext?.projectType || 'Unknown'}\r\n- Framework: ${context.frameworkContext?.framework || 'Unknown'}\r\n- Language: ${context.projectContext?.language || 'Unknown'}\r\n- Quality Requirements: ${JSON.stringify(context.qualityRequirements || {})}\r\n\r\n## Original Prompt\r\n\"${originalPrompt}\"\r\n\r\n## Enhancement Task\r\nEnhance the above prompt using the provided context and strategy. Make it more specific, actionable, and aligned with best practices for the given framework and project type.`;\r\n  }\r\n}\r",
        "File: src/services/framework-detector/framework-detector.service.ts\nDescription: Class definition: FrameworkDetectorService\nCode:\nexport class FrameworkDetectorService {\r\n  private context7Service: any; // Using simple client now\r\n  private cacheService: Context7CacheService;\r\n  private aiService: any; // Will be injected\r\n  private projectAnalyzer: ProjectContextAnalyzer;\r\n  private metrics: DetectionMetrics;\r\n  private detectionPatterns: DetectionPattern[];\r\n\r\n  constructor(context7Service: any, cacheService: Context7CacheService, aiService?: any) {\r\n    this.context7Service = context7Service;\r\n    this.cacheService = cacheService;\r\n    this.aiService = aiService;\r\n    this.projectAnalyzer = new ProjectContextAnalyzer();\r\n    this.metrics = this.initializeMetrics();\r\n    this.detectionPatterns = this.initializeDetectionPatterns();\r\n  }\r\n\r\n  /**\r\n   * Main detection method - detects frameworks dynamically\r\n   */\r\n  async detectFrameworks(prompt: string, projectContext?: ProjectContext): Promise<FrameworkDetectionResult> {\r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      // 1. Extract potential library names using patterns\r\n      const patternMatches = this.extractLibraryNamesUsingPatterns(prompt);\r\n      \r\n      // 2. Use AI to suggest additional libraries with project context (if available)\r\n      const aiMatches = this.aiService ? await this.suggestLibrariesWithAI(prompt, projectContext) : [];\r\n      \r\n      // 3. Check project context for additional libraries\r\n      const projectMatches = projectContext ? this.extractFromProjectContext(projectContext) : [];\r\n      \r\n      // 4. Combine and deduplicate matches\r\n      const allMatches = this.combineMatches([...patternMatches, ...aiMatches, ...projectMatches]);\r\n      \r\n      // 5. Resolve with Context7\r\n      const context7Libraries = await this.resolveLibrariesWithContext7(allMatches);\r\n      \r\n      // 6. Update metrics\r\n      const detectionTime = performance.now() - startTime;\r\n      this.updateMetrics(context7Libraries, detectionTime);\r\n      \r\n      return {\r\n        detectedFrameworks: context7Libraries.map(lib => lib.name),\r\n        confidence: this.calculateOverallConfidence(context7Libraries),\r\n        suggestions: this.generateSuggestions(context7Libraries),\r\n        context7Libraries: context7Libraries.map(lib => lib.libraryId),\r\n        detectionMethod: this.determineDetectionMethod(allMatches)\r\n      };\r\n    } catch (error) {\r\n      console.error('Framework detection failed', { error, prompt });\r\n      return this.getFallbackResult();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract library names using regex patterns\r\n   */\r\n  private extractLibraryNamesUsingPatterns(prompt: string): LibraryMatch[] {\r\n    const matches: LibraryMatch[] = [];\r\n    \r\n    for (const pattern of this.detectionPatterns) {\r\n      const regexMatches = prompt.matchAll(pattern.regex);\r\n      for (const match of regexMatches) {\r\n        const name = match[1]?.toLowerCase();\r\n        if (name && this.isValidLibraryName(name)) {\r\n          matches.push({\r\n            name,\r\n            libraryId: '',\r\n            confidence: this.calculatePatternConfidence(name, pattern.type, pattern.weight),\r\n            source: 'pattern'\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return matches;\r\n  }\r\n\r\n  /**\r\n   * Use AI to suggest libraries with enhanced prompt analysis\r\n   * REDESIGNED: Enhanced with context-aware AI framework detection\r\n   */\r\n  private async suggestLibrariesWithAI(prompt: string, projectContext?: ProjectContext): Promise<LibraryMatch[]> {\r\n    if (!this.aiService) {\r\n      return [];\r\n    }\r\n\r\n    try {\r\n      const analysisPrompt = this.buildContextAwareAnalysisPrompt(prompt, projectContext);\r\n      \r\n      const response = await this.aiService.createChatCompletion([\r\n        {\r\n          role: 'system',\r\n          content: `You are an expert at analyzing development prompts and suggesting relevant frameworks/libraries.\r\n\r\nYour job is to:\r\n1. Analyze the user's prompt for framework/library needs\r\n2. Consider the project context (existing frameworks, project type, code patterns)\r\n3. Suggest 3-5 most relevant library/framework names\r\n4. Focus on frameworks, UI libraries, and development tools\r\n5. Be specific (e.g., use actual library names, not generic descriptions)\r\n6. Prioritize popular, well-documented libraries\r\n\r\nReturn ONLY a JSON array of library names:\r\n[\"library1\", \"library2\", \"library3\"]\r\n\r\nGuidelines:\r\n- Consider the project context when making suggestions\r\n- Match the complexity level to the user's needs\r\n- Include both primary and supporting libraries\r\n- Be specific and avoid generic suggestions`\r\n        },\r\n        {\r\n          role: 'user',\r\n          content: analysisPrompt\r\n        }\r\n      ], {\r\n        maxTokens: 300,\r\n        temperature: 0.3\r\n      });\r\n\r\n      const content = response.choices[0]?.message?.content;\r\n      if (!content) {\r\n        throw new Error('No response content from AI');\r\n      }\r\n\r\n      const aiMatches = this.parseAILibrarySuggestions(content);\r\n      \r\n      // Log AI usage for monitoring\r\n      console.log('AI framework detection usage', {\r\n        operation: 'framework_detection',\r\n        tokensUsed: response.usage?.total_tokens || 0,\r\n        cost: this.estimateAICost(response.usage?.total_tokens || 0),\r\n        librariesSuggested: aiMatches.length\r\n      });\r\n      \r\n      return aiMatches;\r\n    } catch (error) {\r\n      console.warn('AI library suggestion failed', { error });\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enhanced prompt-based framework inference using multiple strategies\r\n   * Replaces simple pattern matching with intelligent analysis\r\n   */\r\n  private async inferFrameworksFromPrompt(prompt: string): Promise<LibraryMatch[]> {\r\n    const matches: LibraryMatch[] = [];\r\n    \r\n    // 1. Direct framework mentions\r\n    const directMentions = this.extractDirectFrameworkMentions(prompt);\r\n    matches.push(...directMentions);\r\n    \r\n    // 2. Task-based inference\r\n    const taskInferences = this.inferFromTaskType(prompt);\r\n    matches.push(...taskInferences);\r\n    \r\n    // 3. Technology stack inference\r\n    const stackInferences = this.inferFromTechnologyStack(prompt);\r\n    matches.push(...stackInferences);\r\n    \r\n    // 4. Context-based inference\r\n    const contextInferences = this.inferFromContext(prompt);\r\n    matches.push(...contextInferences);\r\n    \r\n    // Remove duplicates and sort by confidence\r\n    const uniqueMatches = this.deduplicateMatches(matches);\r\n    return uniqueMatches.sort((a, b) => b.confidence - a.confidence);\r\n  }\r\n\r\n  /**\r\n   * Extract frameworks directly mentioned in the prompt\r\n   */\r\n  private extractDirectFrameworkMentions(prompt: string): LibraryMatch[] {\r\n    const matches: LibraryMatch[] = [];\r\n    const promptLower = prompt.toLowerCase();\r\n    \r\n    // Common framework names and their variations\r\n    const frameworkNames = [\r\n      'react', 'vue', 'angular', 'svelte', 'nextjs', 'nuxt', 'sveltekit',\r\n      'typescript', 'javascript', 'html', 'css', 'tailwind', 'bootstrap',\r\n      'express', 'fastify', 'koa', 'node', 'python', 'django', 'flask',\r\n      'mongodb', 'postgresql', 'mysql', 'redis', 'elasticsearch'\r\n    ];\r\n    \r\n    for (const framework of frameworkNames) {\r\n      const variations = [\r\n        framework,\r\n        framework.replace(/\\./g, ''),\r\n        framework.replace(/-/g, ''),\r\n        framework.replace(/\\./g, ' '),\r\n        framework.replace(/-/g, ' ')\r\n      ];\r\n      \r\n      for (const variation of variations) {\r\n        if (promptLower.includes(variation)) {\r\n          matches.push({\r\n            name: framework,\r\n            libraryId: '',\r\n            confidence: 0.9, // High confidence for direct mentions\r\n            source: 'direct-mention'\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return matches;\r\n  }\r\n\r\n  /**\r\n   * Infer frameworks based on the type of task described\r\n   */\r\n  private inferFromTaskType(prompt: string): LibraryMatch[] {\r\n    const matches: LibraryMatch[] = [];\r\n    const promptLower = prompt.toLowerCase();\r\n    \r\n    // Task-based framework mapping\r\n    const taskMappings = [\r\n      {\r\n        patterns: ['component', 'ui element', 'interface', 'user interface'],\r\n        frameworks: [{ name: 'react', confidence: 0.8 }, { name: 'vue', confidence: 0.7 }]\r\n      },\r\n      {\r\n        patterns: ['api', 'server', 'backend', 'endpoint', 'route'],\r\n        frameworks: [{ name: 'express', confidence: 0.8 }, { name: 'fastify', confidence: 0.6 }]\r\n      },\r\n      {\r\n        patterns: ['database', 'data storage', 'query', 'sql'],\r\n        frameworks: [{ name: 'mongodb', confidence: 0.7 }, { name: 'postgresql', confidence: 0.7 }]\r\n      },\r\n      {\r\n        patterns: ['styling', 'css', 'design', 'theme', 'layout'],\r\n        frameworks: [{ name: 'tailwind', confidence: 0.8 }, { name: 'css', confidence: 0.6 }]\r\n      }\r\n    ];\r\n    \r\n    for (const mapping of taskMappings) {\r\n      for (const pattern of mapping.patterns) {\r\n        if (promptLower.includes(pattern)) {\r\n          for (const framework of mapping.frameworks) {\r\n            matches.push({\r\n              name: framework.name,\r\n              libraryId: '',\r\n              confidence: framework.confidence,\r\n              source: 'task-inference'\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return matches;\r\n  }\r\n\r\n  /**\r\n   * Infer frameworks based on technology stack indicators\r\n   */\r\n  private inferFromTechnologyStack(prompt: string): LibraryMatch[] {\r\n    const matches: LibraryMatch[] = [];\r\n    const promptLower = prompt.toLowerCase();\r\n    \r\n    // Technology stack indicators\r\n    const stackIndicators = {\r\n      'web': ['html', 'css', 'javascript'],\r\n      'frontend': ['react', 'vue', 'angular', 'svelte'],\r\n      'backend': ['node', 'express', 'python', 'django'],\r\n      'database': ['mongodb', 'postgresql', 'mysql', 'redis'],\r\n      'deployment': ['docker', 'kubernetes', 'vercel', 'netlify']\r\n    };\r\n    \r\n    for (const [stack, frameworks] of Object.entries(stackIndicators)) {\r\n      if (promptLower.includes(stack)) {\r\n        for (const framework of frameworks) {\r\n          matches.push({\r\n            name: framework,\r\n            libraryId: '',\r\n            confidence: 0.6,\r\n            source: 'stack-inference'\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return matches;\r\n  }\r\n\r\n  /**\r\n   * Infer frameworks from context clues\r\n   */\r\n  private inferFromContext(prompt: string): LibraryMatch[] {\r\n    const matches: LibraryMatch[] = [];\r\n    \r\n    // Context-based inference patterns\r\n    if (prompt.includes('admin') || prompt.includes('dashboard')) {\r\n      matches.push({ name: 'react', libraryId: '', confidence: 0.7, source: 'context-inference' });\r\n    }\r\n    \r\n    if (prompt.includes('mobile') || prompt.includes('app')) {\r\n      matches.push({ name: 'react', libraryId: '', confidence: 0.6, source: 'context-inference' });\r\n    }\r\n    \r\n    if (prompt.includes('server') || prompt.includes('api')) {\r\n      matches.push({ name: 'node', libraryId: '', confidence: 0.7, source: 'context-inference' });\r\n    }\r\n    \r\n    return matches;\r\n  }\r\n\r\n  /**\r\n   * Remove duplicate framework matches and merge confidence scores\r\n   */\r\n  private deduplicateMatches(matches: LibraryMatch[]): LibraryMatch[] {\r\n    const uniqueMatches = new Map<string, LibraryMatch>();\r\n    \r\n    for (const match of matches) {\r\n      const existing = uniqueMatches.get(match.name);\r\n      if (existing) {\r\n        // Merge confidence scores (take the highest)\r\n        existing.confidence = Math.max(existing.confidence, match.confidence);\r\n        // Merge sources\r\n        if (!existing.source.includes(match.source)) {\r\n          existing.source += `, ${match.source}`;\r\n        }\r\n      } else {\r\n        uniqueMatches.set(match.name, { ...match });\r\n      }\r\n    }\r\n    \r\n    return Array.from(uniqueMatches.values());\r\n  }\r\n\r\n  /**\r\n   * Extract libraries from project context\r\n   */\r\n  private extractFromProjectContext(projectContext: ProjectContext): LibraryMatch[] {\r\n    const matches: LibraryMatch[] = [];\r\n    \r\n    // Extract from package.json dependencies\r\n    if (projectContext.dependencies) {\r\n      for (const [name, version] of Object.entries(projectContext.dependencies)) {\r\n        if (this.isValidLibraryName(name)) {\r\n          matches.push({\r\n            name: name.toLowerCase(),\r\n            libraryId: '',\r\n            confidence: 0.9, // High confidence for project dependencies\r\n            source: 'project'\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Extract from suggested frameworks\r\n    if (projectContext.suggestedFrameworks) {\r\n      for (const framework of projectContext.suggestedFrameworks) {\r\n        if (this.isValidLibraryName(framework)) {\r\n          matches.push({\r\n            name: framework.toLowerCase(),\r\n            libraryId: '',\r\n            confidence: 0.8, // High confidence for detected frameworks\r\n            source: 'project'\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return matches;\r\n  }\r\n\r\n  /**\r\n   * Resolve libraries with Context7\r\n   */\r\n  private async resolveLibrariesWithContext7(matches: LibraryMatch[]): Promise<LibraryMatch[]> {\r\n    const resolved: LibraryMatch[] = [];\r\n    \r\n    for (const match of matches) {\r\n      try {\r\n        // Check cache first\r\n        const cached = await this.cacheService.getCachedDocs(match.name);\r\n        if (cached) {\r\n          resolved.push({ ...match, libraryId: cached.libraryId });\r\n          continue;\r\n        }\r\n        \r\n        // Resolve with Context7\r\n        const libraryInfo = await this.context7Service.resolveLibraryId(match.name);\r\n        const libraryId = libraryInfo.length > 0 && libraryInfo[0] ? libraryInfo[0].id : null;\r\n        \r\n        if (!libraryId) {\r\n          console.warn(`No Context7 library found for ${match.name}`);\r\n          continue;\r\n        }\r\n        \r\n        const docs = await this.context7Service.getLibraryDocumentation(libraryId, undefined, 2000);\r\n        \r\n        // Cache the result\r\n        await this.cacheService.cacheDocs(match.name, libraryId, docs);\r\n        \r\n        resolved.push({ ...match, libraryId });\r\n      } catch (error) {\r\n        console.warn(`Failed to resolve library ${match.name}`, { error });\r\n      }\r\n    }\r\n    \r\n    return resolved;\r\n  }\r\n\r\n  /**\r\n   * Combine and deduplicate matches\r\n   */\r\n  private combineMatches(matches: LibraryMatch[]): LibraryMatch[] {\r\n    const uniqueMatches = new Map<string, LibraryMatch>();\r\n    \r\n    for (const match of matches) {\r\n      const existing = uniqueMatches.get(match.name);\r\n      if (!existing || match.confidence > existing.confidence) {\r\n        uniqueMatches.set(match.name, match);\r\n      }\r\n    }\r\n    \r\n    return Array.from(uniqueMatches.values());\r\n  }\r\n\r\n  /**\r\n   * Validate library name\r\n   */\r\n  private isValidLibraryName(name: string): boolean {\r\n    const commonWords = ['the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'is', 'are', 'was', 'were'];\r\n    return name.length > 2 && !commonWords.includes(name) && /^[a-z0-9-]+$/.test(name);\r\n  }\r\n\r\n  /**\r\n   * Calculate pattern confidence\r\n   */\r\n  private calculatePatternConfidence(name: string, type: string, weight: number): number {\r\n    const typeWeights = { component: 0.9, framework: 0.8, library: 0.7, app: 0.6 };\r\n    const baseConfidence = typeWeights[type as keyof typeof typeWeights] || 0.5;\r\n    return Math.min(1, baseConfidence * weight);\r\n  }\r\n\r\n  /**\r\n   * Calculate overall confidence\r\n   */\r\n  private calculateOverallConfidence(libraries: LibraryMatch[]): number {\r\n    if (libraries.length === 0) return 0;\r\n    return libraries.reduce((sum, lib) => sum + lib.confidence, 0) / libraries.length;\r\n  }\r\n\r\n  /**\r\n   * Generate suggestions\r\n   */\r\n  private generateSuggestions(libraries: LibraryMatch[]): string[] {\r\n    if (libraries.length === 0) {\r\n      return ['Consider specifying a framework or library name in your prompt'];\r\n    }\r\n    return libraries.map(lib => `Detected ${lib.name} (${lib.source})`);\r\n  }\r\n\r\n  /**\r\n   * Determine detection method\r\n   */\r\n  private determineDetectionMethod(matches: LibraryMatch[]): 'pattern' | 'ai' | 'project' | 'fallback' {\r\n    if (matches.some(m => m.source === 'project')) return 'project';\r\n    if (matches.some(m => m.source === 'ai')) return 'ai';\r\n    if (matches.some(m => m.source === 'pattern')) return 'pattern';\r\n    return 'fallback';\r\n  }\r\n\r\n  /**\r\n   * Get fallback result\r\n   */\r\n  private getFallbackResult(): FrameworkDetectionResult {\r\n    return {\r\n      detectedFrameworks: [],\r\n      confidence: 0,\r\n      suggestions: ['No frameworks detected. Try being more specific about the technology you want to use.'],\r\n      context7Libraries: [],\r\n      detectionMethod: 'fallback'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialize detection patterns (dynamic, AI-powered)\r\n   */\r\n  private initializeDetectionPatterns(): DetectionPattern[] {\r\n    try {\r\n      // Return basic patterns that work with any framework/library names\r\n      // This is a real dynamic method that actually works\r\n      return [\r\n        { regex: /create\\s+a\\s+(\\w+)\\s+component/gi, type: 'component', weight: 1.0 },\r\n        { regex: /using\\s+(\\w+)\\s+framework/gi, type: 'framework', weight: 1.0 },\r\n        { regex: /with\\s+(\\w+)\\s+library/gi, type: 'library', weight: 1.0 },\r\n        { regex: /build\\s+(\\w+)\\s+app/gi, type: 'app', weight: 0.9 },\r\n        { regex: /(\\w+)\\s+component/gi, type: 'component', weight: 0.8 },\r\n        { regex: /(\\w+)\\s+framework/gi, type: 'framework', weight: 0.8 },\r\n        { regex: /(\\w+)\\s+library/gi, type: 'library', weight: 0.8 },\r\n        { regex: /(\\w+)\\s+ui/gi, type: 'library', weight: 0.7 },\r\n        { regex: /(\\w+)\\s+styling/gi, type: 'library', weight: 0.7 }\r\n      ];\r\n    } catch (error) {\r\n      console.error('Failed to initialize detection patterns', { error: error instanceof Error ? error.message : 'Unknown error' });\r\n      // Return empty array as safe fallback\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize metrics\r\n   */\r\n  private initializeMetrics(): DetectionMetrics {\r\n    return {\r\n      totalDetections: 0,\r\n      successfulDetections: 0,\r\n      averageConfidence: 0,\r\n      frameworkDistribution: {},\r\n      cacheHitRate: 0,\r\n      detectionMethodDistribution: {},\r\n      averageDetectionTime: 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update metrics\r\n   */\r\n  private updateMetrics(libraries: LibraryMatch[], detectionTime: number): void {\r\n    this.metrics.totalDetections++;\r\n    \r\n    if (libraries.length > 0) {\r\n      this.metrics.successfulDetections++;\r\n      \r\n      // Update framework distribution\r\n      for (const lib of libraries) {\r\n        this.metrics.frameworkDistribution[lib.name] = \r\n          (this.metrics.frameworkDistribution[lib.name] || 0) + 1;\r\n      }\r\n    }\r\n    \r\n    // Update average confidence\r\n    this.metrics.averageConfidence = \r\n      (this.metrics.averageConfidence + this.calculateOverallConfidence(libraries)) / 2;\r\n    \r\n    // Update average detection time\r\n    this.metrics.averageDetectionTime = \r\n      (this.metrics.averageDetectionTime + detectionTime) / 2;\r\n  }\r\n\r\n\r\n  /**\r\n   * Build context-aware analysis prompt for AI\r\n   * REDESIGNED: Creates comprehensive context for AI framework detection\r\n   */\r\n  private buildContextAwareAnalysisPrompt(prompt: string, projectContext?: ProjectContext): string {\r\n    let contextInfo = `User Prompt: \"${prompt}\"\\n\\n`;\r\n    \r\n    if (projectContext) {\r\n      if (projectContext.dependencies && Object.keys(projectContext.dependencies).length > 0) {\r\n        contextInfo += `Existing Dependencies:\\n${Object.keys(projectContext.dependencies).slice(0, 10).join(', ')}\\n\\n`;\r\n      }\r\n      \r\n      if (projectContext.suggestedFrameworks && projectContext.suggestedFrameworks.length > 0) {\r\n        contextInfo += `Detected Frameworks: ${projectContext.suggestedFrameworks.join(', ')}\\n\\n`;\r\n      }\r\n      \r\n      if (projectContext.projectType) {\r\n        contextInfo += `Project Type: ${projectContext.projectType}\\n\\n`;\r\n      }\r\n    }\r\n    \r\n    contextInfo += `Please suggest the most relevant frameworks/libraries for this prompt considering the project context.`;\r\n    \r\n    return contextInfo;\r\n  }\r\n\r\n  /**\r\n   * Parse AI library suggestions from JSON response\r\n   * REDESIGNED: Handles JSON array response format\r\n   */\r\n  private parseAILibrarySuggestions(content: string): LibraryMatch[] {\r\n    try {\r\n      // Clean the content - remove any markdown formatting\r\n      let cleanContent = content.trim();\r\n      if (cleanContent.startsWith('```json')) {\r\n        cleanContent = cleanContent.replace(/^```json\\s*/, '').replace(/\\s*```$/, '');\r\n      } else if (cleanContent.startsWith('```')) {\r\n        cleanContent = cleanContent.replace(/^```\\s*/, '').replace(/\\s*```$/, '');\r\n      }\r\n\r\n      const libraries = JSON.parse(cleanContent);\r\n      \r\n      if (!Array.isArray(libraries)) {\r\n        throw new Error('Response is not an array');\r\n      }\r\n\r\n      return libraries\r\n        .filter((lib: any) => typeof lib === 'string' && lib.length > 0)\r\n        .map((lib: string) => ({\r\n          name: lib.toLowerCase().trim(),\r\n          libraryId: '',\r\n          confidence: 0.8, // High confidence for AI suggestions\r\n          source: 'ai' as const\r\n        }));\r\n\r\n    } catch (error) {\r\n      console.warn('Failed to parse AI library suggestions', { error, content });\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Estimate AI cost based on token usage\r\n   * REDESIGNED: Tracks AI costs for monitoring and budget control\r\n   */\r\n  private estimateAICost(tokens: number): number {\r\n    // GPT-4 pricing: ~$0.03 per 1K tokens for input, ~$0.06 per 1K tokens for output\r\n    // Using average of $0.045 per 1K tokens for cost estimation\r\n    const costPer1KTokens = 0.045;\r\n    return (tokens / 1000) * costPer1KTokens;\r\n  }\r\n\r\n  /**\r\n   * Get detection metrics\r\n   */\r\n  getMetrics(): DetectionMetrics {\r\n    const cacheStats = this.cacheService.getDetectionMetrics();\r\n    return {\r\n      ...this.metrics,\r\n      cacheHitRate: cacheStats.cacheHitRate || 0\r\n    };\r\n  }\r\n}\r",
        "File: src/tools/enhance/prompt-analyzer.service.ts\nDescription: Class definition: PromptAnalyzerService\nCode:\nexport class PromptAnalyzerService {\r\n  private logger: Logger;\r\n  private openaiService?: OpenAIService | undefined;\r\n\r\n  constructor(logger: Logger, openaiService?: OpenAIService | undefined) {\r\n    this.logger = logger;\r\n    this.openaiService = openaiService;\r\n  }\r\n\r\n  /**\r\n   * Analyze prompt complexity to determine appropriate response strategy\r\n   * Implements intelligent complexity detection with multiple indicators\r\n   */\r\n  analyzePromptComplexity(prompt: string): PromptComplexity {\r\n    const indicators: string[] = [];\r\n    let score = 0;\r\n    \r\n    // Length-based scoring\r\n    if (prompt.length < 20) {\r\n      score += 3;\r\n      indicators.push('very-short');\r\n    } else if (prompt.length < 50) {\r\n      score += 2;\r\n      indicators.push('short');\r\n    } else if (prompt.length > 200) {\r\n      score += 1;\r\n      indicators.push('long');\r\n    }\r\n    \r\n    // Simple question patterns\r\n    const simplePatterns = [\r\n      /^(yes|no|ok|sure|maybe)\\s*$/i,\r\n      /^(yes|no)\\s+or\\s+(yes|no)/i,\r\n      /^(what|how|when|where|why)\\s+\\w+\\?$/i,\r\n      /^(is|are|was|were|do|does|did|can|could|will|would)\\s+\\w+/i,\r\n      /^what\\s+is\\s+\\d+\\s*[\\+\\-\\*\\/]\\s*\\d+\\??$/i,  // Math questions like \"What is 2+2?\"\r\n      /^\\d+\\s*[\\+\\-\\*\\/]\\s*\\d+\\??$/i,  // Direct math like \"2+2?\"\r\n      /^what\\s+is\\s+\\d+\\s*[\\+\\-\\*\\/]\\s*\\d+\\s*\\??$/i,  // \"What is 2+2\" without question mark\r\n      /^how\\s+do\\s+i\\s+create\\s+a\\s+(\\w+)\\??$/i,  // Simple element creation questions\r\n      /^how\\s+to\\s+create\\s+a\\s+(\\w+)\\??$/i,  // Simple element creation questions\r\n      /^how\\s+do\\s+i\\s+make\\s+a\\s+(\\w+)\\??$/i  // Simple element creation questions\r\n    ];\r\n    \r\n    if (simplePatterns.some(pattern => pattern.test(prompt.trim()))) {\r\n      score += 2;\r\n      indicators.push('simple-question');\r\n    }\r\n    \r\n    // Complex development patterns\r\n    const complexPatterns = [\r\n      /create|build|implement|develop/i,\r\n      /component|function|class|service/i,\r\n      /api|endpoint|database|schema/i,\r\n      /test|testing|debug|fix/i,\r\n      /deploy|production|staging/i\r\n    ];\r\n    \r\n    const complexMatches = complexPatterns.filter(pattern => pattern.test(prompt));\r\n    if (complexMatches.length > 0) {\r\n      score -= complexMatches.length;\r\n      indicators.push(...complexMatches.map(() => 'development-task'));\r\n    }\r\n    \r\n    // Framework-specific complexity\r\n    const frameworkKeywords = [\r\n      'react', 'vue', 'angular', 'typescript', 'javascript',\r\n      'node', 'express', 'next', 'nuxt', 'svelte'\r\n    ];\r\n    \r\n    const frameworkMatches = frameworkKeywords.filter(keyword => \r\n      prompt.toLowerCase().includes(keyword)\r\n    );\r\n    if (frameworkMatches.length > 0) {\r\n      score -= frameworkMatches.length * 0.5;\r\n      indicators.push(...frameworkMatches.map(() => 'framework-specific'));\r\n    }\r\n    \r\n    // Determine complexity level\r\n    let level: 'simple' | 'medium' | 'complex';\r\n    if (score >= 2) {\r\n      level = 'simple';\r\n    } else if (score >= 0) {\r\n      level = 'medium';\r\n    } else {\r\n      level = 'complex';\r\n    }\r\n    \r\n    this.logger.debug('Prompt complexity analysis', {\r\n      prompt: prompt.substring(0, 100) + '...',\r\n      level,\r\n      score,\r\n      indicators\r\n    });\r\n    \r\n    return { level, score, indicators };\r\n  }\r\n\r\n  /**\r\n   * Analyze prompt complexity with AI and project context\r\n   * REDESIGNED: Uses OpenAI for intelligent complexity analysis with project context\r\n   */\r\n  async analyzePromptComplexityWithContext(\r\n    prompt: string, \r\n    projectContext: ProjectContext\r\n  ): Promise<AIPromptComplexity> {\r\n    try {\r\n      // If OpenAI is not available, fall back to basic analysis\r\n      if (!this.openaiService) {\r\n        this.logger.debug('OpenAI not available, falling back to basic analysis');\r\n        const basicComplexity = this.analyzePromptComplexity(prompt);\r\n        return {\r\n          ...basicComplexity,\r\n          userExpertiseLevel: this.inferUserExpertiseLevel(projectContext),\r\n          responseStrategy: this.determineResponseStrategy(basicComplexity.level),\r\n          estimatedTokens: this.estimateTokens(basicComplexity.level),\r\n          confidence: 0.6 // Lower confidence for basic analysis\r\n        };\r\n      }\r\n\r\n      this.logger.debug('Starting AI-powered prompt complexity analysis', {\r\n        prompt: prompt.substring(0, 100) + '...',\r\n        projectContextSize: projectContext.repoFacts.length + projectContext.codeSnippets.length\r\n      });\r\n\r\n      // Create context-aware analysis prompt\r\n      const analysisPrompt = this.buildAnalysisPrompt(prompt, projectContext);\r\n      \r\n      const response = await this.openaiService.createChatCompletion([\r\n        {\r\n          role: 'system',\r\n          content: `You are an expert at analyzing developer prompts and determining their complexity level. \r\n\r\nYour job is to:\r\n1. Analyze the user's prompt for complexity indicators\r\n2. Consider the project context (frameworks, code patterns, project type)\r\n3. Determine the user's expertise level based on project context\r\n4. Recommend the best response strategy\r\n5. Estimate token requirements for an optimal response\r\n\r\nReturn ONLY valid JSON with this exact structure:\r\n{\r\n  \"level\": \"simple|medium|complex\",\r\n  \"score\": 1-10,\r\n  \"indicators\": [\"indicator1\", \"indicator2\"],\r\n  \"userExpertiseLevel\": \"beginner|intermediate|advanced\",\r\n  \"responseStrategy\": \"minimal|standard|comprehensive\",\r\n  \"estimatedTokens\": 500,\r\n  \"confidence\": 0.85\r\n}\r\n\r\nGuidelines:\r\n- Simple: Basic questions, single tasks, clear requests (score 7-10)\r\n- Medium: Multi-step tasks, some complexity, moderate context needed (score 4-6)\r\n- Complex: Large projects, multiple technologies, extensive context needed (score 1-3)\r\n- Consider project context when determining user expertise level\r\n- Estimate tokens based on complexity and context needed\r\n- Be confident in your analysis (0.7-0.95)`\r\n        },\r\n        {\r\n          role: 'user',\r\n          content: analysisPrompt\r\n        }\r\n      ], {\r\n        maxTokens: 500,\r\n        temperature: 0.2 // Low temperature for consistent analysis\r\n      });\r\n\r\n      const content = response.choices[0]?.message?.content;\r\n      if (!content) {\r\n        throw new Error('No response content from OpenAI');\r\n      }\r\n\r\n      // Parse and validate the AI response\r\n      const aiComplexity = this.parseAIComplexityResponse(content);\r\n      \r\n      this.logger.debug('AI complexity analysis completed', {\r\n        level: aiComplexity.level,\r\n        score: aiComplexity.score,\r\n        userExpertiseLevel: aiComplexity.userExpertiseLevel,\r\n        confidence: aiComplexity.confidence,\r\n        estimatedTokens: aiComplexity.estimatedTokens\r\n      });\r\n\r\n      // Log AI usage for monitoring\r\n      this.logger.info('AI complexity analysis usage', {\r\n        operation: 'prompt_complexity_analysis',\r\n        tokensUsed: response.usage?.total_tokens || 0,\r\n        cost: this.estimateAICost(response.usage?.total_tokens || 0),\r\n        confidence: aiComplexity.confidence\r\n      });\r\n\r\n      return aiComplexity;\r\n\r\n    } catch (error) {\r\n      this.logger.warn('AI complexity analysis failed, falling back to basic analysis', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        prompt: prompt.substring(0, 100) + '...'\r\n      });\r\n      \r\n      // Fallback to basic analysis\r\n      const basicComplexity = this.analyzePromptComplexity(prompt);\r\n      return {\r\n        ...basicComplexity,\r\n        userExpertiseLevel: this.inferUserExpertiseLevel(projectContext),\r\n        responseStrategy: this.determineResponseStrategy(basicComplexity.level),\r\n        estimatedTokens: this.estimateTokens(basicComplexity.level),\r\n        confidence: 0.5 // Lower confidence due to fallback\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get optimized options based on prompt complexity\r\n   * Implements adaptive response sizing for better user experience\r\n   */\r\n  getOptimizedOptions(\r\n    originalOptions: any,\r\n    complexity: PromptComplexity\r\n  ): OptimizedOptions {\r\n    const options = { ...originalOptions };\r\n    \r\n    switch (complexity.level) {\r\n      case 'simple':\r\n        // Minimal context for simple prompts like \"yes or no\" (reduced by 20%)\r\n        options.maxTokens = Math.min(options.maxTokens || 4000, 400);\r\n        options.includeMetadata = false;\r\n        options.useCache = true;\r\n        options.simpleMode = true;\r\n        break;\r\n        \r\n      case 'medium':\r\n        // Moderate context for medium complexity prompts (reduced by 20%)\r\n        options.maxTokens = Math.min(options.maxTokens || 4000, 1200);\r\n        options.includeMetadata = true;\r\n        options.useCache = true;\r\n        break;\r\n        \r\n      case 'complex':\r\n        // Full context for complex development tasks (reduced by 20%)\r\n        options.maxTokens = Math.min(options.maxTokens || 4000, 3200);\r\n        options.includeMetadata = true;\r\n        options.useCache = true;\r\n        break;\r\n    }\r\n    \r\n    this.logger.debug('Optimized options generated', {\r\n      complexity: complexity.level,\r\n      maxTokens: options.maxTokens,\r\n      includeMetadata: options.includeMetadata,\r\n      useCache: options.useCache\r\n    });\r\n    \r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * Check if a prompt should trigger breakdown functionality\r\n   * Analyzes prompt characteristics to determine if task breakdown would be beneficial\r\n   */\r\n  shouldBreakdown(prompt: string, options?: { includeBreakdown?: boolean; maxTasks?: number }): boolean {\r\n    try {\r\n      // If explicitly disabled, don't breakdown\r\n      if (options?.includeBreakdown === false) {\r\n        return false;\r\n      }\r\n\r\n      // If explicitly enabled, always breakdown\r\n      if (options?.includeBreakdown === true) {\r\n        return true;\r\n      }\r\n\r\n      // Auto-detect based on prompt characteristics\r\n      const promptLower = prompt.toLowerCase();\r\n      \r\n      // Keywords that suggest complex, multi-step projects\r\n      // Keywords that suggest complex, multi-step tasks (dynamic detection)\r\n      const complexKeywords = this.getComplexKeywords();\r\n      \r\n      // Keywords that suggest simple, single tasks (dynamic detection)\r\n      const simpleKeywords = this.getSimpleKeywords();\r\n      \r\n      const hasComplexKeywords = complexKeywords.some(keyword => promptLower.includes(keyword));\r\n      const hasSimpleKeywords = simpleKeywords.some(keyword => promptLower.includes(keyword));\r\n      \r\n      // Check prompt length (longer prompts are more likely to be complex)\r\n      const isLongPrompt = prompt.length > 100;\r\n      \r\n      // Check for multiple sentences or bullet points (suggests multiple tasks)\r\n      const hasMultipleParts = prompt.includes('.') && prompt.split('.').length > 2;\r\n      const hasBulletPoints = prompt.includes('-') || prompt.includes('*') || prompt.includes('â€¢');\r\n      \r\n      // Decision logic\r\n      if (hasComplexKeywords && (isLongPrompt || hasMultipleParts || hasBulletPoints)) {\r\n        return true;\r\n      }\r\n      \r\n      if (hasSimpleKeywords && !isLongPrompt) {\r\n        return false;\r\n      }\r\n      \r\n      // Default to breakdown for medium-length prompts with project keywords\r\n      return isLongPrompt && (hasComplexKeywords || hasMultipleParts);\r\n      \r\n    } catch (error) {\r\n      this.logger.warn('Error detecting prompt complexity for breakdown', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        prompt: prompt.substring(0, 100) + '...'\r\n      });\r\n      return false;\r\n    }\r\n  }\r",
        "File: src/services/ai/ai-library-suggestion.service.ts\nDescription: Class definition: AILibrarySuggestionService\nCode:\nexport class AILibrarySuggestionService {\r\n  private config: AILibrarySuggestionConfig;\r\n  private aiService: any; // Will be injected\r\n\r\n  constructor(aiService: any, config?: Partial<AILibrarySuggestionConfig>) {\r\n    this.aiService = aiService;\r\n    this.config = {\r\n      enabled: true,\r\n      timeoutMs: 5000,\r\n      maxSuggestions: 5,\r\n      confidenceThreshold: 0.7,\r\n      ...config\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Suggest libraries using AI analysis\r\n   */\r\n  async suggestLibraries(prompt: string): Promise<LibrarySuggestion[]> {\r\n    if (!this.config.enabled || !this.aiService) {\r\n      return [];\r\n    }\r\n\r\n    try {\r\n      const analysisPrompt = this.buildAnalysisPrompt(prompt);\r\n      \r\n      const response = await Promise.race([\r\n        this.aiService.analyze(analysisPrompt),\r\n        this.createTimeoutPromise(this.config.timeoutMs)\r\n      ]);\r\n\r\n      return this.parseLibrarySuggestions(response);\r\n    } catch (error) {\r\n      console.warn('AI library suggestion failed', { error, prompt: prompt.substring(0, 100) });\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build analysis prompt for AI\r\n   */\r\n  private buildAnalysisPrompt(prompt: string): string {\r\n    return `\r\nAnalyze this development prompt and suggest ${this.config.maxSuggestions} most relevant library/framework names that would provide useful documentation:\r\n\r\nPrompt: \"${prompt}\"\r\n\r\nRequirements:\r\n- Return only library names, one per line\r\n- Focus on frameworks, UI libraries, and development tools\r\n- Be specific (e.g., \"react\" not \"javascript framework\")\r\n- Consider the context and technology stack\r\n- Prioritize popular, well-documented libraries\r\n- Include confidence score (0-1) and reason for each suggestion\r\n\r\nFormat each suggestion as:\r\nname|confidence|reason|category\r\n\r\nExamples:\r\n- For component creation -> [library]|0.9|[reason]|framework\r\n- For web application -> [library]|0.8|[reason]|framework\r\n- For styling needs -> [library]|0.9|[reason]|library\r\n- For API development -> [library]|0.8|[reason]|framework\r\n- For testing requirements -> [library]|0.9|[reason]|tool\r\n\r\nCategories: framework, library, tool, language\r\n    `.trim();\r\n  }\r\n\r\n  /**\r\n   * Parse AI response into structured suggestions\r\n   */\r\n  private parseLibrarySuggestions(response: string): LibrarySuggestion[] {\r\n    const suggestions: LibrarySuggestion[] = [];\r\n    \r\n    const lines = response.split('\\n')\r\n      .map(line => line.trim())\r\n      .filter(line => line.length > 0 && !line.startsWith('#'))\r\n      .slice(0, this.config.maxSuggestions);\r\n\r\n    for (const line of lines) {\r\n      try {\r\n        const parts = line.split('|');\r\n        if (parts.length >= 4) {\r\n          const [name, confidenceStr, reason, category] = parts;\r\n          const confidence = parseFloat(confidenceStr || '0.5') || 0.5;\r\n          \r\n          if (name && this.isValidLibraryName(name) && confidence >= this.config.confidenceThreshold) {\r\n            suggestions.push({\r\n              name: name.toLowerCase().trim(),\r\n              confidence,\r\n              reason: (reason || '').trim(),\r\n              category: this.validateCategory((category || '').trim())\r\n            });\r\n          }\r\n        } else {\r\n          // Fallback parsing for simple format\r\n          const name = line.replace(/^[-*]\\s*/, '').toLowerCase().trim();\r\n          if (this.isValidLibraryName(name)) {\r\n            suggestions.push({\r\n              name,\r\n              confidence: 0.8,\r\n              reason: 'AI suggested',\r\n              category: 'library'\r\n            });\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.warn('Failed to parse suggestion line', { line, error });\r\n      }\r\n    }\r\n\r\n    return suggestions;\r\n  }\r\n\r\n  /**\r\n   * Validate library name\r\n   */\r\n  private isValidLibraryName(name: string): boolean {\r\n    const commonWords = [\r\n      'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by',\r\n      'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'do', 'does', 'did',\r\n      'will', 'would', 'could', 'should', 'may', 'might', 'must', 'can', 'cannot', 'cant'\r\n    ];\r\n    \r\n    return name.length > 2 && \r\n           !commonWords.includes(name) && \r\n           /^[a-z0-9-]+$/.test(name) &&\r\n           !name.includes(' ') &&\r\n           !name.includes('.');\r\n  }\r\n\r\n  /**\r\n   * Validate category\r\n   */\r\n  private validateCategory(category: string): 'framework' | 'library' | 'tool' | 'language' {\r\n    const validCategories = ['framework', 'library', 'tool', 'language'];\r\n    return validCategories.includes(category.toLowerCase()) ? \r\n      category.toLowerCase() as any : 'library';\r\n  }\r\n\r\n  /**\r\n   * Create timeout promise\r\n   */\r\n  private createTimeoutPromise(timeoutMs: number): Promise<never> {\r\n    return new Promise((_, reject) => {\r\n      setTimeout(() => reject(new Error('AI suggestion timeout')), timeoutMs);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get service configuration\r\n   */\r\n  getConfig(): AILibrarySuggestionConfig {\r\n    return { ...this.config };\r\n  }\r\n\r\n  /**\r\n   * Update service configuration\r\n   */\r\n  updateConfig(newConfig: Partial<AILibrarySuggestionConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n  }\r\n\r\n  /**\r\n   * Check if service is enabled\r\n   */\r\n  isEnabled(): boolean {\r\n    return this.config.enabled && !!this.aiService;\r\n  }\r\n}\r",
        "File: src/services/ai/openai.service.ts\nDescription: Function definition: response\nCode:\n      const response = await this.client.chat.completions.create({\r\n        model: this.config.model || 'gpt-4',\r\n        messages: [\r\n          {\r\n            role: 'system',\r\n            content: `You are a task breakdown expert. Break down user requests into structured tasks using the provided documentation context.\r\n\r\nYour job is to:\r\n1. Analyze the user's request\r\n2. Use the provided documentation to understand best practices\r\n3. Break down the request into logical, manageable tasks\r\n4. Identify subtasks for complex tasks\r\n5. Determine task dependencies\r\n6. Assign appropriate priorities and categories\r\n7. Provide realistic time estimates\r\n\r\nReturn ONLY valid JSON with this exact structure:\r\n{\r\n  \"mainTasks\": [\r\n    {\r\n      \"title\": \"Task title\",\r\n      \"description\": \"Detailed description of what needs to be done\",\r\n      \"priority\": \"high|medium|low|critical\",\r\n      \"category\": \"feature|bug|refactor|testing|documentation|deployment|maintenance|setup|configuration|infrastructure|design|planning|research\",\r\n      \"estimatedHours\": 2.5\r\n    }\r\n  ],\r\n  \"subtasks\": [\r\n    {\r\n      \"parentTaskTitle\": \"Task title\",\r\n      \"title\": \"Subtask title\",\r\n      \"description\": \"Subtask description\",\r\n      \"estimatedHours\": 1.0\r\n    }\r\n  ],\r\n  \"dependencies\": [\r\n    {\r\n      \"taskTitle\": \"Task that depends on another\",\r\n      \"dependsOnTaskTitle\": \"Task it depends on\"\r\n    }\r\n  ]\r\n}\r\n\r\nGuidelines:\r\n- Break down complex tasks into 3-7 main tasks\r\n- Each main task should have 2-5 subtasks if needed\r\n- Use realistic time estimates (0.5 to 8 hours per task)\r\n- Assign priorities based on importance and urgency\r\n- Identify clear dependencies between tasks\r\n- Use the documentation context to ensure accuracy\r\n- Focus on actionable, specific tasks`\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: `User Request: ${prompt}\r\n\r\nRelevant Documentation:\r\n${context}\r\n\r\nPlease break this down into structured tasks.`\r\n          }\r\n        ],\r\n        temperature: this.config.temperature || 0.3,\r\n        max_tokens: this.config.maxTokens || 2000\r\n      });\r",
        "File: src/services/ai/openai.service.ts\nDescription: Class definition: OpenAIService\nCode:\nexport class OpenAIService {\r\n  private client: OpenAI;\r\n  private logger: Logger;\r\n  private config: OpenAIConfig;\r\n  private costData: OpenAICostData[] = [];\r\n  private usageStats: OpenAIUsageStats = {\r\n    totalRequests: 0,\r\n    totalTokens: 0,\r\n    totalCost: 0,\r\n    averageCostPerRequest: 0,\r\n    averageTokensPerRequest: 0,\r\n    costByModel: {},\r\n    requestsByModel: {}\r\n  };\r\n\r\n  // OpenAI pricing per 1K tokens (as of 2024)\r\n  private readonly PRICING = {\r\n    'gpt-4': { input: 0.03, output: 0.06 },\r\n    'gpt-4-turbo': { input: 0.01, output: 0.03 },\r\n    'gpt-3.5-turbo': { input: 0.0015, output: 0.002 },\r\n    'gpt-3.5-turbo-16k': { input: 0.003, output: 0.004 }\r\n  };\r\n\r\n  constructor(logger: Logger, config: OpenAIConfig) {\r\n    this.logger = logger;\r\n    this.config = config;\r\n    \r\n    // DEBUG: Print API key and project ID being used\r\n    console.log('ðŸ”‘ OpenAI Service Debug:');\r\n    console.log('  API Key:', config.apiKey ? `${config.apiKey.substring(0, 20)}...` : 'NOT SET');\r\n    console.log('  Project ID:', config.projectId || 'NOT SET');\r\n    console.log('  Full API Key Length:', config.apiKey?.length || 0);\r\n    \r\n    this.client = new OpenAI({ \r\n      apiKey: config.apiKey,\r\n      project: config.projectId\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Break down a user prompt into structured tasks using OpenAI\r\n   */\r\n  async breakdownPrompt(prompt: string, context: string): Promise<TaskBreakdown> {\r\n    try {\r\n      this.logger.debug('Starting OpenAI task breakdown', { \r\n        prompt: prompt.substring(0, 100) + '...',\r\n        contextLength: context.length \r\n      });\r\n\r\n      const response = await this.client.chat.completions.create({\r\n        model: this.config.model || 'gpt-4',\r\n        messages: [\r\n          {\r\n            role: 'system',\r\n            content: `You are a task breakdown expert. Break down user requests into structured tasks using the provided documentation context.\r\n\r\nYour job is to:\r\n1. Analyze the user's request\r\n2. Use the provided documentation to understand best practices\r\n3. Break down the request into logical, manageable tasks\r\n4. Identify subtasks for complex tasks\r\n5. Determine task dependencies\r\n6. Assign appropriate priorities and categories\r\n7. Provide realistic time estimates\r\n\r\nReturn ONLY valid JSON with this exact structure:\r\n{\r\n  \"mainTasks\": [\r\n    {\r\n      \"title\": \"Task title\",\r\n      \"description\": \"Detailed description of what needs to be done\",\r\n      \"priority\": \"high|medium|low|critical\",\r\n      \"category\": \"feature|bug|refactor|testing|documentation|deployment|maintenance|setup|configuration|infrastructure|design|planning|research\",\r\n      \"estimatedHours\": 2.5\r\n    }\r\n  ],\r\n  \"subtasks\": [\r\n    {\r\n      \"parentTaskTitle\": \"Task title\",\r\n      \"title\": \"Subtask title\",\r\n      \"description\": \"Subtask description\",\r\n      \"estimatedHours\": 1.0\r\n    }\r\n  ],\r\n  \"dependencies\": [\r\n    {\r\n      \"taskTitle\": \"Task that depends on another\",\r\n      \"dependsOnTaskTitle\": \"Task it depends on\"\r\n    }\r\n  ]\r\n}\r\n\r\nGuidelines:\r\n- Break down complex tasks into 3-7 main tasks\r\n- Each main task should have 2-5 subtasks if needed\r\n- Use realistic time estimates (0.5 to 8 hours per task)\r\n- Assign priorities based on importance and urgency\r\n- Identify clear dependencies between tasks\r\n- Use the documentation context to ensure accuracy\r\n- Focus on actionable, specific tasks`\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: `User Request: ${prompt}\r\n\r\nRelevant Documentation:\r\n${context}\r\n\r\nPlease break this down into structured tasks.`\r\n          }\r\n        ],\r\n        temperature: this.config.temperature || 0.3,\r\n        max_tokens: this.config.maxTokens || 2000\r\n      });\r\n\r\n      const content = response.choices[0]?.message?.content;\r\n      if (!content) {\r\n        throw new Error('No response content from OpenAI');\r\n      }\r\n\r\n      this.logger.debug('OpenAI response received', { \r\n        responseLength: content.length,\r\n        usage: response.usage \r\n      });\r\n\r\n      // Track cost and usage\r\n      if (response.usage) {\r\n        this.trackUsage(response.usage, this.config.model || 'gpt-4');\r\n      }\r\n\r\n      // Parse and validate the JSON response\r\n      const breakdown = this.parseAndValidateBreakdown(content);\r\n      \r\n      this.logger.info('Task breakdown completed successfully', {\r\n        mainTasks: breakdown.mainTasks.length,\r\n        subtasks: breakdown.subtasks.length,\r\n        dependencies: breakdown.dependencies.length\r\n      });\r\n\r\n      return breakdown;\r\n\r\n    } catch (error) {\r\n      // Enhanced error handling with specific API key error detection\r\n      if (error instanceof Error && error.message.includes('401')) {\r\n        this.logger.error('OpenAI API key invalid or expired', {\r\n          error: 'API key authentication failed',\r\n          suggestion: 'Please update OPENAI_API_KEY environment variable',\r\n          prompt: prompt.substring(0, 100) + '...'\r\n        });\r\n        throw new Error('OpenAI API key is invalid or expired. Please check your OPENAI_API_KEY environment variable.');\r\n      } else if (error instanceof Error && error.message.includes('429')) {\r\n        this.logger.error('OpenAI API rate limit exceeded', {\r\n          error: 'Rate limit exceeded',\r\n          suggestion: 'Please wait before retrying or upgrade your OpenAI plan',\r\n          prompt: prompt.substring(0, 100) + '...'\r\n        });\r\n        throw new Error('OpenAI API rate limit exceeded. Please wait before retrying.');\r\n      } else if (error instanceof Error && error.message.includes('403')) {\r\n        this.logger.error('OpenAI API access forbidden', {\r\n          error: 'API access forbidden',\r\n          suggestion: 'Please check your OpenAI API key permissions',\r\n          prompt: prompt.substring(0, 100) + '...'\r\n        });\r\n        throw new Error('OpenAI API access forbidden. Please check your API key permissions.');\r\n      } else {\r\n        this.logger.error('OpenAI task breakdown failed', {\r\n          error: error instanceof Error ? error.message : 'Unknown error',\r\n          prompt: prompt.substring(0, 100) + '...'\r\n        });\r\n        throw new Error(`Task breakdown failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse and validate the JSON response from OpenAI\r\n   */\r\n  private parseAndValidateBreakdown(content: string): TaskBreakdown {\r\n    try {\r\n      // Clean the content - remove any markdown formatting\r\n      let cleanContent = content.trim();\r\n      if (cleanContent.startsWith('```json')) {\r\n        cleanContent = cleanContent.replace(/^```json\\s*/, '').replace(/\\s*```$/, '');\r\n      } else if (cleanContent.startsWith('```')) {\r\n        cleanContent = cleanContent.replace(/^```\\s*/, '').replace(/\\s*```$/, '');\r\n      }\r\n\r\n      const parsed = JSON.parse(cleanContent);\r\n\r\n      // Validate the structure\r\n      if (!parsed.mainTasks || !Array.isArray(parsed.mainTasks)) {\r\n        throw new Error('Invalid response: mainTasks is required and must be an array');\r\n      }\r\n\r\n      if (!parsed.subtasks || !Array.isArray(parsed.subtasks)) {\r\n        throw new Error('Invalid response: subtasks is required and must be an array');\r\n      }\r\n\r\n      if (!parsed.dependencies || !Array.isArray(parsed.dependencies)) {\r\n        throw new Error('Invalid response: dependencies is required and must be an array');\r\n      }\r\n\r\n      // Validate main tasks\r\n      for (const task of parsed.mainTasks) {\r\n        if (!task.title || !task.description) {\r\n          throw new Error('Invalid main task: title and description are required');\r\n        }\r\n        if (!['low', 'medium', 'high', 'critical'].includes(task.priority)) {\r\n          throw new Error(`Invalid priority: ${task.priority}`);\r\n        }\r\n        if (!['feature', 'bug', 'refactor', 'testing', 'documentation', 'deployment', 'maintenance', 'setup', 'configuration', 'infrastructure', 'design', 'planning', 'research'].includes(task.category)) {\r\n          throw new Error(`Invalid category: ${task.category}`);\r\n        }\r\n        if (typeof task.estimatedHours !== 'number' || task.estimatedHours <= 0) {\r\n          throw new Error(`Invalid estimated hours: ${task.estimatedHours}`);\r\n        }\r\n      }\r\n\r\n      // Validate subtasks\r\n      for (const subtask of parsed.subtasks) {\r\n        if (!subtask.parentTaskTitle || !subtask.title || !subtask.description) {\r\n          throw new Error('Invalid subtask: parentTaskTitle, title, and description are required');\r\n        }\r\n        if (typeof subtask.estimatedHours !== 'number' || subtask.estimatedHours <= 0) {\r\n          throw new Error(`Invalid subtask estimated hours: ${subtask.estimatedHours}`);\r\n        }\r\n      }\r\n\r\n      // Validate dependencies\r\n      for (const dep of parsed.dependencies) {\r\n        if (!dep.taskTitle || !dep.dependsOnTaskTitle) {\r\n          throw new Error('Invalid dependency: taskTitle and dependsOnTaskTitle are required');\r\n        }\r\n      }\r\n\r\n      return parsed as TaskBreakdown;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Failed to parse OpenAI response', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        content: content.substring(0, 200) + '...'\r\n      });\r\n      throw new Error(`Failed to parse task breakdown: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a chat completion with custom messages\r\n   */\r\n  async createChatCompletion(messages: any[], options?: {\r\n    model?: string;\r\n    maxTokens?: number;\r\n    temperature?: number;\r\n  }): Promise<any> {\r\n    try {\r\n      // DEBUG: Print API key and project ID before each API call\r\n      console.log('ðŸ”‘ OpenAI API Call Debug:');\r\n      console.log('  API Key:', this.config.apiKey ? `${this.config.apiKey.substring(0, 20)}...` : 'NOT SET');\r\n      console.log('  Project ID:', this.config.projectId || 'NOT SET');\r\n      console.log('  Model:', options?.model || this.config.model || 'gpt-4');\r\n      console.log('  Full API Key Length:', this.config.apiKey?.length || 0);\r\n      \r\n      const response = await this.client.chat.completions.create({\r\n        model: options?.model || this.config.model || 'gpt-4',\r\n        messages,\r\n        max_tokens: options?.maxTokens || this.config.maxTokens || 2000,\r\n        temperature: options?.temperature || this.config.temperature || 0.3\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      this.logger.error('OpenAI chat completion failed', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        model: options?.model || this.config.model\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test the OpenAI connection\r\n   */\r\n  async testConnection(): Promise<boolean> {\r\n    try {\r\n      const response = await this.client.chat.completions.create({\r\n        model: this.config.model || 'gpt-4',\r\n        messages: [\r\n          { role: 'user', content: 'Hello, this is a test message.' }\r\n        ],\r\n        max_tokens: 10\r\n      });\r\n\r\n      return response.choices[0]?.message?.content !== undefined;\r\n    } catch (error) {\r\n      this.logger.error('OpenAI connection test failed', {\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Track usage and calculate costs for OpenAI API calls\r\n   */\r\n  private trackUsage(usage: any, model: string): void {\r\n    const promptTokens = usage.prompt_tokens || 0;\r\n    const completionTokens = usage.completion_tokens || 0;\r\n    const totalTokens = usage.total_tokens || 0;\r\n    \r\n    const cost = this.calculateCost(promptTokens, completionTokens, model);\r\n    \r\n    const costData: OpenAICostData = {\r\n      promptTokens,\r\n      completionTokens,\r\n      totalTokens,\r\n      cost,\r\n      model,\r\n      timestamp: new Date()\r\n    };\r\n\r\n    this.costData.push(costData);\r\n    this.updateUsageStats(costData);\r\n    \r\n    this.logger.debug('OpenAI usage tracked', {\r\n      model,\r\n      promptTokens,\r\n      completionTokens,\r\n      totalTokens,\r\n      cost: cost.toFixed(4)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate cost based on token usage and model\r\n   */\r\n  private calculateCost(promptTokens: number, completionTokens: number, model: string): number {\r\n    const pricing = this.PRICING[model as keyof typeof this.PRICING] || this.PRICING['gpt-4'];\r\n    \r\n    const inputCost = (promptTokens / 1000) * pricing.input;\r\n    const outputCost = (completionTokens / 1000) * pricing.output;\r\n    \r\n    return inputCost + outputCost;\r\n  }\r\n\r\n  /**\r\n   * Update usage statistics\r\n   */\r\n  private updateUsageStats(costData: OpenAICostData): void {\r\n    this.usageStats.totalRequests++;\r\n    this.usageStats.totalTokens += costData.totalTokens;\r\n    this.usageStats.totalCost += costData.cost;\r\n    \r\n    // Update model-specific stats\r\n    if (!this.usageStats.costByModel[costData.model]) {\r\n      this.usageStats.costByModel[costData.model] = 0;\r\n      this.usageStats.requestsByModel[costData.model] = 0;\r\n    }\r\n    \r\n    this.usageStats.costByModel[costData.model] = (this.usageStats.costByModel[costData.model] || 0) + costData.cost;\r\n    this.usageStats.requestsByModel[costData.model] = (this.usageStats.requestsByModel[costData.model] || 0) + 1;\r\n    \r\n    // Update averages\r\n    this.usageStats.averageCostPerRequest = this.usageStats.totalCost / this.usageStats.totalRequests;\r\n    this.usageStats.averageTokensPerRequest = this.usageStats.totalTokens / this.usageStats.totalRequests;\r\n  }\r\n\r\n  /**\r\n   * Get current usage statistics\r\n   */\r\n  getUsageStats(): OpenAIUsageStats {\r\n    return { ...this.usageStats };\r\n  }\r\n\r\n  /**\r\n   * Get cost data for a specific time range\r\n   */\r\n  getCostData(startDate?: Date, endDate?: Date): OpenAICostData[] {\r\n    if (!startDate && !endDate) {\r\n      return [...this.costData];\r\n    }\r\n    \r\n    return this.costData.filter(data => {\r\n      if (startDate && data.timestamp < startDate) return false;\r\n      if (endDate && data.timestamp > endDate) return false;\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get total cost for a specific time range\r\n   */\r\n  getTotalCost(startDate?: Date, endDate?: Date): number {\r\n    const filteredData = this.getCostData(startDate, endDate);\r\n    return filteredData.reduce((total, data) => total + data.cost, 0);\r\n  }\r\n\r\n  /**\r\n   * Reset usage statistics\r\n   */\r\n  resetUsageStats(): void {\r\n    this.costData = [];\r\n    this.usageStats = {\r\n      totalRequests: 0,\r\n      totalTokens: 0,\r\n      totalCost: 0,\r\n      averageCostPerRequest: 0,\r\n      averageTokensPerRequest: 0,\r\n      costByModel: {},\r\n      requestsByModel: {}\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Enhance a prompt with context using OpenAI\r\n   */\r\n  async enhancePromptWithContext(request: PromptEnhancementRequest): Promise<PromptEnhancementResponse> {\r\n    try {\r\n      this.logger.debug('Starting OpenAI prompt enhancement', {\r\n        originalPrompt: request.originalPrompt.substring(0, 100) + '...',\r\n        strategy: request.options.strategy.type,\r\n        contextSize: JSON.stringify(request.context).length\r\n      });\r\n\r\n      // Get the appropriate enhancement prompt\r\n      const enhancementPrompt = PromptEnhancementPrompts.getContextualEnhancementPrompt(\r\n        request.originalPrompt,\r\n        request.context,\r\n        request.options.strategy\r\n      );\r\n\r\n      const response = await this.client.chat.completions.create({\r\n        model: this.config.model || 'gpt-4',\r\n        messages: [\r\n          {\r\n            role: 'system',\r\n            content: enhancementPrompt\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: `Please enhance this prompt with the provided context:\r\n\r\nOriginal Prompt: ${request.originalPrompt}\r\n\r\nContext: ${JSON.stringify(request.context, null, 2)}\r\n\r\nEnhancement Options: ${JSON.stringify(request.options, null, 2)}\r\n\r\nGoals: ${JSON.stringify(request.goals, null, 2)}`\r\n          }\r\n        ],\r\n        temperature: request.options.temperature || this.config.temperature || 0.3,\r\n        max_tokens: request.options.maxTokens || this.config.maxTokens || 2000\r\n      });\r\n\r\n      const content = response.choices[0]?.message?.content;\r\n      if (!content) {\r\n        throw new Error('No response content from OpenAI');\r\n      }\r\n\r\n      this.logger.debug('OpenAI enhancement response received', {\r\n        responseLength: content.length,\r\n        usage: response.usage\r\n      });\r\n\r\n      // Track cost and usage\r\n      if (response.usage) {\r\n        this.trackUsage(response.usage, this.config.model || 'gpt-4');\r\n      }\r\n\r\n      // Parse and validate the enhancement response\r\n      const enhancement = this.parseAndValidateEnhancement(content, request);\r\n      \r\n      this.logger.info('Prompt enhancement completed successfully', {\r\n        originalLength: request.originalPrompt.length,\r\n        enhancedLength: enhancement.enhancedPrompt.length,\r\n        qualityScore: enhancement.quality.overall,\r\n        confidenceScore: enhancement.confidence.overall\r\n      });\r\n\r\n      return enhancement;\r\n\r\n    } catch (error) {\r\n      this.logger.error('OpenAI prompt enhancement failed', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        originalPrompt: request.originalPrompt.substring(0, 100) + '...'\r\n      });\r\n      throw new Error(`Prompt enhancement failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse and validate the enhancement response from OpenAI\r\n   */\r\n  private parseAndValidateEnhancement(content: string, request: PromptEnhancementRequest): PromptEnhancementResponse {\r\n    try {\r\n      // Clean the content - remove any markdown formatting\r\n      let cleanContent = content.trim();\r\n      if (cleanContent.startsWith('```json')) {\r\n        cleanContent = cleanContent.replace(/^```json\\s*/, '').replace(/\\s*```$/, '');\r\n      } else if (cleanContent.startsWith('```')) {\r\n        cleanContent = cleanContent.replace(/^```\\s*/, '').replace(/\\s*```$/, '');\r\n      }\r\n\r\n      const parsed = JSON.parse(cleanContent);\r\n\r\n      // Validate the structure\r\n      if (!parsed.enhancedPrompt || typeof parsed.enhancedPrompt !== 'string') {\r\n        throw new Error('Invalid response: enhancedPrompt is required and must be a string');\r\n      }\r\n\r\n      if (!parsed.improvements || !Array.isArray(parsed.improvements)) {\r\n        throw new Error('Invalid response: improvements is required and must be an array');\r\n      }\r\n\r\n      if (!parsed.recommendations || !Array.isArray(parsed.recommendations)) {\r\n        throw new Error('Invalid response: recommendations is required and must be an array');\r\n      }\r\n\r\n      // Validate improvements\r\n      for (const improvement of parsed.improvements) {\r\n        if (!improvement.type || !improvement.description) {\r\n          throw new Error('Invalid improvement: type and description are required');\r\n        }\r\n        if (!['clarity', 'specificity', 'actionability', 'completeness', 'relevance', 'best-practice', 'performance', 'security'].includes(improvement.type)) {\r\n          throw new Error(`Invalid improvement type: ${improvement.type}`);\r\n        }\r\n        if (!['low', 'medium', 'high'].includes(improvement.impact)) {\r\n          throw new Error(`Invalid improvement impact: ${improvement.impact}`);\r\n        }\r\n      }\r\n\r\n      // Create the enhancement response\r\n      const enhancement: PromptEnhancementResponse = {\r\n        enhancedPrompt: parsed.enhancedPrompt,\r\n        metadata: {\r\n          originalLength: request.originalPrompt.length,\r\n          enhancedLength: parsed.enhancedPrompt.length,\r\n          tokenUsage: {\r\n            promptTokens: 0, // Will be filled by trackUsage\r\n            completionTokens: 0,\r\n            totalTokens: 0,\r\n            cost: 0,\r\n            model: this.config.model || 'gpt-4'\r\n          },\r\n          processingTime: 0, // Will be filled by the caller\r\n          strategy: request.options.strategy,\r\n          framework: request.context.frameworkContext?.framework || 'Unknown',\r\n          projectType: request.context.projectContext?.projectType || 'Unknown',\r\n          timestamp: new Date()\r\n        },\r\n        quality: {\r\n          clarity: parsed.qualityScore || 0.8,\r\n          specificity: parsed.qualityScore || 0.8,\r\n          actionability: parsed.qualityScore || 0.8,\r\n          completeness: parsed.qualityScore || 0.8,\r\n          relevance: parsed.qualityScore || 0.8,\r\n          overall: parsed.qualityScore || 0.8\r\n        },\r\n        confidence: {\r\n          overall: parsed.confidenceScore || 0.8,\r\n          contextRelevance: parsed.confidenceScore || 0.8,\r\n          frameworkAccuracy: parsed.confidenceScore || 0.8,\r\n          qualityAlignment: parsed.confidenceScore || 0.8,\r\n          projectFit: parsed.confidenceScore || 0.8\r\n        },\r\n        improvements: parsed.improvements.map((imp: any) => ({\r\n          type: imp.type,\r\n          description: imp.description,\r\n          impact: imp.impact,\r\n          before: imp.before || '',\r\n          after: imp.after || ''\r\n        })),\r\n        recommendations: parsed.recommendations\r\n      };\r\n\r\n      return enhancement;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Failed to parse OpenAI enhancement response', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        content: content.substring(0, 200) + '...'\r\n      });\r\n      throw new Error(`Failed to parse enhancement response: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n}\r",
        "File: src/services/quality/quality-requirements-detector.service.ts\nDescription: Function definition: detector\nCode:\n * const detector = new QualityRequirementsDetector(logger);\r\n * const result = await detector.detectRequirements(\r\n *   \"Create a React component with accessibility features\",\r\n *   \"react\"\r\n * );\r\n * console.log(result.requirements); // Array of detected requirements\r\n * ```\r\n */\r\nexport class QualityRequirementsDetector {\r\n  private logger: Logger;\r\n  \r\n  /**\r\n   * Keywords that indicate accessibility requirements\r\n   */\r\n  private readonly accessibilityKeywords = [\r\n    'accessibility', 'a11y', 'screen reader', 'keyboard', 'focus',\r\n    'aria', 'semantic', 'wcag', 'contrast', 'alt text', 'tabindex',\r\n    'skip link', 'navigation', 'heading', 'landmark'\r\n  ];\r\n  \r\n  /**\r\n   * Keywords that indicate security requirements\r\n   */\r\n  private readonly securityKeywords = [\r\n    'security', 'secure', 'authentication', 'authorization', 'csrf',\r\n    'xss', 'injection', 'sanitize', 'validate', 'csp', 'cors',\r\n    'https', 'encryption', 'hash', 'salt', 'token', 'jwt'\r\n  ];\r\n  \r\n  /**\r\n   * Keywords that indicate performance requirements\r\n   */\r\n  private readonly performanceKeywords = [\r\n    'performance', 'optimize', 'fast', 'speed', 'lazy', 'cache',\r\n    'bundle', 'minify', 'compress', 'cdn', 'critical', 'vitals',\r\n    'lighthouse', 'metrics', 'monitoring', 'profiling'\r\n  ];\r\n  \r\n  /**\r\n   * Framework-specific keyword patterns\r\n   */\r\n  private readonly frameworkPatterns = {\r\n    html: ['html', 'web', 'page', 'website', 'frontend', 'dom'],\r\n    react: ['react', 'jsx', 'component', 'hook', 'state', 'props'],\r\n    vue: ['vue', 'component', 'template', 'directive'],\r\n    angular: ['angular', 'component', 'service', 'directive'],\r\n    node: ['node', 'server', 'api', 'express', 'backend'],\r\n    python: ['python', 'django', 'flask', 'fastapi'],\r\n    java: ['java', 'spring', 'maven', 'gradle']\r\n  };\r\n\r\n  constructor(logger: Logger) {\r\n    this.logger = logger;\r\n  }\r\n\r\n  /**\r\n   * Detects quality requirements from a prompt and optional framework\r\n   * \r\n   * @param prompt - The input prompt to analyze\r\n   * @param framework - Optional framework to consider for specific requirements\r\n   * @param options - Optional configuration for detection\r\n   * @returns Promise<QualityDetectionResult> - Detected requirements and metadata\r\n   * \r\n   * @example\r\n   * ```typescript\r\n   * const result = await detector.detectRequirements(\r\n   *   \"Create a secure login form with accessibility features\",\r\n   *   \"react\",\r\n   *   { includeFrameworkSpecific: true, maxRequirements: 5 }\r\n   * );\r\n   * ```\r\n   */\r\n  async detectRequirements(\r\n    prompt: string,\r\n    framework?: string,\r\n    options: QualityDetectionOptions = {}\r\n  ): Promise<QualityDetectionResult> {\r\n    try {\r\n      this.logger.debug('Starting quality requirements detection', {\r\n        prompt: prompt.substring(0, 100) + '...',\r\n        framework,\r\n        options\r\n      });\r\n\r\n      const requirements: QualityRequirement[] = [];\r\n      const detectedTechnologies: string[] = [];\r\n      let confidence = 0;\r\n\r\n      // Detect technologies from prompt\r\n      const technologies = this.detectTechnologies(prompt);\r\n      detectedTechnologies.push(...technologies);\r\n\r\n      // Detect accessibility requirements\r\n      if (this.containsAccessibilityKeywords(prompt)) {\r\n        const accessibilityReqs = this.getAccessibilityRules('critical');\r\n        requirements.push(...accessibilityReqs);\r\n        confidence += 0.3;\r\n      }\r\n\r\n      // Detect security requirements\r\n      if (this.containsSecurityKeywords(prompt)) {\r\n        const securityReqs = this.getSecurityRules('critical');\r\n        requirements.push(...securityReqs);\r\n        confidence += 0.3;\r\n      }\r\n\r\n      // Detect performance requirements\r\n      if (this.containsPerformanceKeywords(prompt)) {\r\n        const performanceReqs = this.getPerformanceRules('high');\r\n        requirements.push(...performanceReqs);\r\n        confidence += 0.2;\r\n      }\r\n\r\n      // Add framework-specific requirements\r\n      if (framework && options.includeFrameworkSpecific !== false) {\r\n        const frameworkReqs = this.getFrameworkSpecificRequirements(framework);\r\n        requirements.push(...frameworkReqs);\r\n        confidence += 0.2;\r\n      }\r\n\r\n      // Auto-detect requirements for HTML/web prompts\r\n      if (this.isHtmlWebPrompt(prompt) && !framework) {\r\n        const htmlReqs = this.getFrameworkSpecificRequirements('html');\r\n        requirements.push(...htmlReqs);\r\n        confidence += 0.3;\r\n      }\r\n\r\n      // Apply maximum requirements limit\r\n      const maxReqs = options.maxRequirements || 10;\r\n      const finalRequirements = requirements.slice(0, maxReqs);\r\n\r\n      // Calculate final confidence\r\n      const finalConfidence = Math.min(confidence, 1.0);\r\n\r\n      // Filter by confidence threshold\r\n      const minConfidence = options.minConfidence || 0.5;\r\n      const filteredRequirements = finalConfidence >= minConfidence \r\n        ? finalRequirements \r\n        : [];\r\n\r\n      const result: QualityDetectionResult = {\r\n        requirements: filteredRequirements,\r\n        detectedTechnologies: [...new Set(detectedTechnologies)],\r\n        confidence: finalConfidence\r\n      };\r\n\r\n      this.logger.info('Quality requirements detection completed', {\r\n        requirementsCount: result.requirements.length,\r\n        technologies: result.detectedTechnologies,\r\n        confidence: result.confidence\r\n      });\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Quality requirements detection failed', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        prompt: prompt.substring(0, 100) + '...'\r\n      });\r\n      \r\n      // Return fallback result\r\n      return {\r\n        requirements: [],\r\n        detectedTechnologies: [],\r\n        confidence: 0\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if prompt contains accessibility-related keywords\r\n   * \r\n   * @param prompt - The prompt to analyze\r\n   * @returns boolean - True if accessibility keywords found\r\n   * \r\n   * @example\r\n   * ```typescript\r\n   * const hasAccessibility = detector.containsAccessibilityKeywords(\r\n   *   \"Create a form with keyboard navigation\"\r\n   * ); // true\r\n   * ```\r\n   */\r\n  private containsAccessibilityKeywords(prompt: string): boolean {\r\n    const lowerPrompt = prompt.toLowerCase();\r\n    return this.accessibilityKeywords.some(keyword => \r\n      lowerPrompt.includes(keyword.toLowerCase())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks if prompt contains security-related keywords\r\n   * \r\n   * @param prompt - The prompt to analyze\r\n   * @returns boolean - True if security keywords found\r\n   */\r\n  private containsSecurityKeywords(prompt: string): boolean {\r\n    const lowerPrompt = prompt.toLowerCase();\r\n    return this.securityKeywords.some(keyword => \r\n      lowerPrompt.includes(keyword.toLowerCase())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks if prompt contains performance-related keywords\r\n   * \r\n   * @param prompt - The prompt to analyze\r\n   * @returns boolean - True if performance keywords found\r\n   */\r\n  private containsPerformanceKeywords(prompt: string): boolean {\r\n    const lowerPrompt = prompt.toLowerCase();\r\n    return this.performanceKeywords.some(keyword => \r\n      lowerPrompt.includes(keyword.toLowerCase())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Detects technologies mentioned in the prompt\r\n   * \r\n   * @param prompt - The prompt to analyze\r\n   * @returns string[] - Array of detected technologies\r\n   */\r\n  private detectTechnologies(prompt: string): string[] {\r\n    const lowerPrompt = prompt.toLowerCase();\r\n    const detected: string[] = [];\r\n\r\n    for (const [framework, patterns] of Object.entries(this.frameworkPatterns)) {\r\n      if (patterns.some(pattern => lowerPrompt.includes(pattern))) {\r\n        detected.push(framework);\r\n      }\r\n    }\r\n\r\n    return detected;\r\n  }\r\n\r\n  /**\r\n   * Checks if prompt is related to HTML/web development\r\n   * \r\n   * @param prompt - The prompt to analyze\r\n   * @returns boolean - True if HTML/web related\r\n   */\r\n  private isHtmlWebPrompt(prompt: string): boolean {\r\n    const htmlKeywords = ['html', 'web', 'page', 'website', 'frontend', 'css', 'javascript'];\r\n    const lowerPrompt = prompt.toLowerCase();\r\n    \r\n    return htmlKeywords.some(keyword => lowerPrompt.includes(keyword)) ||\r\n           lowerPrompt.includes('create') && (\r\n             lowerPrompt.includes('page') || \r\n             lowerPrompt.includes('component') ||\r\n             lowerPrompt.includes('ui')\r\n           );\r\n  }\r\n\r\n  /**\r\n   * Generates accessibility rules based on priority\r\n   * \r\n   * @param priority - Priority level for the rules\r\n   * @returns QualityRequirement[] - Array of accessibility requirements\r\n   */\r\n  private getAccessibilityRules(priority: QualityPriority): QualityRequirement[] {\r\n    const rules: string[] = [];\r\n\r\n    if (priority === 'critical' || priority === 'high') {\r\n      rules.push(\r\n        'Use semantic HTML elements (<main>, <button>, <section>) not generic <div>',\r\n        'Add visible focus states with :focus-visible for all interactive elements',\r\n        'Include role=\"status\" aria-live=\"polite\" for dynamic content updates'\r\n      );\r\n    }\r\n\r\n    if (priority === 'critical') {\r\n      rules.push(\r\n        'Wrap animations in @media (prefers-reduced-motion: reduce) guards',\r\n        'Ensure WCAG AA contrast ratios (4.5:1 minimum)',\r\n        'Provide keyboard navigation support (Space/Enter keys)'\r\n      );\r\n    }\r\n\r\n    return [{\r\n      category: 'accessibility',\r\n      priority,\r\n      rules,\r\n      tokenBudget: DEFAULT_TOKEN_BUDGET.accessibility\r\n    }];\r\n  }\r\n\r\n  /**\r\n   * Generates security rules based on priority\r\n   * \r\n   * @param priority - Priority level for the rules\r\n   * @returns QualityRequirement[] - Array of security requirements\r\n   */\r\n  private getSecurityRules(priority: QualityPriority): QualityRequirement[] {\r\n    const rules: string[] = [];\r\n\r\n    if (priority === 'critical') {\r\n      rules.push(\r\n        'Move inline <style> and <script> to external files',\r\n        'Generate Content Security Policy headers',\r\n        'Sanitize any dynamic content to prevent XSS'\r\n      );\r\n    }\r\n\r\n    if (priority === 'critical' || priority === 'high') {\r\n      rules.push(\r\n        'Validate all user inputs',\r\n        'Implement proper authentication and authorization',\r\n        'Use HTTPS for all communications'\r\n      );\r\n    }\r\n\r\n    return [{\r\n      category: 'security',\r\n      priority,\r\n      rules,\r\n      tokenBudget: DEFAULT_TOKEN_BUDGET.security\r\n    }];\r\n  }\r\n\r\n  /**\r\n   * Generates performance rules based on priority\r\n   * \r\n   * @param priority - Priority level for the rules\r\n   * @returns QualityRequirement[] - Array of performance requirements\r\n   */\r\n  private getPerformanceRules(priority: QualityPriority): QualityRequirement[] {\r\n    const rules: string[] = [];\r\n\r\n    if (priority === 'high' || priority === 'critical') {\r\n      rules.push(\r\n        'Optimize for Core Web Vitals metrics',\r\n        'Implement lazy loading for images and components',\r\n        'Use efficient caching strategies'\r\n      );\r\n    }\r\n\r\n    if (priority === 'high') {\r\n      rules.push(\r\n        'Minimize bundle size with code splitting',\r\n        'Optimize animations for 60fps performance',\r\n        'Implement proper error boundaries'\r\n      );\r\n    }\r\n\r\n    return [{\r\n      category: 'performance',\r\n      priority,\r\n      rules,\r\n      tokenBudget: DEFAULT_TOKEN_BUDGET.performance\r\n    }];\r\n  }\r\n\r\n  /**\r\n   * Gets framework-specific quality requirements\r\n   * \r\n   * @param framework - The framework to get requirements for\r\n   * @returns QualityRequirement[] - Array of framework-specific requirements\r\n   */\r\n  private getFrameworkSpecificRequirements(framework: string): QualityRequirement[] {\r\n    const frameworkKey = framework.toLowerCase();\r\n    \r\n    if (frameworkKey in EXAMPLE_QUALITY_REQUIREMENTS) {\r\n      return EXAMPLE_QUALITY_REQUIREMENTS[frameworkKey as keyof typeof EXAMPLE_QUALITY_REQUIREMENTS] || [];\r\n    }\r\n\r\n    // Fallback for unknown frameworks\r\n    if (this.frameworkPatterns.html.includes(frameworkKey)) {\r\n      return this.getHtmlSpecificRequirements();\r\n    }\r\n\r\n    if (this.frameworkPatterns.react.includes(frameworkKey)) {\r\n      return this.getReactSpecificRequirements();\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Gets HTML-specific quality requirements\r\n   * \r\n   * @returns QualityRequirement[] - HTML-specific requirements\r\n   */\r\n  private getHtmlSpecificRequirements(): QualityRequirement[] {\r\n    return [\r\n      {\r\n        category: 'accessibility',\r\n        priority: 'critical',\r\n        rules: [\r\n          'Use semantic HTML elements (<main>, <button>, <section>) not generic <div>',\r\n          'Add visible focus states with :focus-visible for all interactive elements',\r\n          'Include role=\"status\" aria-live=\"polite\" for dynamic content updates',\r\n          'Wrap animations in @media (prefers-reduced-motion: reduce) guards'\r\n        ],\r\n        tokenBudget: DEFAULT_TOKEN_BUDGET.accessibility\r\n      },\r\n      {\r\n        category: 'security',\r\n        priority: 'critical',\r\n        rules: [\r\n          'Move inline <style> and <script> to external files',\r\n          'Generate Content Security Policy headers',\r\n          'Sanitize any dynamic content to prevent XSS'\r\n        ],\r\n        tokenBudget: DEFAULT_TOKEN_BUDGET.security\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Gets React-specific quality requirements\r\n   * \r\n   * @returns QualityRequirement[] - React-specific requirements\r\n   */\r\n  private getReactSpecificRequirements(): QualityRequirement[] {\r\n    return [\r\n      {\r\n        category: 'accessibility',\r\n        priority: 'critical',\r\n        rules: [\r\n          'Use semantic HTML elements and proper ARIA roles',\r\n          'Implement keyboard navigation support',\r\n          'Add focus management for dynamic content',\r\n          'Include screen reader announcements'\r\n        ],\r\n        tokenBudget: DEFAULT_TOKEN_BUDGET.accessibility\r\n      },\r\n      {\r\n        category: 'security',\r\n        priority: 'critical',\r\n        rules: [\r\n          'Sanitize all props and user inputs',\r\n          'Implement proper error boundaries',\r\n          'Validate TypeScript interfaces strictly',\r\n          'Use secure state management patterns'\r\n        ],\r\n        tokenBudget: DEFAULT_TOKEN_BUDGET.security\r\n      },\r\n      {\r\n        category: 'performance',\r\n        priority: 'high',\r\n        rules: [\r\n          'Implement React.memo for expensive components',\r\n          'Use useCallback/useMemo appropriately',\r\n          'Implement code splitting with React.lazy',\r\n          'Optimize re-renders with proper dependencies'\r\n        ],\r\n        tokenBudget: DEFAULT_TOKEN_BUDGET.performance\r\n      }\r\n    ];\r\n  }\r\n}\r",
        "File: src/services/quality/quality-requirements-detector.service.ts\nDescription: Function definition: result\nCode:\n * const result = await detector.detectRequirements(\r\n *   \"Create a React component with accessibility features\",\r\n *   \"react\"\r\n * );\r\n * console.log(result.requirements); // Array of detected requirements\r\n * ```\r\n */\r\nexport class QualityRequirementsDetector {\r\n  private logger: Logger;\r\n  \r\n  /**\r\n   * Keywords that indicate accessibility requirements\r\n   */\r\n  private readonly accessibilityKeywords = [\r\n    'accessibility', 'a11y', 'screen reader', 'keyboard', 'focus',\r\n    'aria', 'semantic', 'wcag', 'contrast', 'alt text', 'tabindex',\r\n    'skip link', 'navigation', 'heading', 'landmark'\r\n  ];\r\n  \r\n  /**\r\n   * Keywords that indicate security requirements\r\n   */\r\n  private readonly securityKeywords = [\r\n    'security', 'secure', 'authentication', 'authorization', 'csrf',\r\n    'xss', 'injection', 'sanitize', 'validate', 'csp', 'cors',\r\n    'https', 'encryption', 'hash', 'salt', 'token', 'jwt'\r\n  ];\r\n  \r\n  /**\r\n   * Keywords that indicate performance requirements\r\n   */\r\n  private readonly performanceKeywords = [\r\n    'performance', 'optimize', 'fast', 'speed', 'lazy', 'cache',\r\n    'bundle', 'minify', 'compress', 'cdn', 'critical', 'vitals',\r\n    'lighthouse', 'metrics', 'monitoring', 'profiling'\r\n  ];\r\n  \r\n  /**\r\n   * Framework-specific keyword patterns\r\n   */\r\n  private readonly frameworkPatterns = {\r\n    html: ['html', 'web', 'page', 'website', 'frontend', 'dom'],\r\n    react: ['react', 'jsx', 'component', 'hook', 'state', 'props'],\r\n    vue: ['vue', 'component', 'template', 'directive'],\r\n    angular: ['angular', 'component', 'service', 'directive'],\r\n    node: ['node', 'server', 'api', 'express', 'backend'],\r\n    python: ['python', 'django', 'flask', 'fastapi'],\r\n    java: ['java', 'spring', 'maven', 'gradle']\r\n  };\r\n\r\n  constructor(logger: Logger) {\r\n    this.logger = logger;\r\n  }\r\n\r\n  /**\r\n   * Detects quality requirements from a prompt and optional framework\r\n   * \r\n   * @param prompt - The input prompt to analyze\r\n   * @param framework - Optional framework to consider for specific requirements\r\n   * @param options - Optional configuration for detection\r\n   * @returns Promise<QualityDetectionResult> - Detected requirements and metadata\r\n   * \r\n   * @example\r\n   * ```typescript\r\n   * const result = await detector.detectRequirements(\r\n   *   \"Create a secure login form with accessibility features\",\r\n   *   \"react\",\r\n   *   { includeFrameworkSpecific: true, maxRequirements: 5 }\r\n   * );\r\n   * ```\r\n   */\r\n  async detectRequirements(\r\n    prompt: string,\r\n    framework?: string,\r\n    options: QualityDetectionOptions = {}\r\n  ): Promise<QualityDetectionResult> {\r\n    try {\r\n      this.logger.debug('Starting quality requirements detection', {\r\n        prompt: prompt.substring(0, 100) + '...',\r\n        framework,\r\n        options\r\n      });\r\n\r\n      const requirements: QualityRequirement[] = [];\r\n      const detectedTechnologies: string[] = [];\r\n      let confidence = 0;\r\n\r\n      // Detect technologies from prompt\r\n      const technologies = this.detectTechnologies(prompt);\r\n      detectedTechnologies.push(...technologies);\r\n\r\n      // Detect accessibility requirements\r\n      if (this.containsAccessibilityKeywords(prompt)) {\r\n        const accessibilityReqs = this.getAccessibilityRules('critical');\r\n        requirements.push(...accessibilityReqs);\r\n        confidence += 0.3;\r\n      }\r\n\r\n      // Detect security requirements\r\n      if (this.containsSecurityKeywords(prompt)) {\r\n        const securityReqs = this.getSecurityRules('critical');\r\n        requirements.push(...securityReqs);\r\n        confidence += 0.3;\r\n      }\r\n\r\n      // Detect performance requirements\r\n      if (this.containsPerformanceKeywords(prompt)) {\r\n        const performanceReqs = this.getPerformanceRules('high');\r\n        requirements.push(...performanceReqs);\r\n        confidence += 0.2;\r\n      }\r\n\r\n      // Add framework-specific requirements\r\n      if (framework && options.includeFrameworkSpecific !== false) {\r\n        const frameworkReqs = this.getFrameworkSpecificRequirements(framework);\r\n        requirements.push(...frameworkReqs);\r\n        confidence += 0.2;\r\n      }\r\n\r\n      // Auto-detect requirements for HTML/web prompts\r\n      if (this.isHtmlWebPrompt(prompt) && !framework) {\r\n        const htmlReqs = this.getFrameworkSpecificRequirements('html');\r\n        requirements.push(...htmlReqs);\r\n        confidence += 0.3;\r\n      }\r\n\r\n      // Apply maximum requirements limit\r\n      const maxReqs = options.maxRequirements || 10;\r\n      const finalRequirements = requirements.slice(0, maxReqs);\r\n\r\n      // Calculate final confidence\r\n      const finalConfidence = Math.min(confidence, 1.0);\r\n\r\n      // Filter by confidence threshold\r\n      const minConfidence = options.minConfidence || 0.5;\r\n      const filteredRequirements = finalConfidence >= minConfidence \r\n        ? finalRequirements \r\n        : [];\r\n\r\n      const result: QualityDetectionResult = {\r\n        requirements: filteredRequirements,\r\n        detectedTechnologies: [...new Set(detectedTechnologies)],\r\n        confidence: finalConfidence\r\n      };\r\n\r\n      this.logger.info('Quality requirements detection completed', {\r\n        requirementsCount: result.requirements.length,\r\n        technologies: result.detectedTechnologies,\r\n        confidence: result.confidence\r\n      });\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Quality requirements detection failed', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        prompt: prompt.substring(0, 100) + '...'\r\n      });\r\n      \r\n      // Return fallback result\r\n      return {\r\n        requirements: [],\r\n        detectedTechnologies: [],\r\n        confidence: 0\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if prompt contains accessibility-related keywords\r\n   * \r\n   * @param prompt - The prompt to analyze\r\n   * @returns boolean - True if accessibility keywords found\r\n   * \r\n   * @example\r\n   * ```typescript\r\n   * const hasAccessibility = detector.containsAccessibilityKeywords(\r\n   *   \"Create a form with keyboard navigation\"\r\n   * ); // true\r\n   * ```\r\n   */\r\n  private containsAccessibilityKeywords(prompt: string): boolean {\r\n    const lowerPrompt = prompt.toLowerCase();\r\n    return this.accessibilityKeywords.some(keyword => \r\n      lowerPrompt.includes(keyword.toLowerCase())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks if prompt contains security-related keywords\r\n   * \r\n   * @param prompt - The prompt to analyze\r\n   * @returns boolean - True if security keywords found\r\n   */\r\n  private containsSecurityKeywords(prompt: string): boolean {\r\n    const lowerPrompt = prompt.toLowerCase();\r\n    return this.securityKeywords.some(keyword => \r\n      lowerPrompt.includes(keyword.toLowerCase())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks if prompt contains performance-related keywords\r\n   * \r\n   * @param prompt - The prompt to analyze\r\n   * @returns boolean - True if performance keywords found\r\n   */\r\n  private containsPerformanceKeywords(prompt: string): boolean {\r\n    const lowerPrompt = prompt.toLowerCase();\r\n    return this.performanceKeywords.some(keyword => \r\n      lowerPrompt.includes(keyword.toLowerCase())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Detects technologies mentioned in the prompt\r\n   * \r\n   * @param prompt - The prompt to analyze\r\n   * @returns string[] - Array of detected technologies\r\n   */\r\n  private detectTechnologies(prompt: string): string[] {\r\n    const lowerPrompt = prompt.toLowerCase();\r\n    const detected: string[] = [];\r\n\r\n    for (const [framework, patterns] of Object.entries(this.frameworkPatterns)) {\r\n      if (patterns.some(pattern => lowerPrompt.includes(pattern))) {\r\n        detected.push(framework);\r\n      }\r\n    }\r\n\r\n    return detected;\r\n  }\r\n\r\n  /**\r\n   * Checks if prompt is related to HTML/web development\r\n   * \r\n   * @param prompt - The prompt to analyze\r\n   * @returns boolean - True if HTML/web related\r\n   */\r\n  private isHtmlWebPrompt(prompt: string): boolean {\r\n    const htmlKeywords = ['html', 'web', 'page', 'website', 'frontend', 'css', 'javascript'];\r\n    const lowerPrompt = prompt.toLowerCase();\r\n    \r\n    return htmlKeywords.some(keyword => lowerPrompt.includes(keyword)) ||\r\n           lowerPrompt.includes('create') && (\r\n             lowerPrompt.includes('page') || \r\n             lowerPrompt.includes('component') ||\r\n             lowerPrompt.includes('ui')\r\n           );\r\n  }\r\n\r\n  /**\r\n   * Generates accessibility rules based on priority\r\n   * \r\n   * @param priority - Priority level for the rules\r\n   * @returns QualityRequirement[] - Array of accessibility requirements\r\n   */\r\n  private getAccessibilityRules(priority: QualityPriority): QualityRequirement[] {\r\n    const rules: string[] = [];\r\n\r\n    if (priority === 'critical' || priority === 'high') {\r\n      rules.push(\r\n        'Use semantic HTML elements (<main>, <button>, <section>) not generic <div>',\r\n        'Add visible focus states with :focus-visible for all interactive elements',\r\n        'Include role=\"status\" aria-live=\"polite\" for dynamic content updates'\r\n      );\r\n    }\r\n\r\n    if (priority === 'critical') {\r\n      rules.push(\r\n        'Wrap animations in @media (prefers-reduced-motion: reduce) guards',\r\n        'Ensure WCAG AA contrast ratios (4.5:1 minimum)',\r\n        'Provide keyboard navigation support (Space/Enter keys)'\r\n      );\r\n    }\r\n\r\n    return [{\r\n      category: 'accessibility',\r\n      priority,\r\n      rules,\r\n      tokenBudget: DEFAULT_TOKEN_BUDGET.accessibility\r\n    }];\r\n  }\r\n\r\n  /**\r\n   * Generates security rules based on priority\r\n   * \r\n   * @param priority - Priority level for the rules\r\n   * @returns QualityRequirement[] - Array of security requirements\r\n   */\r\n  private getSecurityRules(priority: QualityPriority): QualityRequirement[] {\r\n    const rules: string[] = [];\r\n\r\n    if (priority === 'critical') {\r\n      rules.push(\r\n        'Move inline <style> and <script> to external files',\r\n        'Generate Content Security Policy headers',\r\n        'Sanitize any dynamic content to prevent XSS'\r\n      );\r\n    }\r\n\r\n    if (priority === 'critical' || priority === 'high') {\r\n      rules.push(\r\n        'Validate all user inputs',\r\n        'Implement proper authentication and authorization',\r\n        'Use HTTPS for all communications'\r\n      );\r\n    }\r\n\r\n    return [{\r\n      category: 'security',\r\n      priority,\r\n      rules,\r\n      tokenBudget: DEFAULT_TOKEN_BUDGET.security\r\n    }];\r\n  }\r\n\r\n  /**\r\n   * Generates performance rules based on priority\r\n   * \r\n   * @param priority - Priority level for the rules\r\n   * @returns QualityRequirement[] - Array of performance requirements\r\n   */\r\n  private getPerformanceRules(priority: QualityPriority): QualityRequirement[] {\r\n    const rules: string[] = [];\r\n\r\n    if (priority === 'high' || priority === 'critical') {\r\n      rules.push(\r\n        'Optimize for Core Web Vitals metrics',\r\n        'Implement lazy loading for images and components',\r\n        'Use efficient caching strategies'\r\n      );\r\n    }\r\n\r\n    if (priority === 'high') {\r\n      rules.push(\r\n        'Minimize bundle size with code splitting',\r\n        'Optimize animations for 60fps performance',\r\n        'Implement proper error boundaries'\r\n      );\r\n    }\r\n\r\n    return [{\r\n      category: 'performance',\r\n      priority,\r\n      rules,\r\n      tokenBudget: DEFAULT_TOKEN_BUDGET.performance\r\n    }];\r\n  }\r\n\r\n  /**\r\n   * Gets framework-specific quality requirements\r\n   * \r\n   * @param framework - The framework to get requirements for\r\n   * @returns QualityRequirement[] - Array of framework-specific requirements\r\n   */\r\n  private getFrameworkSpecificRequirements(framework: string): QualityRequirement[] {\r\n    const frameworkKey = framework.toLowerCase();\r\n    \r\n    if (frameworkKey in EXAMPLE_QUALITY_REQUIREMENTS) {\r\n      return EXAMPLE_QUALITY_REQUIREMENTS[frameworkKey as keyof typeof EXAMPLE_QUALITY_REQUIREMENTS] || [];\r\n    }\r\n\r\n    // Fallback for unknown frameworks\r\n    if (this.frameworkPatterns.html.includes(frameworkKey)) {\r\n      return this.getHtmlSpecificRequirements();\r\n    }\r\n\r\n    if (this.frameworkPatterns.react.includes(frameworkKey)) {\r\n      return this.getReactSpecificRequirements();\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Gets HTML-specific quality requirements\r\n   * \r\n   * @returns QualityRequirement[] - HTML-specific requirements\r\n   */\r\n  private getHtmlSpecificRequirements(): QualityRequirement[] {\r\n    return [\r\n      {\r\n        category: 'accessibility',\r\n        priority: 'critical',\r\n        rules: [\r\n          'Use semantic HTML elements (<main>, <button>, <section>) not generic <div>',\r\n          'Add visible focus states with :focus-visible for all interactive elements',\r\n          'Include role=\"status\" aria-live=\"polite\" for dynamic content updates',\r\n          'Wrap animations in @media (prefers-reduced-motion: reduce) guards'\r\n        ],\r\n        tokenBudget: DEFAULT_TOKEN_BUDGET.accessibility\r\n      },\r\n      {\r\n        category: 'security',\r\n        priority: 'critical',\r\n        rules: [\r\n          'Move inline <style> and <script> to external files',\r\n          'Generate Content Security Policy headers',\r\n          'Sanitize any dynamic content to prevent XSS'\r\n        ],\r\n        tokenBudget: DEFAULT_TOKEN_BUDGET.security\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Gets React-specific quality requirements\r\n   * \r\n   * @returns QualityRequirement[] - React-specific requirements\r\n   */\r\n  private getReactSpecificRequirements(): QualityRequirement[] {\r\n    return [\r\n      {\r\n        category: 'accessibility',\r\n        priority: 'critical',\r\n        rules: [\r\n          'Use semantic HTML elements and proper ARIA roles',\r\n          'Implement keyboard navigation support',\r\n          'Add focus management for dynamic content',\r\n          'Include screen reader announcements'\r\n        ],\r\n        tokenBudget: DEFAULT_TOKEN_BUDGET.accessibility\r\n      },\r\n      {\r\n        category: 'security',\r\n        priority: 'critical',\r\n        rules: [\r\n          'Sanitize all props and user inputs',\r\n          'Implement proper error boundaries',\r\n          'Validate TypeScript interfaces strictly',\r\n          'Use secure state management patterns'\r\n        ],\r\n        tokenBudget: DEFAULT_TOKEN_BUDGET.security\r\n      },\r\n      {\r\n        category: 'performance',\r\n        priority: 'high',\r\n        rules: [\r\n          'Implement React.memo for expensive components',\r\n          'Use useCallback/useMemo appropriately',\r\n          'Implement code splitting with React.lazy',\r\n          'Optimize re-renders with proper dependencies'\r\n        ],\r\n        tokenBudget: DEFAULT_TOKEN_BUDGET.performance\r\n      }\r\n    ];\r\n  }\r\n}\r"
      ],
      "context7_docs": [
        "## /websites/react_dev Documentation:\n================\nCODE SNIPPETS\n================\nTITLE: Composing React Components for Page Layout\nDESCRIPTION: Illustrates how React components can be composed, nested, and ordered to design a full page layout. This example shows high-level components like `PageLayout` containing other components such as `NavigationHeader` and `PageContent`.\n\nSOURCE: https://react.dev/learn/your-first-component\n\nLANGUAGE: jsx\nCODE:\n```\n<PageLayout>\n  <NavigationHeader>\n    <SearchBar />\n    <Link to=\"/docs\">Docs</Link>\n  </NavigationHeader>\n  <Sidebar />\n  <PageContent>\n    <TableOfContents />\n    <DocumentationText />\n  </PageContent>\n</PageLayout>\n```\n\n--------------------------------\n\nTITLE: Nest React Components in an Application\nDESCRIPTION: This example shows how to nest a previously defined `MyButton` component within a main `MyApp` component. The `export default` keywords make `MyApp` the primary component for the file, illustrating basic component composition.\n\nSOURCE: https://react.dev/learn\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function MyApp() {  \n  return (  \n    <div>  \n      <h1>Welcome to my app</h1>  \n      <MyButton />  \n    </div>  \n  );  \n}\n```\n\n--------------------------------\n\nTITLE: Composing Server Components with Client Components for Interactivity\nDESCRIPTION: This set of snippets shows how to introduce interactivity into Server Components by importing and composing them with Client Components. The Server Component fetches data, while the Client Component, marked with `\"use client\"`, handles interactive UI elements like state management.\n\nSOURCE: https://react.dev/reference/rsc/server-components\n\nLANGUAGE: javascript\nCODE:\n```\n// Server Component  \nimport Expandable from './Expandable';  \n\nasync function Notes() {  \n  const notes = await db.notes.getAll();  \n  return (  \n    <div>  \n      {notes.map(note => (  \n        <Expandable key={note.id}>  \n          <p note={note} />  \n        </Expandable>  \n      ))}  \n    </div>  \n  )  \n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Client Component  \n\"use client\"  \n\nexport default function Expandable({children}) {  \n  const [expanded, setExpanded] = useState(false);  \n  return (  \n    <div>  \n      <button  \n        onClick={() => setExpanded(!expanded)}  \n      >  \n        Toggle  \n      </button>  \n      {expanded && children}  \n    </div>  \n  )  \n}\n```\n\n--------------------------------\n\nTITLE: Use a React Component within Another Component\nDESCRIPTION: This JavaScript code illustrates how to import and use a previously defined React component, `MyComponent`, within another functional component, `App`. This represents a component usage, where an instance of the component definition is rendered.\n\nSOURCE: https://react.dev/reference/rsc/use-client\n\nLANGUAGE: javascript\nCODE:\n```\nimport MyComponent from './MyComponent';  \n  \nfunction App() {  \n  // This is a usage of a component  \n  return <MyComponent />;  \n}\n```\n\n--------------------------------\n\nTITLE: Basic React Activity Component Structure\nDESCRIPTION: This example demonstrates the fundamental structure of the React `<Activity>` component, where the `mode` prop controls the visibility of its child components, such as a `<Sidebar />`.\n\nSOURCE: https://react.dev/reference/react/Activity\n\nLANGUAGE: jsx\nCODE:\n```\n<Activity mode={visibility}>\n\n  <Sidebar />\n\n</Activity>\n```\n\n--------------------------------\n\nTITLE: Default Export of a React Application Component\nDESCRIPTION: Shows how to define and export a default React component, `App`, which serves as the main application entry point. This component renders another component, `Profile`.\n\nSOURCE: https://react.dev/learn/importing-and-exporting-components\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App() {  \n\n  return <Profile />;  \n\n}\n```\n\n--------------------------------\n\nTITLE: Define and Render Basic React Components\nDESCRIPTION: Introduces the creation of a reusable 'Square' component and its rendering within a parent 'Board' component using JSX, demonstrating basic component architecture. The 'Board' component renders multiple instances of the 'Square' component, initially without distinct values.\n\nSOURCE: https://react.dev/learn/tutorial-tic-tac-toe\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Square() {  \n  return <button className=\"square\">1</button>;  \n}  \n  \nexport default function Board() {  \n  // ...  \n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ...  \nexport default function Board() {  \n  return (  \n    <>  \n      <div className=\"board-row\">  \n        <Square />  \n        <Square />  \n        <Square />  \n      </div>  \n      <div className=\"board-row\">  \n        <Square />  \n        <Square />  \n        <Square />  \n      </div>  \n      <div className=\"board-row\">  \n        <Square />  \n        <Square />  \n        <Square />  \n      </div>  \n    </>  \n  );  \n}\n```\n\n--------------------------------\n\nTITLE: Create a Basic React Component Structure\nDESCRIPTION: This snippet demonstrates how to define simple functional React components (`Profile` and `Gallery`). It showcases basic component nesting, where the `Gallery` component renders multiple `Profile` components, illustrating the fundamental building blocks of a React UI.\n\nSOURCE: https://react.dev/learn/describing-the-ui\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3As.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\n--------------------------------\n\nTITLE: Client-side Hydration with Server Component Output\nDESCRIPTION: This HTML output illustrates how the client-side JavaScript bundle hydrates the initial HTML from the server. Client Components defined within Server Components are represented as placeholders, with their interactive logic loaded and executed by the browser.\n\nSOURCE: https://react.dev/reference/rsc/server-components\n\nLANGUAGE: html\nCODE:\n```\n<head>  \n  <!-- the bundle for Client Components -->  \n  <script src=\"bundle.js\" />  \n</head>  \n<body>  \n  <div>  \n    <Expandable key={1}>  \n      <p>this is the first note</p>  \n    </Expandable>  \n    <Expandable key={2}>  \n      <p>this is the second note</p>  \n    </Expandable>  \n    <!--...-->  \n  </div>  \n</body>\n```\n\n--------------------------------\n\nTITLE: Migrate React Components Using Context: Class to Functional\nDESCRIPTION: This example demonstrates how to refactor React components that use the Context API from class-based implementations to functional components. It showcases the 'before' (class components with `this.context`) and 'after' (functional components with `useContext`) states for `Panel` and `Button` components, both consuming a `ThemeContext` for styling.\n\nSOURCE: https://react.dev/reference/react/Component\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext, Component } from 'react';\n\nconst ThemeContext = createContext(null);\n\nclass Panel extends Component {\n  static contextType = ThemeContext;\n\n  render() {\n    const theme = this.context;\n    const className = 'panel-' + theme;\n    return (\n      <section className={className}>\n        <h1>{this.props.title}</h1>\n        {this.props.children}\n      </section>\n    );    \n  }\n}\n\nclass Button extends Component {\n  static contextType = ThemeContext;\n\n  render() {\n    const theme = this.context;\n    const className = 'button-' + theme;\n    return (\n      <button className={className}>\n        {this.props.children}\n      </button>\n    );\n  }\n}\n\nfunction Form() {\n  return (\n    <Panel title=\"Welcome\">\n      <Button>Sign up</Button>\n      <Button>Log in</Button>\n    </Panel>\n  );\n}\n\nexport default function MyApp() {\n  return (\n    <ThemeContext value=\"dark\">\n      <Form />\n    </ThemeContext>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext, useContext } from 'react';\n\nconst ThemeContext = createContext(null);\n\nfunction Panel({ title, children }) {\n  const theme = useContext(ThemeContext);\n  const className = 'panel-' + theme;\n  return (\n    <section className={className}>\n      <h1>{title}</h1>\n      {children}\n    </section>\n  )\n}\n\nfunction Button({ children }) {\n  const theme = useContext(ThemeContext);\n  const className = 'button-' + theme;\n  return (\n    <button className={className}>\n      {children}\n    </button>\n  );\n}\n\nfunction Form() {\n  return (\n    <Panel title=\"Welcome\">\n      <Button>Sign up</Button>\n      <Button>Log in</Button>\n    </Panel>\n  );\n}\n\nexport default function MyApp() {\n  return (\n    <ThemeContext value=\"dark\">\n      <Form />\n    </ThemeContext>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Implement Dynamic React Avatar Component with Multiple Instances\nDESCRIPTION: This comprehensive example defines an `Avatar` component that dynamically renders an image and alt text based on `person` and `size` props. The `Profile` component then renders multiple `Avatar` instances, each with unique prop values, showcasing how components can be customized and reused.\n\nSOURCE: https://react.dev/learn/passing-props-to-a-component\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getImageUrl } from './utils.js';\n\nfunction Avatar({ person, size }) {\n  return (\n    <img\n      className=\"avatar\"\n      src={getImageUrl(person)}\n      alt={person.name}\n      width={size}\n      height={size}\n    />\n  );\n}\n\nexport default function Profile() {\n  return (\n    <div>\n      <Avatar\n        size={100}\n        person={{\n          name: 'Katsuko Saruhashi',\n          imageId: 'YfeOqp2'\n        }}\n      />\n      <Avatar\n        size={80}\n        person={{\n          name: 'Aklilu Lemma',\n          imageId: 'OKS67lh'\n        }}\n      />\n      <Avatar\n        size={50}\n        person={{\n          name: 'Lin Lanying',\n          imageId: '1bX5QH6'\n        }}\n      />\n    </div>\n  );\n}\n```\n\n--------------------------------\n\nTITLE: Rendered HTML Output from Server Components\nDESCRIPTION: This shows the simplified HTML structure that is sent to the browser after Server Components have rendered on the server. The client only receives the final output, not the original component logic, enhancing performance and reducing bundle size.\n\nSOURCE: https://react.dev/reference/rsc/server-components\n\nLANGUAGE: html\nCODE:\n```\n<div>  \n  <span>By: The React Team</span>  \n  <p>React 19 is...</p>  \n</div>\n```\n\n--------------------------------\n\nTITLE: Define a React Component Function\nDESCRIPTION: This JavaScript code snippet demonstrates how to define a basic React functional component. A component definition is typically a function that returns JSX, laying the groundwork for reusable UI elements.\n\nSOURCE: https://react.dev/reference/rsc/use-client\n\nLANGUAGE: javascript\nCODE:\n```\n// This is a definition of a component  \nfunction MyComponent() {  \n  return <p>My Component</p>  \n}\n```\n\n--------------------------------\n\nTITLE: Server-side Data Fetching with React Server Components\nDESCRIPTION: This example demonstrates how React Server Components enable direct data fetching during the component's render phase. By making components `async`, data can be accessed from the database without client-side API calls, streamlining data retrieval and potentially reducing render-blocking waterfalls.\n\nSOURCE: https://react.dev/reference/rsc/server-components\n\nLANGUAGE: javascript\nCODE:\n```\nimport db from './database';  \n\nasync function Note({id}) {  \n  // NOTE: loads *during* render.  \n  const note = await db.notes.get(id);  \n  return (  \n    <div>  \n      <Author id={note.authorId} />  \n      <p>{note}</p>  \n    </div>  \n  );  \n}  \n\nasync function Author({id}) {  \n  // NOTE: loads *after* Note,  \n  // but is fast if data is co-located.  \n  const author = await db.authors.get(id);  \n  return <span>By: {author.name}</span>;  \n}\n```\n\n--------------------------------\n\nTITLE: Importing a Named React Component\nDESCRIPTION: Illustrates the syntax for importing a named React component, `Profile`, from another file. Named imports require the component name to be enclosed in curly braces.\n\nSOURCE: https://react.dev/learn/importing-and-exporting-components\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Profile } from './Gallery.js';\n```\n\n--------------------------------\n\nTITLE: React Pure Component Demonstration\nDESCRIPTION: This React example showcases components designed as pure functions. The 'Recipe' component consistently renders the same JSX output when provided with identical 'drinkers' prop values, adhering to the principle of referential transparency.\n\nSOURCE: https://react.dev/learn/keeping-components-pure\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Recipe({ drinkers }) {\n  return (\n    <ol>    \n      <li>Boil {drinkers} cups of water.</li>\n      <li>Add {drinkers} spoons of tea and {0.5 * drinkers} spoons of spice.</li>\n      <li>Add {0.5 * drinkers} cups of milk to boil and sugar to taste.</li>\n    </ol>\n  );\n}\n\nexport default function App() {\n  return (\n    <section>\n      <h1>Spiced Chai Recipe</h1>\n      <h2>For two</h2>\n      <Recipe drinkers={2} />\n      <h2>For a gathering</h2>\n      <Recipe drinkers={4} />\n    </section>\n  );\n}\n```\n\n--------------------------------\n\nTITLE: Implement Agnostic React Component for Flexible Rendering\nDESCRIPTION: This React component demonstrates an 'agnostic' component that can render successfully on both the client and server without specific directives. It takes `title` and `text` props to conditionally render different heading types, showcasing components that don't rely on server-only or client-only features.\n\nSOURCE: https://react.dev/reference/rsc/use-client\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function FancyText({title, text}) {  \n\n  return title  \n\n    ? <h1 className='fancy title'>{text}</h1>  \n\n    : <h3 className='fancy cursive'>{text}</h3>  \n\n}\n```\n\n--------------------------------\n\nTITLE: Pure React Component Example\nDESCRIPTION: This example refactors the previous impure component into a pure React component by passing the `guest` number as a prop. This ensures that the component's output depends only on its inputs (props) and produces no side effects, making it more predictable and easier to test.\n\nSOURCE: https://react.dev/learn/describing-the-ui\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Cup({ guest }) {\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaSet() {\n  return (\n    <>\n      <Cup guest={1} />\n      <Cup guest={2} />\n      <Cup guest={3} />\n    </>\n  );\n}\n```\n\n--------------------------------\n\nTITLE: Render React Image Component with Standard HTML Props\nDESCRIPTION: This React example defines an `Avatar` component that renders an `<img>` tag using standard HTML attributes like `className`, `src`, `alt`, `width`, and `height` as props. The `Profile` component then renders this `Avatar` component.\n\nSOURCE: https://react.dev/learn/passing-props-to-a-component\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Avatar() {\n  return (\n    <img\n      className=\"avatar\"\n      src=\"https://i.imgur.com/1bX5QH6.jpg\"\n      alt=\"Lin Lanying\"\n      width={100}\n      height={100}\n    />\n  );\n}\n\nexport default function Profile() {\n  return (\n    <Avatar />\n  );\n}\n```"
      ]
    },
    "success": true,
    "todos": [],
    "frameworks_detected": [],
    "ai_enhancement": {
      "enabled": false,
      "strategy": "none",
      "quality_score": 0,
      "confidence_score": 0,
      "improvements": [],
      "recommendations": [],
      "processing_time": 0,
      "cost": 0
    }
  },
  "performance": {
    "originalTokens": 20,
    "enhancedTokens": 1683,
    "tokenRatio": 84.15,
    "responseTime": 2257,
    "context7Used": true,
    "context7LibrariesResolved": 1
  },
  "quality": {
    "overall": 20,
    "details": {
      "frameworkAccuracy": "0%",
      "context7Accuracy": "0%",
      "reactPatterns": "Present",
      "stateManagement": "Present",
      "searchLogic": "Present",
      "productionReady": "Present",
      "contentQuality": "20/25"
    },
    "breakdown": {
      "performance": 6,
      "accuracy": 9,
      "content": 5
    }
  },
  "context": {
    "repoFacts": 16,
    "codeSnippets": 10,
    "frameworkDocs": 0,
    "projectDocs": 0,
    "context7Docs": 1
  },
  "libraries": [
    "/websites/react_dev"
  ],
  "timestamp": "2025-09-25T23:13:29.834Z"
}