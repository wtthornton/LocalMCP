{
  "timestamp": "2025-09-22T04:36:05.370Z",
  "totalTime": 95,
  "summary": {
    "performance": {
      "avgTokenRatio": 21.179363969363965,
      "avgResponseTime": 14.2,
      "context7UsageRate": 60,
      "avgLibrariesResolved": 0.6
    },
    "quality": {
      "avgQualityScore": 58,
      "distribution": {
        "excellent": 0,
        "good": 0,
        "acceptable": 0,
        "poor": 4,
        "failed": 1
      }
    }
  },
  "results": [
    {
      "testCase": {
        "id": "simple-math",
        "name": "Simple Math Question",
        "prompt": "What is 2+2?",
        "expectedFrameworks": [],
        "expectedContext7Libraries": [],
        "qualityCriteria": {
          "shouldBeMinimal": true,
          "shouldBeAccurate": true,
          "shouldBeFast": true,
          "maxTokens": 50,
          "maxResponseTime": 100
        }
      },
      "performance": {
        "originalTokens": 3,
        "enhancedTokens": 21,
        "tokenRatio": 7,
        "responseTime": 7,
        "context7Used": false,
        "context7LibrariesResolved": 0
      },
      "quality": {
        "overall": 45,
        "details": {
          "minimalResponse": "Good",
          "responseSpeed": "Excellent",
          "frameworkAccuracy": "0%",
          "context7Accuracy": "100%",
          "contentQuality": "0/25"
        },
        "breakdown": {
          "performance": 14,
          "accuracy": 20,
          "content": 11
        }
      },
      "context": {
        "repoFacts": 3,
        "codeSnippets": 4,
        "frameworkDocs": 0,
        "projectDocs": 0,
        "context7Docs": 0
      },
      "libraries": [],
      "enhancedPrompt": "What is 2+2?\n\n## Detected Framework: typescript\n\n## Project: Project name: promptmcp..."
    },
    {
      "testCase": {
        "id": "simple-html",
        "name": "Simple HTML Button",
        "prompt": "How do I create a button?",
        "expectedFrameworks": [
          "html"
        ],
        "expectedContext7Libraries": [
          "/mdn/html"
        ],
        "qualityCriteria": {
          "shouldIncludeHTMLDocs": true,
          "shouldBePractical": true,
          "shouldIncludeExamples": true,
          "maxTokens": 200,
          "maxResponseTime": 200
        }
      },
      "performance": {
        "originalTokens": 7,
        "enhancedTokens": 190,
        "tokenRatio": 27.142857142857142,
        "responseTime": 4,
        "context7Used": true,
        "context7LibrariesResolved": 1
      },
      "quality": {
        "overall": 60,
        "details": {
          "frameworkAccuracy": "100%",
          "context7Accuracy": "100%",
          "htmlDocumentation": "Present",
          "practical": "Present",
          "examples": "Present",
          "contentQuality": "15/25"
        },
        "breakdown": {
          "performance": 18,
          "accuracy": 27,
          "content": 15
        }
      },
      "context": {
        "repoFacts": 3,
        "codeSnippets": 5,
        "frameworkDocs": 0,
        "projectDocs": 0,
        "context7Docs": 1
      },
      "libraries": [
        "/mdn/html"
      ],
      "enhancedPrompt": "How do I create a button?\n\n## Detected Framework: html\n\n## Project: Project name: promptmcp\n\n## /mdn/html Documentation:\n# /mdn/html Documentation\n\n## General Patterns\n\n### Error Handling\n```typescript\ntry {\n  const result = await someOperation();\n  return result;\n} catch (error) {\n  console.error('Operation failed:', error);\n  throw error;\n}\n```\n\n### Async Operations\n```typescript\nasync function performAsyncOperation() {\n  try {\n    const result = await someAsyncCall();\n    return result;\n  } c..."
    },
    {
      "testCase": {
        "id": "medium-react",
        "name": "Medium React Component",
        "prompt": "Create a React component that displays a list of users with search functionality",
        "expectedFrameworks": [
          "react"
        ],
        "expectedContext7Libraries": [
          "/facebook/react"
        ],
        "qualityCriteria": {
          "shouldIncludeReactPatterns": true,
          "shouldIncludeStateManagement": true,
          "shouldIncludeSearchLogic": true,
          "shouldBeProductionReady": true,
          "maxTokens": 1000,
          "maxResponseTime": 500
        }
      },
      "performance": {
        "originalTokens": 20,
        "enhancedTokens": 641,
        "tokenRatio": 32.05,
        "responseTime": 37,
        "context7Used": true,
        "context7LibrariesResolved": 1
      },
      "quality": {
        "overall": 60,
        "details": {
          "frameworkAccuracy": "100%",
          "context7Accuracy": "100%",
          "reactPatterns": "Present",
          "stateManagement": "Present",
          "searchLogic": "Present",
          "contentQuality": "15/25"
        },
        "breakdown": {
          "performance": 18,
          "accuracy": 27,
          "content": 15
        }
      },
      "context": {
        "repoFacts": 3,
        "codeSnippets": 2,
        "frameworkDocs": 1,
        "projectDocs": 1,
        "context7Docs": 1
      },
      "libraries": [
        "/facebook/react"
      ],
      "enhancedPrompt": "Create a React component that displays a list of users with search functionality\n\n## Detected Frameworks/Libraries:\n- **Frameworks**: react\n- **Detection Method**: keyword+project\n- **Confidence**: 80.0%\n- **Suggestions**: Detected react (pattern match)\n\n\n## Framework Best Practices (from Context7):\n## /facebook/react Documentation:\n# React Documentation\n\n## Component Patterns\n\n### Functional Components with Hooks\n```typescript\nimport { useState, useEffect } from 'react';\n\ninterface ComponentPro..."
    },
    {
      "testCase": {
        "id": "complex-fullstack",
        "name": "Complex Full-Stack Task",
        "prompt": "Build a full-stack application with user authentication, real-time chat, and file upload using Next.js, TypeScript, and PostgreSQL",
        "expectedFrameworks": [
          "nextjs",
          "typescript"
        ],
        "expectedContext7Libraries": [
          "/vercel/next.js",
          "/microsoft/typescript"
        ],
        "qualityCriteria": {
          "shouldIncludeArchitecture": true,
          "shouldIncludeSecurity": true,
          "shouldIncludeDatabasePatterns": true,
          "shouldIncludeRealTimePatterns": true,
          "shouldIncludeFileUploadPatterns": true,
          "shouldBeScalable": true,
          "maxTokens": 3000,
          "maxResponseTime": 1000
        }
      },
      "performance": {
        "originalTokens": 33,
        "enhancedTokens": 503,
        "tokenRatio": 15.242424242424242,
        "responseTime": 14,
        "context7Used": false,
        "context7LibrariesResolved": 0
      },
      "quality": {
        "overall": 60,
        "details": {
          "frameworkAccuracy": "100%",
          "context7Accuracy": "50%",
          "architecture": "Present",
          "security": "Present",
          "realTimePatterns": "Present",
          "fileUploadPatterns": "Present",
          "scalability": "Present",
          "contentQuality": "25/25"
        },
        "breakdown": {
          "performance": 18,
          "accuracy": 27,
          "content": 15
        }
      },
      "context": {
        "repoFacts": 3,
        "codeSnippets": 2,
        "frameworkDocs": 1,
        "projectDocs": 1,
        "context7Docs": 1
      },
      "libraries": [
        "/vercel/next.js"
      ],
      "enhancedPrompt": "Build a full-stack application with user authentication, real-time chat, and file upload using Next.js, TypeScript, and PostgreSQL\n\n## Detected Frameworks/Libraries:\n- **Frameworks**: nextjs, typescript\n- **Detection Method**: keyword+project\n- **Confidence**: 80.0%\n- **Suggestions**: Detected nextjs (pattern match), Detected typescript (pattern match), Selected nextjs as primary framework (highest priority)\n\n\n## CRITICAL Quality Requirements:\n\n### ðŸ”’ Security\nðŸ”¥ ** (Critical)**\n- Move inline <s..."
    },
    {
      "testCase": {
        "id": "typescript-debug",
        "name": "TypeScript Debug Task",
        "prompt": "Fix this TypeScript error: Property \"data\" does not exist on type \"unknown\" in my API response handler",
        "expectedFrameworks": [
          "typescript"
        ],
        "expectedContext7Libraries": [
          "/microsoft/typescript"
        ],
        "qualityCriteria": {
          "shouldExplainTheError": true,
          "shouldProvideSolution": true,
          "shouldIncludeTypeGuards": true,
          "shouldIncludeBestPractices": true,
          "shouldBeEducational": true,
          "maxTokens": 800,
          "maxResponseTime": 300
        }
      },
      "performance": {
        "originalTokens": 26,
        "enhancedTokens": 636,
        "tokenRatio": 24.46153846153846,
        "responseTime": 9,
        "context7Used": true,
        "context7LibrariesResolved": 1
      },
      "quality": {
        "overall": 65,
        "details": {
          "frameworkAccuracy": "100%",
          "context7Accuracy": "100%",
          "errorExplanation": "Present",
          "educational": "Present",
          "typeGuards": "Present",
          "solution": "Present",
          "contentQuality": "20/25"
        },
        "breakdown": {
          "performance": 20,
          "accuracy": 29,
          "content": 16
        }
      },
      "context": {
        "repoFacts": 3,
        "codeSnippets": 2,
        "frameworkDocs": 1,
        "projectDocs": 1,
        "context7Docs": 1
      },
      "libraries": [
        "/microsoft/typescript"
      ],
      "enhancedPrompt": "Fix this TypeScript error: Property \"data\" does not exist on type \"unknown\" in my API response handler\n\n## Detected Frameworks/Libraries:\n- **Frameworks**: typescript\n- **Detection Method**: keyword+project\n- **Confidence**: 80.0%\n- **Suggestions**: Detected typescript (pattern match)\n\n\n## Framework Best Practices (from Context7):\n## /microsoft/typescript Documentation:\n# TypeScript Documentation\n\n## Error Handling Patterns\n\n### Try-Catch with Error Codes\n```typescript\ntry {\n  const result = awa..."
    }
  ]
}