{
  "testCase": {
    "id": "simple-math",
    "name": "Simple Math Question",
    "prompt": "What is 2+2?",
    "expectedFrameworks": [],
    "expectedContext7Libraries": [],
    "qualityCriteria": {
      "shouldBeMinimal": true,
      "shouldBeAccurate": true,
      "shouldBeFast": true,
      "maxTokens": 50,
      "maxResponseTime": 100
    }
  },
  "completeResponse": {
    "enhanced_prompt": "What is 2+2?\n\n## Quality Requirements\n\n1. **type-safety** 🟠 (high priority)\n   - TypeScript type safety and strict typing\n2. **testing** 🟡 (medium priority)\n   - Comprehensive test coverage and quality\n3. **performance** 🟡 (medium priority)\n   - Build optimization and performance\n4. **responsive** 🟡 (medium priority)\n   - Mobile-first responsive design\n5. **security** 🟠 (high priority)\n   - Security best practices and input validation\n\n\n## Framework Best Practices:\n## /websites/react_dev Documentation:\n================\nCODE SNIPPETS\n================\nTITLE: Document 'use no memo' Directive Usage for React Best Practices\nDESCRIPTION: Emphasizes the importance of documenting the reason for using `\"use no memo\"` to ensure maintainability and understanding. It contrasts a well-documented example with one lacking explanation, promoting clear communication in code.\n\nSOURCE: https://react.dev/reference/react-compiler/directives/use-no-memo\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ Good - clear explanation and tracking  \nfunction DataProcessor() {  \n  \"use no memo\"; // TODO: Remove after fixing rule of react violation  \n  // ...  \n}  \n  \n// ❌ Bad - no explanation  \nfunction Mystery() {  \n  \"use no memo\";  \n  // ...  \n}\n```\n\n--------------------------------\n\nTITLE: Optimize custom React Hooks by memoizing returned functions with useCallback\nDESCRIPTION: When developing custom React Hooks, it's a best practice to wrap any functions that the hook returns with `useCallback`. This ensures that the functions maintain a stable reference across re-renders (provided their internal dependencies are stable), allowing consumers of your custom hook to optimize their own components more effectively.\n\nSOURCE: https://react.dev/reference/react/useCallback\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useRouter() {  \n  const { dispatch } = useContext(RouterStateContext);  \n\n  const navigate = useCallback((url) => {  \n    dispatch({ type: 'navigate', url });  \n  }, [dispatch]);  \n\n  const goBack = useCallback(() => {  \n    dispatch({ type: 'back' });  \n  }, [dispatch]);  \n\n  return {  \n    navigate,  \n    goBack,  \n  };\n}\n\n```\n\n--------------------------------\n\nTITLE: Calculating Derived React State During Render (Best Practice)\nDESCRIPTION: This React component demonstrates the best practice for managing state derived from props. Instead of storing and resetting `selection`, it stores `selectedId` and calculates the `selection` object directly during rendering based on the `items` prop and `selectedId`. This approach simplifies the data flow, eliminates the need for state adjustments, and makes the component more robust and easier to debug, as state is always consistent with props.\n\nSOURCE: https://react.dev/learn/you-might-not-need-an-effect\n\nLANGUAGE: javascript\nCODE:\n```\nfunction List({ items }) {  \n  const [isReverse, setIsReverse] = useState(false);  \n  const [selectedId, setSelectedId] = useState(null);  \n  // ✅ Best: Calculate everything during rendering  \n  const selection = items.find(item => item.id === selectedId) ?? null;  \n  // ...  \n}\n```\n\n--------------------------------\n\nTITLE: Documenting React Compiler Directive Usage\nDESCRIPTION: These JavaScript examples highlight the importance of documenting why a 'use no memo' directive is used. Good practice involves adding clear comments explaining the reason for the directive, aiding future maintenance and understanding, as opposed to leaving it unexplained.\n\nSOURCE: https://react.\n\n## Repository Context:\nProject name: promptmcp\nProject description: A focused MCP server for intelligent prompt enhancement with dynamic framework detection, Context7 integration, comprehensive testing suite, and organized test artifacts management\nUses Playwright framework (^1.55.0)\nUses TypeScript framework (^5.0.0)\nUses Vitest framework (^1.0.0)\nProject type: Frontend application\nHas testing setup\nHas build process\nSource directories: src\nConfiguration files: tsconfig.json\nUses TypeScript for type safety\nUses Node.js/Express for backend\nUses testing with 297 test files\nUses Model Context Protocol (MCP) for AI integration\nUses service-oriented architecture with 153 service files\nUses tool-based architecture with 39 tool files\n\n## Existing Code Patterns:\n```typescript\nBe confident in your analysis (0.7-0.95)`\r\n        },\r\n        {\r\n          role: 'user',\r\n          content: analysisPrompt\r\n        }\r\n      ], {\r\n        maxTokens: 500,\r\n        temperature: 0.2 // Low temperature for consistent analysis\r\n      });\r\n\r\n      const content = response.choices[0]?.message?.content;\r\n      if (!content) {\r\n        throw new Error('No response content from OpenAI');\r\n      }\r\n\r\n      // Parse and validate the AI response\r\n      const aiComplexity = this.parseAIComplexityResponse(content);\r\n      \r\n      this.logger.debug('AI complexity analysis completed', {\r\n        level: aiComplexity.level,\r\n        score: aiComplexity.score,\r\n        userExpertiseLevel: aiComplexity.userExpertiseLevel,\r\n        confidence: aiComplexity.confidence,\r\n        estimatedTokens: aiComplexity.estimatedTokens\r\n      });\r\n\r\n      // Log AI usage for monitoring\r\n      this.logger.info('AI complexity analysis usage', {\r\n        operation: 'prompt_complexity_analysis',\r\n        tokensUsed: response.usage?.total_tokens || 0,\r\n        cost: this.estimateAICost(response.usage?.total_tokens || 0),\r\n        confidence: aiComplexity.confidence\r\n      });\r\n\r\n      return aiComplexity;\r\n\r\n    } catch (error) {\r\n      this.logger.warn('AI complexity analysis failed, falling back to basic analysis', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        prompt: prompt.substring(0, 100) + '...'\r\n      });\r\n      \r\n      // Fallback to basic analysis\r\n      const basicComplexity = this.analyzePromptComplexity(prompt);\r\n      return {\r\n        ...basicComplexity,\r\n        userExpertiseLevel: this.inferUserExpertiseLevel(projectContext),\r\n        responseStrategy: this.determineResponseStrategy(basicComplexity.level),\r\n        estimatedTokens: this.estimateTokens(basicComplexity.level),\r\n        confidence: 0.5 // Lower confidence due to fallback\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get optimized options based on prompt complexity\r\n   * Implements adaptive response sizing for better user experience\r\n   */\r\n  getOptimizedOptions(\r\n    originalOptions: any,\r\n    complexity: PromptComplexity\r\n  ): OptimizedOptions {\r\n    const options = { ...originalOptions };\r\n    \r\n    switch (complexity.level) {\r\n      case 'simple':\r\n        // Minimal context for simple prompts like \"yes or no\" (reduced by 20%)\r\n        options.maxTokens = Math.\n```\n\n## Instructions:\nMake your response consistent with the project's existing patterns, best practices, and coding standards. Use the provided context to ensure your solution fits well with the existing codebase.",
    "context_used": {
      "repo_facts": [
        "Project name: promptmcp",
        "Project description: A focused MCP server for intelligent prompt enhancement with dynamic framework detection, Context7 integration, comprehensive testing suite, and organized test artifacts management",
        "Uses Playwright framework (^1.55.0)",
        "Uses TypeScript framework (^5.0.0)",
        "Uses Vitest framework (^1.0.0)",
        "Project type: Frontend application",
        "Has testing setup",
        "Has build process",
        "Source directories: src",
        "Configuration files: tsconfig.json",
        "Uses TypeScript for type safety",
        "Uses Node.js/Express for backend",
        "Uses testing with 297 test files",
        "Uses Model Context Protocol (MCP) for AI integration",
        "Uses service-oriented architecture with 153 service files",
        "Uses tool-based architecture with 39 tool files"
      ],
      "code_snippets": [
        "File: src/tools/enhance/prompt-analyzer.service.ts\nDescription: Function definition: simplePatterns\nCode:\n    const simplePatterns = [\r\n      /^(yes|no|ok|sure|maybe)\\s*$/i,\r\n      /^(yes|no)\\s+or\\s+(yes|no)/i,\r\n      /^(what|how|when|where|why)\\s+\\w+\\?$/i,\r\n      /^(is|are|was|were|do|does|did|can|could|will|would)\\s+\\w+/i,\r\n      /^what\\s+is\\s+\\d+\\s*[\\+\\-\\*\\/]\\s*\\d+\\??$/i,  // Math questions like \"What is 2+2?\"\r\n      /^\\d+\\s*[\\+\\-\\*\\/]\\s*\\d+\\??$/i,  // Direct math like \"2+2?\"\r\n      /^what\\s+is\\s+\\d+\\s*[\\+\\-\\*\\/]\\s*\\d+\\s*\\??$/i,  // \"What is 2+2\" without question mark\r\n      /^how\\s+do\\s+i\\s+create\\s+a\\s+(\\w+)\\??$/i,  // Simple element creation questions\r\n      /^how\\s+to\\s+create\\s+a\\s+(\\w+)\\??$/i,  // Simple element creation questions\r\n      /^how\\s+do\\s+i\\s+make\\s+a\\s+(\\w+)\\??$/i  // Simple element creation questions\r\n    ];\r\n    \r\n    if (simplePatterns.some(pattern => pattern.test(prompt.trim()))) {\r\n      score += 2;\r\n      indicators.push('simple-question');\r\n    }\r",
        "File: src/tools/enhance/prompt-analyzer.service.ts\nDescription: Class definition: PromptAnalyzerService\nCode:\nexport class PromptAnalyzerService {\r\n  private logger: Logger;\r\n  private openaiService?: OpenAIService | undefined;\r\n\r\n  constructor(logger: Logger, openaiService?: OpenAIService | undefined) {\r\n    this.logger = logger;\r\n    this.openaiService = openaiService;\r\n  }\r\n\r\n  /**\r\n   * Analyze prompt complexity to determine appropriate response strategy\r\n   * Implements intelligent complexity detection with multiple indicators\r\n   */\r\n  analyzePromptComplexity(prompt: string): PromptComplexity {\r\n    const indicators: string[] = [];\r\n    let score = 0;\r\n    \r\n    // Length-based scoring\r\n    if (prompt.length < 20) {\r\n      score += 3;\r\n      indicators.push('very-short');\r\n    } else if (prompt.length < 50) {\r\n      score += 2;\r\n      indicators.push('short');\r\n    } else if (prompt.length > 200) {\r\n      score += 1;\r\n      indicators.push('long');\r\n    }\r\n    \r\n    // Simple question patterns\r\n    const simplePatterns = [\r\n      /^(yes|no|ok|sure|maybe)\\s*$/i,\r\n      /^(yes|no)\\s+or\\s+(yes|no)/i,\r\n      /^(what|how|when|where|why)\\s+\\w+\\?$/i,\r\n      /^(is|are|was|were|do|does|did|can|could|will|would)\\s+\\w+/i,\r\n      /^what\\s+is\\s+\\d+\\s*[\\+\\-\\*\\/]\\s*\\d+\\??$/i,  // Math questions like \"What is 2+2?\"\r\n      /^\\d+\\s*[\\+\\-\\*\\/]\\s*\\d+\\??$/i,  // Direct math like \"2+2?\"\r\n      /^what\\s+is\\s+\\d+\\s*[\\+\\-\\*\\/]\\s*\\d+\\s*\\??$/i,  // \"What is 2+2\" without question mark\r\n      /^how\\s+do\\s+i\\s+create\\s+a\\s+(\\w+)\\??$/i,  // Simple element creation questions\r\n      /^how\\s+to\\s+create\\s+a\\s+(\\w+)\\??$/i,  // Simple element creation questions\r\n      /^how\\s+do\\s+i\\s+make\\s+a\\s+(\\w+)\\??$/i  // Simple element creation questions\r\n    ];\r\n    \r\n    if (simplePatterns.some(pattern => pattern.test(prompt.trim()))) {\r\n      score += 2;\r\n      indicators.push('simple-question');\r\n    }\r\n    \r\n    // Complex development patterns\r\n    const complexPatterns = [\r\n      /create|build|implement|develop/i,\r\n      /component|function|class|service/i,\r\n      /api|endpoint|database|schema/i,\r\n      /test|testing|debug|fix/i,\r\n      /deploy|production|staging/i\r\n    ];\r\n    \r\n    const complexMatches = complexPatterns.filter(pattern => pattern.test(prompt));\r\n    if (complexMatches.length > 0) {\r\n      score -= complexMatches.length;\r\n      indicators.push(...complexMatches.map(() => 'development-task'));\r\n    }\r\n    \r\n    // Framework-specific complexity\r\n    const frameworkKeywords = [\r\n      'react', 'vue', 'angular', 'typescript', 'javascript',\r\n      'node', 'express', 'next', 'nuxt', 'svelte'\r\n    ];\r\n    \r\n    const frameworkMatches = frameworkKeywords.filter(keyword => \r\n      prompt.toLowerCase().includes(keyword)\r\n    );\r\n    if (frameworkMatches.length > 0) {\r\n      score -= frameworkMatches.length * 0.5;\r\n      indicators.push(...frameworkMatches.map(() => 'framework-specific'));\r\n    }\r\n    \r\n    // Determine complexity level\r\n    // TEMPORARY: Force all prompts to 'complex' for testing full Context7 features\r\n    let level: 'simple' | 'medium' | 'complex';\r\n    level = 'complex'; // Always use complex for maximum Context7 documentation\r\n    \r\n    // Original logic (commented out for testing):\r\n    // if (score >= 2) {\r\n    //   level = 'simple';\r\n    // } else if (score >= 0) {\r\n    //   level = 'medium';\r\n    // } else {\r\n    //   level = 'complex';\r\n    // }\r\n    \r\n    this.logger.debug('Prompt complexity analysis', {\r\n      prompt: prompt.substring(0, 100) + '...',\r\n      level,\r\n      score,\r\n      indicators\r\n    });\r\n    \r\n    return { level, score, indicators };\r\n  }\r\n\r\n  /**\r\n   * Analyze prompt complexity with AI and project context\r\n   * REDESIGNED: Uses OpenAI for intelligent complexity analysis with project context\r\n   */\r\n  async analyzePromptComplexityWithContext(\r\n    prompt: string, \r\n    projectContext: ProjectContext\r\n  ): Promise<AIPromptComplexity> {\r\n    try {\r\n      // If OpenAI is not available, fall back to basic analysis\r\n      if (!this.openaiService) {\r\n        this.logger.debug('OpenAI not available, falling back to basic analysis');\r\n        const basicComplexity = this.analyzePromptComplexity(prompt);\r\n        return {\r\n          ...basicComplexity,\r\n          userExpertiseLevel: this.inferUserExpertiseLevel(projectContext),\r\n          responseStrategy: this.determineResponseStrategy(basicComplexity.level),\r\n          estimatedTokens: this.estimateTokens(basicComplexity.level),\r\n          confidence: 0.6 // Lower confidence for basic analysis\r\n        };\r\n      }\r\n\r\n      this.logger.debug('Starting AI-powered prompt complexity analysis', {\r\n        prompt: prompt.substring(0, 100) + '...',\r\n        projectContextSize: projectContext.repoFacts.length + projectContext.codeSnippets.length\r\n      });\r\n\r\n      // Create context-aware analysis prompt\r\n      const analysisPrompt = this.buildAnalysisPrompt(prompt, projectContext);\r\n      \r\n      const response = await this.openaiService.createChatCompletion([\r\n        {\r\n          role: 'system',\r\n          content: `You are an expert at analyzing developer prompts and determining their complexity level. \r\n\r\nYour job is to:\r\n1. Analyze the user's prompt for complexity indicators\r\n2. Consider the project context (frameworks, code patterns, project type)\r\n3. Determine the user's expertise level based on project context\r\n4. Recommend the best response strategy\r\n5. Estimate token requirements for an optimal response\r\n\r\nReturn ONLY valid JSON with this exact structure:\r\n{\r\n  \"level\": \"simple|medium|complex\",\r\n  \"score\": 1-10,\r\n  \"indicators\": [\"indicator1\", \"indicator2\"],\r\n  \"userExpertiseLevel\": \"beginner|intermediate|advanced\",\r\n  \"responseStrategy\": \"minimal|standard|comprehensive\",\r\n  \"estimatedTokens\": 500,\r\n  \"confidence\": 0.85\r\n}\r\n\r\nGuidelines:\r\n- Simple: Basic questions, single tasks, clear requests (score 7-10)\r\n- Medium: Multi-step tasks, some complexity, moderate context needed (score 4-6)\r\n- Complex: Large projects, multiple technologies, extensive context needed (score 1-3)\r\n- Consider project context when determining user expertise level\r\n- Estimate tokens based on complexity and context needed\r\n- Be confident in your analysis (0.7-0.95)`\r\n        },\r\n        {\r\n          role: 'user',\r\n          content: analysisPrompt\r\n        }\r\n      ], {\r\n        maxTokens: 500,\r\n        temperature: 0.2 // Low temperature for consistent analysis\r\n      });\r\n\r\n      const content = response.choices[0]?.message?.content;\r\n      if (!content) {\r\n        throw new Error('No response content from OpenAI');\r\n      }\r\n\r\n      // Parse and validate the AI response\r\n      const aiComplexity = this.parseAIComplexityResponse(content);\r\n      \r\n      this.logger.debug('AI complexity analysis completed', {\r\n        level: aiComplexity.level,\r\n        score: aiComplexity.score,\r\n        userExpertiseLevel: aiComplexity.userExpertiseLevel,\r\n        confidence: aiComplexity.confidence,\r\n        estimatedTokens: aiComplexity.estimatedTokens\r\n      });\r\n\r\n      // Log AI usage for monitoring\r\n      this.logger.info('AI complexity analysis usage', {\r\n        operation: 'prompt_complexity_analysis',\r\n        tokensUsed: response.usage?.total_tokens || 0,\r\n        cost: this.estimateAICost(response.usage?.total_tokens || 0),\r\n        confidence: aiComplexity.confidence\r\n      });\r\n\r\n      return aiComplexity;\r\n\r\n    } catch (error) {\r\n      this.logger.warn('AI complexity analysis failed, falling back to basic analysis', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        prompt: prompt.substring(0, 100) + '...'\r\n      });\r\n      \r\n      // Fallback to basic analysis\r\n      const basicComplexity = this.analyzePromptComplexity(prompt);\r\n      return {\r\n        ...basicComplexity,\r\n        userExpertiseLevel: this.inferUserExpertiseLevel(projectContext),\r\n        responseStrategy: this.determineResponseStrategy(basicComplexity.level),\r\n        estimatedTokens: this.estimateTokens(basicComplexity.level),\r\n        confidence: 0.5 // Lower confidence due to fallback\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get optimized options based on prompt complexity\r\n   * Implements adaptive response sizing for better user experience\r\n   */\r\n  getOptimizedOptions(\r\n    originalOptions: any,\r\n    complexity: PromptComplexity\r\n  ): OptimizedOptions {\r\n    const options = { ...originalOptions };\r\n    \r\n    switch (complexity.level) {\r\n      case 'simple':\r\n        // Minimal context for simple prompts like \"yes or no\" (reduced by 20%)\r\n        options.maxTokens = Math.min(options.maxTokens || 4000, 400);\r\n        options.includeMetadata = false;\r\n        options.useCache = true;\r\n        options.simpleMode = true;\r\n        break;\r\n        \r\n      case 'medium':\r\n        // Moderate context for medium complexity prompts (reduced by 20%)\r\n        options.maxTokens = Math.min(options.maxTokens || 4000, 1200);\r\n        options.includeMetadata = true;\r\n        options.useCache = true;\r\n        break;\r\n        \r\n      case 'complex':\r\n        // Full context for complex development tasks (reduced by 20%)\r\n        options.maxTokens = Math.min(options.maxTokens || 4000, 3200);\r\n        options.includeMetadata = true;\r\n        options.useCache = true;\r\n        break;\r\n    }\r\n    \r\n    this.logger.debug('Optimized options generated', {\r\n      complexity: complexity.level,\r\n      maxTokens: options.maxTokens,\r\n      includeMetadata: options.includeMetadata,\r\n      useCache: options.useCache\r\n    });\r\n    \r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * Check if a prompt should trigger breakdown functionality\r\n   * Analyzes prompt characteristics to determine if task breakdown would be beneficial\r\n   */\r\n  shouldBreakdown(prompt: string, options?: { includeBreakdown?: boolean; maxTasks?: number }): boolean {\r\n    try {\r\n      // If explicitly disabled, don't breakdown\r\n      if (options?.includeBreakdown === false) {\r\n        return false;\r\n      }\r\n\r\n      // If explicitly enabled, always breakdown\r\n      if (options?.includeBreakdown === true) {\r\n        return true;\r\n      }\r\n\r\n      // Auto-detect based on prompt characteristics\r\n      const promptLower = prompt.toLowerCase();\r\n      \r\n      // Keywords that suggest complex, multi-step projects\r\n      // Keywords that suggest complex, multi-step tasks (dynamic detection)\r\n      const complexKeywords = this.getComplexKeywords();\r\n      \r\n      // Keywords that suggest simple, single tasks (dynamic detection)\r\n      const simpleKeywords = this.getSimpleKeywords();\r\n      \r\n      const hasComplexKeywords = complexKeywords.some(keyword => promptLower.includes(keyword));\r\n      const hasSimpleKeywords = simpleKeywords.some(keyword => promptLower.includes(keyword));\r\n      \r\n      // Check prompt length (longer prompts are more likely to be complex)\r\n      const isLongPrompt = prompt.length > 100;\r\n      \r\n      // Check for multiple sentences or bullet points (suggests multiple tasks)\r\n      const hasMultipleParts = prompt.includes('.') && prompt.split('.').length > 2;\r\n      const hasBulletPoints = prompt.includes('-') || prompt.includes('*') || prompt.includes('•');\r\n      \r\n      // Decision logic\r\n      if (hasComplexKeywords && (isLongPrompt || hasMultipleParts || hasBulletPoints)) {\r\n        return true;\r\n      }\r\n      \r\n      if (hasSimpleKeywords && !isLongPrompt) {\r\n        return false;\r\n      }\r\n      \r\n      // Default to breakdown for medium-length prompts with project keywords\r\n      return isLongPrompt && (hasComplexKeywords || hasMultipleParts);\r\n      \r\n    } catch (error) {\r\n      this.logger.warn('Error detecting prompt complexity for breakdown', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        prompt: prompt.substring(0, 100) + '...'\r\n      });\r\n      return false;\r\n    }\r\n  }\r",
        "File: src/config/config.service.ts\nDescription: Function definition: mcpConfig\nCode:\n      const mcpConfig = JSON.parse(readFileSync(mcpConfigPath, 'utf8'));\r\n      const promptmcpConfig = mcpConfig.mcpServers.promptmcp;\r\n      \r\n      // DEBUG: Print what we're loading\r\n      console.log('🔑 [ConfigService] Loading MCP configuration:');\r\n      console.log('  MCP Config Path:', mcpConfigPath);\r\n      console.log('  PromptMCP Config:', promptmcpConfig);\r\n      console.log('  Environment variables before loading:', {\r\n        OPENAI_API_KEY: process.env.OPENAI_API_KEY ? `${process.env.OPENAI_API_KEY.substring(0, 20)}...` : 'NOT SET',\r\n        OPENAI_PROJECT_ID: process.env.OPENAI_PROJECT_ID || 'NOT SET',\r\n        CONTEXT7_API_KEY: process.env.CONTEXT7_API_KEY ? `${process.env.CONTEXT7_API_KEY.substring(0, 20)}...` : 'NOT SET'\r\n      });\r",
        "File: src/config/config.service.ts\nDescription: Function definition: promptmcpConfig\nCode:\n      const promptmcpConfig = mcpConfig.mcpServers.promptmcp;\r\n      \r\n      // DEBUG: Print what we're loading\r\n      console.log('🔑 [ConfigService] Loading MCP configuration:');\r\n      console.log('  MCP Config Path:', mcpConfigPath);\r\n      console.log('  PromptMCP Config:', promptmcpConfig);\r\n      console.log('  Environment variables before loading:', {\r\n        OPENAI_API_KEY: process.env.OPENAI_API_KEY ? `${process.env.OPENAI_API_KEY.substring(0, 20)}...` : 'NOT SET',\r\n        OPENAI_PROJECT_ID: process.env.OPENAI_PROJECT_ID || 'NOT SET',\r\n        CONTEXT7_API_KEY: process.env.CONTEXT7_API_KEY ? `${process.env.CONTEXT7_API_KEY.substring(0, 20)}...` : 'NOT SET'\r\n      });\r",
        "File: src/config/config.service.ts\nDescription: Class definition: ConfigService\nCode:\nexport class ConfigService {\r\n  private config: PromptMCPConfig;\r\n  private logger: Logger;\r\n\r\n  constructor() {\r\n    this.logger = new Logger('ConfigService');\r\n    this.loadMCPConfiguration();\r\n    this.config = this.loadConfig();\r\n    this.validateConfig();\r\n  }\r\n\r\n  private loadMCPConfiguration(): void {\r\n    try {\r\n      const mcpConfigPath = process.env.MCP_CONFIG_PATH || join(process.cwd(), 'mcp-config.json');\r\n      this.logger.info('Loading MCP configuration from', { path: mcpConfigPath });\r\n      \r\n      const mcpConfig = JSON.parse(readFileSync(mcpConfigPath, 'utf8'));\r\n      const promptmcpConfig = mcpConfig.mcpServers.promptmcp;\r\n      \r\n      // DEBUG: Print what we're loading\r\n      console.log('🔑 [ConfigService] Loading MCP configuration:');\r\n      console.log('  MCP Config Path:', mcpConfigPath);\r\n      console.log('  PromptMCP Config:', promptmcpConfig);\r\n      console.log('  Environment variables before loading:', {\r\n        OPENAI_API_KEY: process.env.OPENAI_API_KEY ? `${process.env.OPENAI_API_KEY.substring(0, 20)}...` : 'NOT SET',\r\n        OPENAI_PROJECT_ID: process.env.OPENAI_PROJECT_ID || 'NOT SET',\r\n        CONTEXT7_API_KEY: process.env.CONTEXT7_API_KEY ? `${process.env.CONTEXT7_API_KEY.substring(0, 20)}...` : 'NOT SET'\r\n      });\r\n      \r\n      if (promptmcpConfig && promptmcpConfig.env) {\r\n        // Load API keys from MCP config into environment variables\r\n        if (promptmcpConfig.env.CONTEXT7_API_KEY) {\r\n          process.env.CONTEXT7_API_KEY = promptmcpConfig.env.CONTEXT7_API_KEY;\r\n          console.log('  ✅ Set CONTEXT7_API_KEY from MCP config');\r\n        }\r\n        if (promptmcpConfig.env.OPENAI_API_KEY) {\r\n          process.env.OPENAI_API_KEY = promptmcpConfig.env.OPENAI_API_KEY;\r\n          console.log('  ✅ Set OPENAI_API_KEY from MCP config');\r\n        }\r\n        if (promptmcpConfig.env.OPENAI_PROJECT_ID) {\r\n          process.env.OPENAI_PROJECT_ID = promptmcpConfig.env.OPENAI_PROJECT_ID;\r\n          console.log('  ✅ Set OPENAI_PROJECT_ID from MCP config');\r\n        }\r\n        if (promptmcpConfig.env.CONTEXT7_ENABLED) {\r\n          process.env.CONTEXT7_ENABLED = promptmcpConfig.env.CONTEXT7_ENABLED;\r\n          console.log('  ✅ Set CONTEXT7_ENABLED from MCP config');\r\n        }\r\n        if (promptmcpConfig.env.CONTEXT7_USE_HTTP_ONLY) {\r\n          process.env.CONTEXT7_USE_HTTP_ONLY = promptmcpConfig.env.CONTEXT7_USE_HTTP_ONLY;\r\n          console.log('  ✅ Set CONTEXT7_USE_HTTP_ONLY from MCP config');\r\n        }\r\n        if (promptmcpConfig.env.CONTEXT7_DEBUG) {\r\n          process.env.CONTEXT7_DEBUG = promptmcpConfig.env.CONTEXT7_DEBUG;\r\n          this.logger.info('CONTEXT7_DEBUG environment variable set', { value: promptmcpConfig.env.CONTEXT7_DEBUG });\r\n          console.log('  ✅ Set CONTEXT7_DEBUG from MCP config');\r\n        }\r\n        \r\n        // DEBUG: Print environment variables after loading\r\n        console.log('  Environment variables after loading:', {\r\n          OPENAI_API_KEY: process.env.OPENAI_API_KEY ? `${process.env.OPENAI_API_KEY.substring(0, 20)}...` : 'NOT SET',\r\n          OPENAI_PROJECT_ID: process.env.OPENAI_PROJECT_ID || 'NOT SET',\r\n          CONTEXT7_API_KEY: process.env.CONTEXT7_API_KEY ? `${process.env.CONTEXT7_API_KEY.substring(0, 20)}...` : 'NOT SET'\r\n        });\r\n        \r\n        this.logger.info('MCP configuration loaded successfully', {\r\n          hasContext7Key: !!process.env.CONTEXT7_API_KEY,\r\n          hasOpenAIKey: !!process.env.OPENAI_API_KEY,\r\n          hasOpenAIProjectId: !!process.env.OPENAI_PROJECT_ID\r\n        });\r\n      } else {\r\n        this.logger.warn('No promptmcp configuration found in MCP config, falling back to environment variables');\r\n        this.loadEnvironmentVariables();\r\n      }\r\n    } catch (error) {\r\n      this.logger.warn('Failed to load MCP configuration, falling back to environment variables', {\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      });\r\n      this.loadEnvironmentVariables();\r\n    }\r\n  }\r\n\r\n  private loadEnvironmentVariables(): void {\r\n    // Load Context7 API key from environment or use default\r\n    if (!process.env.CONTEXT7_API_KEY) {\r\n      this.logger.warn('CONTEXT7_API_KEY not found in environment variables');\r\n    }\r\n    \r\n    // Set default Context7 enabled state if not provided\r\n    if (!process.env.CONTEXT7_ENABLED) {\r\n      process.env.CONTEXT7_ENABLED = 'true';\r\n    }\r\n    \r\n    if (!process.env.CONTEXT7_BASE_URL) {\r\n      process.env.CONTEXT7_BASE_URL = 'https://mcp.context7.com/mcp';\r\n    }\r\n\r\n    // Set OpenAI environment variables if not provided\r\n    if (!process.env.OPENAI_API_KEY) {\r\n      this.logger.warn('OPENAI_API_KEY not set - breakdown tool will not be available');\r\n    }\r\n    \r\n    if (!process.env.OPENAI_PROJECT_ID) {\r\n      this.logger.warn('OPENAI_PROJECT_ID not set - breakdown tool will not be available');\r\n    }\r\n  }\r\n\r\n  getConfig(): PromptMCPConfig {\r\n    return this.config;\r\n  }\r\n\r\n  get<K extends keyof PromptMCPConfig>(key: K): PromptMCPConfig[K] {\r\n    return this.config[key];\r\n  }\r\n\r\n  getWithDefault<K extends keyof PromptMCPConfig>(key: K, defaultValue: PromptMCPConfig[K]): PromptMCPConfig[K] {\r\n    return this.config[key] ?? defaultValue;\r\n  }\r\n\r\n  getEnv(key: string, defaultValue: string = ''): string {\r\n    return process.env[key] ?? defaultValue;\r\n  }\r\n\r\n  getNested<K extends keyof PromptMCPConfig, T extends keyof PromptMCPConfig[K]>(\r\n    section: K,\r\n    key: T\r\n  ): PromptMCPConfig[K][T] {\r\n    return this.config[section][key];\r\n  }\r\n\r\n  private loadConfig(): PromptMCPConfig {\r\n    const config: PromptMCPConfig = {\r\n      server: {\r\n        name: process.env.LOCALMCP_NAME || 'localmcp',\r\n        version: process.env.LOCALMCP_VERSION || '1.0.0',\r\n        port: parseInt(process.env.LOCALMCP_PORT || '3000', 10)\r\n      },\r\n      context7: {\r\n        enabled: process.env.CONTEXT7_ENABLED === 'true',\r\n        apiKey: process.env.CONTEXT7_API_KEY || undefined,\r\n        baseUrl: process.env.CONTEXT7_BASE_URL || 'https://api.context7.io',\r\n        cacheEnabled: process.env.CONTEXT7_CACHE_ENABLED !== 'false',\r\n        cacheTtl: parseInt(process.env.CONTEXT7_CACHE_TTL || '3600', 10),\r\n        useHttpOnly: process.env.CONTEXT7_USE_HTTP_ONLY === 'true',\r\n        checkCompatibility: process.env.CONTEXT7_CHECK_COMPATIBILITY !== 'false',\r\n        mcp: {\r\n          enabled: process.env.CONTEXT7_MCP_ENABLED === 'true',\r\n          serverUrl: process.env.CONTEXT7_MCP_URL || 'http://localhost:3001',\r\n          timeout: parseInt(process.env.CONTEXT7_MCP_TIMEOUT || '30000', 10)\r\n        }\r\n      },\r\n      database: {\r\n        type: (process.env.DATABASE_TYPE as 'sqlite' | 'qdrant') || 'sqlite',\r\n        path: process.env.DATABASE_PATH || './data/localmcp.db',\r\n        url: process.env.QDRANT_URL || undefined,\r\n        apiKey: process.env.QDRANT_API_KEY || undefined\r\n      },\r\n      vector: {\r\n        qdrant: {\r\n          url: process.env.QDRANT_URL || 'http://localhost:6333',\r\n          apiKey: process.env.QDRANT_API_KEY || undefined,\r\n          collections: {\r\n            documents: process.env.QDRANT_COLLECTION_DOCUMENTS || 'localmcp_documents',\r\n            lessons: process.env.QDRANT_COLLECTION_LESSONS || 'localmcp_lessons',\r\n            patterns: process.env.QDRANT_COLLECTION_PATTERNS || 'localmcp_patterns'\r\n          }\r\n        }\r\n      },\r\n      openai: {\r\n        apiKey: process.env.OPENAI_API_KEY || undefined,\r\n        projectId: process.env.OPENAI_PROJECT_ID || undefined,\r\n        model: process.env.OPENAI_MODEL || 'gpt-4',\r\n        maxTokens: parseInt(process.env.OPENAI_MAX_TOKENS || '4000', 10),\r\n        temperature: parseFloat(process.env.OPENAI_TEMPERATURE || '0.3'),\r\n        timeout: parseInt(process.env.OPENAI_TIMEOUT || '60000', 10),\r\n        retries: parseInt(process.env.OPENAI_RETRIES || '3', 10)\r\n      },\r\n      playwright: {\r\n        mcp: {\r\n          enabled: process.env.PLAYWRIGHT_ENABLED === 'true',\r\n          baseUrl: process.env.PLAYWRIGHT_MCP_URL || 'http://localhost:8931',\r\n          timeout: parseInt(process.env.PLAYWRIGHT_TIMEOUT || '30000', 10)\r\n        }\r\n      },\r\n      cache: {\r\n        context7: {\r\n          maxMemoryEntries: parseInt(process.env.CACHE_MAX_MEMORY_ENTRIES || '1000', 10),\r\n          maxMemorySize: parseInt(process.env.CACHE_MAX_MEMORY_SIZE || '52428800', 10), // 50MB\r\n          defaultTtl: parseInt(process.env.CACHE_DEFAULT_TTL || '3600', 10), // 1 hour\r\n          maxTtl: parseInt(process.env.CACHE_MAX_TTL || '86400', 10), // 24 hours\r\n          cleanupInterval: parseInt(process.env.CACHE_CLEANUP_INTERVAL || '300', 10), // 5 minutes\r\n              enablePersistence: process.env.CACHE_ENABLE_PERSISTENCE !== 'false',\r\n              dbPath: process.env.CACHE_DB_PATH || './data/cache/context7.db'\r\n            }\r\n          },\r\n          admin: {\r\n            enabled: process.env.ADMIN_ENABLED === 'true',\r\n            port: parseInt(process.env.ADMIN_PORT || '3001', 10),\r\n            auth: process.env.ADMIN_USERNAME && process.env.ADMIN_PASSWORD ? {\r\n              username: process.env.ADMIN_USERNAME,\r\n              password: process.env.ADMIN_PASSWORD\r\n            } : undefined\r\n          },\r\n          logging: {\r\n            level: (process.env.LOG_LEVEL as 'debug' | 'info' | 'warn' | 'error') || 'info',\r\n            enableConsole: process.env.LOG_CONSOLE !== 'false',\r\n            enableFile: process.env.LOG_FILE === 'true',\r\n            filePath: process.env.LOG_FILE_PATH || './logs/localmcp.log'\r\n          },\r\n      tools: {\r\n        analyze: {\r\n          enabled: process.env.TOOL_ANALYZE_ENABLED !== 'false',\r\n          maxDepth: parseInt(process.env.TOOL_ANALYZE_MAX_DEPTH || '10', 10),\r\n          includeNodeModules: process.env.TOOL_ANALYZE_INCLUDE_NODE_MODULES === 'true'\r\n        },\r\n        create: {\r\n          enabled: process.env.TOOL_CREATE_ENABLED !== 'false',\r\n          defaultFramework: process.env.TOOL_CREATE_DEFAULT_FRAMEWORK || 'react',\r\n          includeTests: process.env.TOOL_CREATE_INCLUDE_TESTS === 'true'\r\n        },\r\n        fix: {\r\n          enabled: process.env.TOOL_FIX_ENABLED !== 'false',\r\n          autoApply: process.env.TOOL_FIX_AUTO_APPLY === 'true',\r\n          backupOriginal: process.env.TOOL_FIX_BACKUP_ORIGINAL !== 'false'\r\n        },\r\n        learn: {\r\n          enabled: process.env.TOOL_LEARN_ENABLED !== 'false',\r\n          storagePath: process.env.TOOL_LEARN_STORAGE_PATH || './data/lessons',\r\n          maxLessons: parseInt(process.env.TOOL_LEARN_MAX_LESSONS || '1000', 10)\r\n        }\r\n      },\r\n      frameworkDetection: {\r\n        enabled: process.env.FRAMEWORK_DETECTION_ENABLED !== 'false',\r\n        confidenceThreshold: parseFloat(process.env.FRAMEWORK_DETECTION_CONFIDENCE_THRESHOLD || '0.3'),\r\n        cacheEnabled: process.env.FRAMEWORK_DETECTION_CACHE_ENABLED !== 'false',\r\n        cacheTTL: parseInt(process.env.FRAMEWORK_DETECTION_CACHE_TTL || '86400', 10), // 24 hours\r\n        aiEnabled: process.env.FRAMEWORK_DETECTION_AI_ENABLED !== 'false',\r\n        patternDetectionEnabled: process.env.FRAMEWORK_DETECTION_PATTERN_ENABLED !== 'false',\r\n        projectContextEnabled: process.env.FRAMEWORK_DETECTION_PROJECT_ENABLED !== 'false',\r\n        maxLibrariesPerDetection: parseInt(process.env.FRAMEWORK_DETECTION_MAX_LIBRARIES || '5', 10),\r\n        aiTimeoutMs: parseInt(process.env.FRAMEWORK_DETECTION_AI_TIMEOUT || '5000', 10)\r\n      },\r\n      promptEnhancement: {\r\n        enabled: process.env.PROMPT_ENHANCEMENT_ENABLED === 'true',\r\n        defaultStrategy: (process.env.PROMPT_ENHANCEMENT_STRATEGY_TYPE as 'general' | 'framework-specific' | 'quality-focused' | 'project-aware') || 'general',\r\n        qualityThreshold: parseFloat(process.env.PROMPT_ENHANCEMENT_QUALITY_THRESHOLD || '0.8'),\r\n        maxTokens: parseInt(process.env.PROMPT_ENHANCEMENT_MAX_TOKENS || '2000', 10),\r\n        temperature: parseFloat(process.env.PROMPT_ENHANCEMENT_TEMPERATURE || '0.3'),\r\n        costLimit: parseFloat(process.env.PROMPT_ENHANCEMENT_COST_LIMIT || '10.0'),\r\n        rateLimit: parseInt(process.env.PROMPT_ENHANCEMENT_RATE_LIMIT || '100', 10),\r\n        fallbackEnabled: process.env.PROMPT_ENHANCEMENT_FALLBACK_ENABLED !== 'false',\r\n        optimization: {\r\n          tokenOptimization: {\r\n            contextTruncation: process.env.PROMPT_ENHANCEMENT_TOKEN_CONTEXT_TRUNCATION !== 'false',\r\n            smartSummarization: process.env.PROMPT_ENHANCEMENT_TOKEN_SMART_SUMMARIZATION !== 'false',\r\n            relevanceFiltering: process.env.PROMPT_ENHANCEMENT_TOKEN_RELEVANCE_FILTERING !== 'false',\r\n            priorityBasedSelection: process.env.PROMPT_ENHANCEMENT_TOKEN_PRIORITY_SELECTION !== 'false'\r\n          },\r\n          qualityOptimization: {\r\n            qualityScoring: process.env.PROMPT_ENHANCEMENT_QUALITY_SCORING !== 'false',\r\n            confidenceThresholds: process.env.PROMPT_ENHANCEMENT_QUALITY_CONFIDENCE_THRESHOLDS !== 'false',\r\n            validationChecks: process.env.PROMPT_ENHANCEMENT_QUALITY_VALIDATION_CHECKS !== 'false',\r\n            feedbackLoop: process.env.PROMPT_ENHANCEMENT_QUALITY_FEEDBACK_LOOP === 'true'\r\n          },\r\n          costOptimization: {\r\n            modelSelection: process.env.PROMPT_ENHANCEMENT_COST_MODEL_SELECTION !== 'false',\r\n            tokenBudgeting: process.env.PROMPT_ENHANCEMENT_COST_TOKEN_BUDGETING !== 'false',\r\n            cacheUtilization: process.env.PROMPT_ENHANCEMENT_COST_CACHE_UTILIZATION !== 'false',\r\n            batchProcessing: process.env.PROMPT_ENHANCEMENT_COST_BATCH_PROCESSING === 'true'\r\n          },\r\n          performanceOptimization: {\r\n            parallelProcessing: process.env.PROMPT_ENHANCEMENT_PERF_PARALLEL_PROCESSING !== 'false',\r\n            caching: process.env.PROMPT_ENHANCEMENT_PERF_CACHING !== 'false',\r\n            responseStreaming: process.env.PROMPT_ENHANCEMENT_PERF_RESPONSE_STREAMING === 'true',\r\n            loadBalancing: process.env.PROMPT_ENHANCEMENT_PERF_LOAD_BALANCING === 'true'\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    this.logger.info('Configuration loaded', {\r\n      server: config.server.name,\r\n      context7Enabled: config.context7.enabled,\r\n      databaseType: config.database.type,\r\n      logLevel: config.logging.level\r\n    });\r\n\r\n    return config;\r\n  }\r\n\r\n  private validateConfig(): void {\r\n    const errors: string[] = [];\r\n\r\n    // Validate server config\r\n    if (!this.config.server.name) {\r\n      errors.push('Server name is required');\r\n    }\r\n    if (this.config.server.port < 1 || this.config.server.port > 65535) {\r\n      errors.push('Server port must be between 1 and 65535');\r\n    }\r\n\r\n    // Validate Context7 config\r\n    if (this.config.context7.enabled && !this.config.context7.apiKey) {\r\n      errors.push('Context7 API key is required when Context7 is enabled');\r\n    }\r\n\r\n    // Validate database config\r\n    if (this.config.database.type === 'qdrant') {\r\n      if (!this.config.database.url) {\r\n        errors.push('Qdrant URL is required when using Qdrant database');\r\n      }\r\n    }\r\n\r\n    // Validate logging config\r\n    const validLogLevels = ['debug', 'info', 'warn', 'error'];\r\n    if (!validLogLevels.includes(this.config.logging.level)) {\r\n      errors.push(`Log level must be one of: ${validLogLevels.join(', ')}`);\r\n    }\r\n\r\n    // Validate tools config\r\n    if (this.config.tools.analyze.maxDepth < 1) {\r\n      errors.push('Analyze max depth must be at least 1');\r\n    }\r\n    if (this.config.tools.learn.maxLessons < 1) {\r\n      errors.push('Learn max lessons must be at least 1');\r\n    }\r\n\r\n    // Validate framework detection config\r\n    if (this.config.frameworkDetection.confidenceThreshold < 0 || this.config.frameworkDetection.confidenceThreshold > 1) {\r\n      errors.push('Framework detection confidence threshold must be between 0 and 1');\r\n    }\r\n    if (this.config.frameworkDetection.cacheTTL < 1) {\r\n      errors.push('Framework detection cache TTL must be at least 1 second');\r\n    }\r\n    if (this.config.frameworkDetection.maxLibrariesPerDetection < 1) {\r\n      errors.push('Framework detection max libraries must be at least 1');\r\n    }\r\n    if (this.config.frameworkDetection.aiTimeoutMs < 1000) {\r\n      errors.push('Framework detection AI timeout must be at least 1000ms');\r\n    }\r\n\r\n    // Validate prompt enhancement config\r\n    if (this.config.promptEnhancement.enabled) {\r\n      const validStrategies = ['general', 'framework-specific', 'quality-focused', 'project-aware'];\r\n      if (!validStrategies.includes(this.config.promptEnhancement.defaultStrategy)) {\r\n        errors.push(`Prompt enhancement default strategy must be one of: ${validStrategies.join(', ')}`);\r\n      }\r\n      if (this.config.promptEnhancement.qualityThreshold < 0 || this.config.promptEnhancement.qualityThreshold > 1) {\r\n        errors.push('Prompt enhancement quality threshold must be between 0 and 1');\r\n      }\r\n      if (this.config.promptEnhancement.maxTokens < 100 || this.config.promptEnhancement.maxTokens > 8000) {\r\n        errors.push('Prompt enhancement max tokens must be between 100 and 8000');\r\n      }\r\n      if (this.config.promptEnhancement.temperature < 0 || this.config.promptEnhancement.temperature > 2) {\r\n        errors.push('Prompt enhancement temperature must be between 0 and 2');\r\n      }\r\n      if (this.config.promptEnhancement.costLimit < 0) {\r\n        errors.push('Prompt enhancement cost limit must be non-negative');\r\n      }\r\n      if (this.config.promptEnhancement.rateLimit < 0) {\r\n        errors.push('Prompt enhancement rate limit must be non-negative');\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      this.logger.error('Configuration validation failed', { errors });\r\n      throw new Error(`Configuration validation failed: ${errors.join(', ')}`);\r\n    }\r\n\r\n    this.logger.info('Configuration validation passed');\r\n  }\r\n\r\n  // Helper methods for common config access patterns\r\n  isContext7Enabled(): boolean {\r\n    return this.config.context7.enabled;\r\n  }\r\n\r\n  isToolEnabled(tool: keyof PromptMCPConfig['tools']): boolean {\r\n    return this.config.tools[tool].enabled;\r\n  }\r\n\r\n  getLogLevel(): 'debug' | 'info' | 'warn' | 'error' {\r\n    return this.config.logging.level;\r\n  }\r\n\r\n  getDatabaseConfig() {\r\n    return this.config.database;\r\n  }\r\n\r\n  getContext7Config() {\r\n    return this.config.context7;\r\n  }\r\n\r\n  getFrameworkDetectionConfig() {\r\n    return this.config.frameworkDetection;\r\n  }\r\n\r\n  getPromptEnhancementConfig() {\r\n    return this.config.promptEnhancement;\r\n  }\r\n\r\n  isPromptEnhancementEnabled(): boolean {\r\n    return this.config.promptEnhancement.enabled;\r\n  }\r\n}",
        "File: src/services/ai/openai.service.ts\nDescription: Function definition: response\nCode:\n      const response = await this.client.chat.completions.create({\r\n        model: this.config.model || 'gpt-4',\r\n        messages: [\r\n          {\r\n            role: 'system',\r\n            content: `You are a task breakdown expert. Break down user requests into structured tasks using the provided documentation context.\r\n\r\nYour job is to:\r\n1. Analyze the user's request\r\n2. Use the provided documentation to understand best practices\r\n3. Break down the request into logical, manageable tasks\r\n4. Identify subtasks for complex tasks\r\n5. Determine task dependencies\r\n6. Assign appropriate priorities and categories\r\n7. Provide realistic time estimates\r\n\r\nReturn ONLY valid JSON with this exact structure:\r\n{\r\n  \"mainTasks\": [\r\n    {\r\n      \"title\": \"Task title\",\r\n      \"description\": \"Detailed description of what needs to be done\",\r\n      \"priority\": \"high|medium|low|critical\",\r\n      \"category\": \"feature|bug|refactor|testing|documentation|deployment|maintenance|setup|configuration|infrastructure|design|planning|research\",\r\n      \"estimatedHours\": 2.5\r\n    }\r\n  ],\r\n  \"subtasks\": [\r\n    {\r\n      \"parentTaskTitle\": \"Task title\",\r\n      \"title\": \"Subtask title\",\r\n      \"description\": \"Subtask description\",\r\n      \"estimatedHours\": 1.0\r\n    }\r\n  ],\r\n  \"dependencies\": [\r\n    {\r\n      \"taskTitle\": \"Task that depends on another\",\r\n      \"dependsOnTaskTitle\": \"Task it depends on\"\r\n    }\r\n  ]\r\n}\r\n\r\nGuidelines:\r\n- Break down complex tasks into 3-7 main tasks\r\n- Each main task should have 2-5 subtasks if needed\r\n- Use realistic time estimates (0.5 to 8 hours per task)\r\n- Assign priorities based on importance and urgency\r\n- Identify clear dependencies between tasks\r\n- Use the documentation context to ensure accuracy\r\n- Focus on actionable, specific tasks`\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: `User Request: ${prompt}\r\n\r\nRelevant Documentation:\r\n${context}\r\n\r\nPlease break this down into structured tasks.`\r\n          }\r\n        ],\r\n        temperature: this.config.temperature || 0.3,\r\n        max_tokens: this.config.maxTokens || 2000\r\n      });\r",
        "File: src/services/ai/openai.service.ts\nDescription: Class definition: OpenAIService\nCode:\nexport class OpenAIService {\r\n  private client: OpenAI;\r\n  private logger: Logger;\r\n  private config: OpenAIConfig;\r\n  private costData: OpenAICostData[] = [];\r\n  private usageStats: OpenAIUsageStats = {\r\n    totalRequests: 0,\r\n    totalTokens: 0,\r\n    totalCost: 0,\r\n    averageCostPerRequest: 0,\r\n    averageTokensPerRequest: 0,\r\n    costByModel: {},\r\n    requestsByModel: {}\r\n  };\r\n\r\n  // OpenAI pricing per 1K tokens (as of 2024)\r\n  private readonly PRICING = {\r\n    'gpt-4': { input: 0.03, output: 0.06 },\r\n    'gpt-4-turbo': { input: 0.01, output: 0.03 },\r\n    'gpt-3.5-turbo': { input: 0.0015, output: 0.002 },\r\n    'gpt-3.5-turbo-16k': { input: 0.003, output: 0.004 }\r\n  };\r\n\r\n  constructor(logger: Logger, config: OpenAIConfig) {\r\n    this.logger = logger;\r\n    this.config = config;\r\n    \r\n    // DEBUG: Print API key and project ID being used\r\n    console.log('🔑 OpenAI Service Debug:');\r\n    console.log('  API Key:', config.apiKey ? `${config.apiKey.substring(0, 20)}...` : 'NOT SET');\r\n    console.log('  Project ID:', config.projectId || 'NOT SET');\r\n    console.log('  Full API Key Length:', config.apiKey?.length || 0);\r\n    \r\n    this.client = new OpenAI({ \r\n      apiKey: config.apiKey,\r\n      project: config.projectId\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Break down a user prompt into structured tasks using OpenAI\r\n   */\r\n  async breakdownPrompt(prompt: string, context: string): Promise<TaskBreakdown> {\r\n    try {\r\n      this.logger.debug('Starting OpenAI task breakdown', { \r\n        prompt: prompt.substring(0, 100) + '...',\r\n        contextLength: context.length \r\n      });\r\n\r\n      const response = await this.client.chat.completions.create({\r\n        model: this.config.model || 'gpt-4',\r\n        messages: [\r\n          {\r\n            role: 'system',\r\n            content: `You are a task breakdown expert. Break down user requests into structured tasks using the provided documentation context.\r\n\r\nYour job is to:\r\n1. Analyze the user's request\r\n2. Use the provided documentation to understand best practices\r\n3. Break down the request into logical, manageable tasks\r\n4. Identify subtasks for complex tasks\r\n5. Determine task dependencies\r\n6. Assign appropriate priorities and categories\r\n7. Provide realistic time estimates\r\n\r\nReturn ONLY valid JSON with this exact structure:\r\n{\r\n  \"mainTasks\": [\r\n    {\r\n      \"title\": \"Task title\",\r\n      \"description\": \"Detailed description of what needs to be done\",\r\n      \"priority\": \"high|medium|low|critical\",\r\n      \"category\": \"feature|bug|refactor|testing|documentation|deployment|maintenance|setup|configuration|infrastructure|design|planning|research\",\r\n      \"estimatedHours\": 2.5\r\n    }\r\n  ],\r\n  \"subtasks\": [\r\n    {\r\n      \"parentTaskTitle\": \"Task title\",\r\n      \"title\": \"Subtask title\",\r\n      \"description\": \"Subtask description\",\r\n      \"estimatedHours\": 1.0\r\n    }\r\n  ],\r\n  \"dependencies\": [\r\n    {\r\n      \"taskTitle\": \"Task that depends on another\",\r\n      \"dependsOnTaskTitle\": \"Task it depends on\"\r\n    }\r\n  ]\r\n}\r\n\r\nGuidelines:\r\n- Break down complex tasks into 3-7 main tasks\r\n- Each main task should have 2-5 subtasks if needed\r\n- Use realistic time estimates (0.5 to 8 hours per task)\r\n- Assign priorities based on importance and urgency\r\n- Identify clear dependencies between tasks\r\n- Use the documentation context to ensure accuracy\r\n- Focus on actionable, specific tasks`\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: `User Request: ${prompt}\r\n\r\nRelevant Documentation:\r\n${context}\r\n\r\nPlease break this down into structured tasks.`\r\n          }\r\n        ],\r\n        temperature: this.config.temperature || 0.3,\r\n        max_tokens: this.config.maxTokens || 2000\r\n      });\r\n\r\n      const content = response.choices[0]?.message?.content;\r\n      if (!content) {\r\n        throw new Error('No response content from OpenAI');\r\n      }\r\n\r\n      this.logger.debug('OpenAI response received', { \r\n        responseLength: content.length,\r\n        usage: response.usage \r\n      });\r\n\r\n      // Track cost and usage\r\n      if (response.usage) {\r\n        this.trackUsage(response.usage, this.config.model || 'gpt-4');\r\n      }\r\n\r\n      // Parse and validate the JSON response\r\n      const breakdown = this.parseAndValidateBreakdown(content);\r\n      \r\n      this.logger.info('Task breakdown completed successfully', {\r\n        mainTasks: breakdown.mainTasks.length,\r\n        subtasks: breakdown.subtasks.length,\r\n        dependencies: breakdown.dependencies.length\r\n      });\r\n\r\n      return breakdown;\r\n\r\n    } catch (error) {\r\n      // Enhanced error handling with specific API key error detection\r\n      if (error instanceof Error && error.message.includes('401')) {\r\n        this.logger.error('OpenAI API key invalid or expired', {\r\n          error: 'API key authentication failed',\r\n          suggestion: 'Please update OPENAI_API_KEY environment variable',\r\n          prompt: prompt.substring(0, 100) + '...'\r\n        });\r\n        throw new Error('OpenAI API key is invalid or expired. Please check your OPENAI_API_KEY environment variable.');\r\n      } else if (error instanceof Error && error.message.includes('429')) {\r\n        this.logger.error('OpenAI API rate limit exceeded', {\r\n          error: 'Rate limit exceeded',\r\n          suggestion: 'Please wait before retrying or upgrade your OpenAI plan',\r\n          prompt: prompt.substring(0, 100) + '...'\r\n        });\r\n        throw new Error('OpenAI API rate limit exceeded. Please wait before retrying.');\r\n      } else if (error instanceof Error && error.message.includes('403')) {\r\n        this.logger.error('OpenAI API access forbidden', {\r\n          error: 'API access forbidden',\r\n          suggestion: 'Please check your OpenAI API key permissions',\r\n          prompt: prompt.substring(0, 100) + '...'\r\n        });\r\n        throw new Error('OpenAI API access forbidden. Please check your API key permissions.');\r\n      } else {\r\n        this.logger.error('OpenAI task breakdown failed', {\r\n          error: error instanceof Error ? error.message : 'Unknown error',\r\n          prompt: prompt.substring(0, 100) + '...'\r\n        });\r\n        throw new Error(`Task breakdown failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse and validate the JSON response from OpenAI\r\n   */\r\n  private parseAndValidateBreakdown(content: string): TaskBreakdown {\r\n    try {\r\n      // Clean the content - remove any markdown formatting\r\n      let cleanContent = content.trim();\r\n      if (cleanContent.startsWith('```json')) {\r\n        cleanContent = cleanContent.replace(/^```json\\s*/, '').replace(/\\s*```$/, '');\r\n      } else if (cleanContent.startsWith('```')) {\r\n        cleanContent = cleanContent.replace(/^```\\s*/, '').replace(/\\s*```$/, '');\r\n      }\r\n\r\n      const parsed = JSON.parse(cleanContent);\r\n\r\n      // Validate the structure\r\n      if (!parsed.mainTasks || !Array.isArray(parsed.mainTasks)) {\r\n        throw new Error('Invalid response: mainTasks is required and must be an array');\r\n      }\r\n\r\n      if (!parsed.subtasks || !Array.isArray(parsed.subtasks)) {\r\n        throw new Error('Invalid response: subtasks is required and must be an array');\r\n      }\r\n\r\n      if (!parsed.dependencies || !Array.isArray(parsed.dependencies)) {\r\n        throw new Error('Invalid response: dependencies is required and must be an array');\r\n      }\r\n\r\n      // Validate main tasks\r\n      for (const task of parsed.mainTasks) {\r\n        if (!task.title || !task.description) {\r\n          throw new Error('Invalid main task: title and description are required');\r\n        }\r\n        if (!['low', 'medium', 'high', 'critical'].includes(task.priority)) {\r\n          throw new Error(`Invalid priority: ${task.priority}`);\r\n        }\r\n        if (!['feature', 'bug', 'refactor', 'testing', 'documentation', 'deployment', 'maintenance', 'setup', 'configuration', 'infrastructure', 'design', 'planning', 'research'].includes(task.category)) {\r\n          throw new Error(`Invalid category: ${task.category}`);\r\n        }\r\n        if (typeof task.estimatedHours !== 'number' || task.estimatedHours <= 0) {\r\n          throw new Error(`Invalid estimated hours: ${task.estimatedHours}`);\r\n        }\r\n      }\r\n\r\n      // Validate subtasks\r\n      for (const subtask of parsed.subtasks) {\r\n        if (!subtask.parentTaskTitle || !subtask.title || !subtask.description) {\r\n          throw new Error('Invalid subtask: parentTaskTitle, title, and description are required');\r\n        }\r\n        if (typeof subtask.estimatedHours !== 'number' || subtask.estimatedHours <= 0) {\r\n          throw new Error(`Invalid subtask estimated hours: ${subtask.estimatedHours}`);\r\n        }\r\n      }\r\n\r\n      // Validate dependencies\r\n      for (const dep of parsed.dependencies) {\r\n        if (!dep.taskTitle || !dep.dependsOnTaskTitle) {\r\n          throw new Error('Invalid dependency: taskTitle and dependsOnTaskTitle are required');\r\n        }\r\n      }\r\n\r\n      return parsed as TaskBreakdown;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Failed to parse OpenAI response', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        content: content.substring(0, 200) + '...'\r\n      });\r\n      throw new Error(`Failed to parse task breakdown: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a chat completion with custom messages\r\n   */\r\n  async createChatCompletion(messages: any[], options?: {\r\n    model?: string;\r\n    maxTokens?: number;\r\n    temperature?: number;\r\n  }): Promise<any> {\r\n    try {\r\n      // DEBUG: Print API key and project ID before each API call\r\n      console.log('🔑 OpenAI API Call Debug:');\r\n      console.log('  API Key:', this.config.apiKey ? `${this.config.apiKey.substring(0, 20)}...` : 'NOT SET');\r\n      console.log('  Project ID:', this.config.projectId || 'NOT SET');\r\n      console.log('  Model:', options?.model || this.config.model || 'gpt-4');\r\n      console.log('  Full API Key Length:', this.config.apiKey?.length || 0);\r\n      \r\n      const response = await this.client.chat.completions.create({\r\n        model: options?.model || this.config.model || 'gpt-4',\r\n        messages,\r\n        max_tokens: options?.maxTokens || this.config.maxTokens || 2000,\r\n        temperature: options?.temperature || this.config.temperature || 0.3\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      this.logger.error('OpenAI chat completion failed', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        model: options?.model || this.config.model\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test the OpenAI connection\r\n   */\r\n  async testConnection(): Promise<boolean> {\r\n    try {\r\n      const response = await this.client.chat.completions.create({\r\n        model: this.config.model || 'gpt-4',\r\n        messages: [\r\n          { role: 'user', content: 'Hello, this is a test message.' }\r\n        ],\r\n        max_tokens: 10\r\n      });\r\n\r\n      return response.choices[0]?.message?.content !== undefined;\r\n    } catch (error) {\r\n      this.logger.error('OpenAI connection test failed', {\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Track usage and calculate costs for OpenAI API calls\r\n   */\r\n  private trackUsage(usage: any, model: string): void {\r\n    const promptTokens = usage.prompt_tokens || 0;\r\n    const completionTokens = usage.completion_tokens || 0;\r\n    const totalTokens = usage.total_tokens || 0;\r\n    \r\n    const cost = this.calculateCost(promptTokens, completionTokens, model);\r\n    \r\n    const costData: OpenAICostData = {\r\n      promptTokens,\r\n      completionTokens,\r\n      totalTokens,\r\n      cost,\r\n      model,\r\n      timestamp: new Date()\r\n    };\r\n\r\n    this.costData.push(costData);\r\n    this.updateUsageStats(costData);\r\n    \r\n    this.logger.debug('OpenAI usage tracked', {\r\n      model,\r\n      promptTokens,\r\n      completionTokens,\r\n      totalTokens,\r\n      cost: cost.toFixed(4)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate cost based on token usage and model\r\n   */\r\n  private calculateCost(promptTokens: number, completionTokens: number, model: string): number {\r\n    const pricing = this.PRICING[model as keyof typeof this.PRICING] || this.PRICING['gpt-4'];\r\n    \r\n    const inputCost = (promptTokens / 1000) * pricing.input;\r\n    const outputCost = (completionTokens / 1000) * pricing.output;\r\n    \r\n    return inputCost + outputCost;\r\n  }\r\n\r\n  /**\r\n   * Update usage statistics\r\n   */\r\n  private updateUsageStats(costData: OpenAICostData): void {\r\n    this.usageStats.totalRequests++;\r\n    this.usageStats.totalTokens += costData.totalTokens;\r\n    this.usageStats.totalCost += costData.cost;\r\n    \r\n    // Update model-specific stats\r\n    if (!this.usageStats.costByModel[costData.model]) {\r\n      this.usageStats.costByModel[costData.model] = 0;\r\n      this.usageStats.requestsByModel[costData.model] = 0;\r\n    }\r\n    \r\n    this.usageStats.costByModel[costData.model] = (this.usageStats.costByModel[costData.model] || 0) + costData.cost;\r\n    this.usageStats.requestsByModel[costData.model] = (this.usageStats.requestsByModel[costData.model] || 0) + 1;\r\n    \r\n    // Update averages\r\n    this.usageStats.averageCostPerRequest = this.usageStats.totalCost / this.usageStats.totalRequests;\r\n    this.usageStats.averageTokensPerRequest = this.usageStats.totalTokens / this.usageStats.totalRequests;\r\n  }\r\n\r\n  /**\r\n   * Get current usage statistics\r\n   */\r\n  getUsageStats(): OpenAIUsageStats {\r\n    return { ...this.usageStats };\r\n  }\r\n\r\n  /**\r\n   * Get cost data for a specific time range\r\n   */\r\n  getCostData(startDate?: Date, endDate?: Date): OpenAICostData[] {\r\n    if (!startDate && !endDate) {\r\n      return [...this.costData];\r\n    }\r\n    \r\n    return this.costData.filter(data => {\r\n      if (startDate && data.timestamp < startDate) return false;\r\n      if (endDate && data.timestamp > endDate) return false;\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get total cost for a specific time range\r\n   */\r\n  getTotalCost(startDate?: Date, endDate?: Date): number {\r\n    const filteredData = this.getCostData(startDate, endDate);\r\n    return filteredData.reduce((total, data) => total + data.cost, 0);\r\n  }\r\n\r\n  /**\r\n   * Reset usage statistics\r\n   */\r\n  resetUsageStats(): void {\r\n    this.costData = [];\r\n    this.usageStats = {\r\n      totalRequests: 0,\r\n      totalTokens: 0,\r\n      totalCost: 0,\r\n      averageCostPerRequest: 0,\r\n      averageTokensPerRequest: 0,\r\n      costByModel: {},\r\n      requestsByModel: {}\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Enhance a prompt with context using OpenAI\r\n   */\r\n  async enhancePromptWithContext(request: PromptEnhancementRequest): Promise<PromptEnhancementResponse> {\r\n    try {\r\n      this.logger.debug('Starting OpenAI prompt enhancement', {\r\n        originalPrompt: request.originalPrompt.substring(0, 100) + '...',\r\n        strategy: request.options.strategy.type,\r\n        contextSize: JSON.stringify(request.context).length\r\n      });\r\n\r\n      // Get the appropriate enhancement prompt\r\n      const enhancementPrompt = PromptEnhancementPrompts.getContextualEnhancementPrompt(\r\n        request.originalPrompt,\r\n        request.context,\r\n        request.options.strategy\r\n      );\r\n\r\n      const response = await this.client.chat.completions.create({\r\n        model: this.config.model || 'gpt-4',\r\n        messages: [\r\n          {\r\n            role: 'system',\r\n            content: enhancementPrompt\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: `Please enhance this prompt with the provided context:\r\n\r\nOriginal Prompt: ${request.originalPrompt}\r\n\r\nContext: ${JSON.stringify(request.context, null, 2)}\r\n\r\nEnhancement Options: ${JSON.stringify(request.options, null, 2)}\r\n\r\nGoals: ${JSON.stringify(request.goals, null, 2)}`\r\n          }\r\n        ],\r\n        temperature: request.options.temperature || this.config.temperature || 0.3,\r\n        max_tokens: request.options.maxTokens || this.config.maxTokens || 2000\r\n      });\r\n\r\n      const content = response.choices[0]?.message?.content;\r\n      if (!content) {\r\n        throw new Error('No response content from OpenAI');\r\n      }\r\n\r\n      this.logger.debug('OpenAI enhancement response received', {\r\n        responseLength: content.length,\r\n        usage: response.usage\r\n      });\r\n\r\n      // Track cost and usage\r\n      if (response.usage) {\r\n        this.trackUsage(response.usage, this.config.model || 'gpt-4');\r\n      }\r\n\r\n      // Parse and validate the enhancement response\r\n      const enhancement = this.parseAndValidateEnhancement(content, request);\r\n      \r\n      this.logger.info('Prompt enhancement completed successfully', {\r\n        originalLength: request.originalPrompt.length,\r\n        enhancedLength: enhancement.enhancedPrompt.length,\r\n        qualityScore: enhancement.quality.overall,\r\n        confidenceScore: enhancement.confidence.overall\r\n      });\r\n\r\n      return enhancement;\r\n\r\n    } catch (error) {\r\n      this.logger.error('OpenAI prompt enhancement failed', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        originalPrompt: request.originalPrompt.substring(0, 100) + '...'\r\n      });\r\n      throw new Error(`Prompt enhancement failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse and validate the enhancement response from OpenAI\r\n   */\r\n  private parseAndValidateEnhancement(content: string, request: PromptEnhancementRequest): PromptEnhancementResponse {\r\n    try {\r\n      // Clean the content - remove any markdown formatting\r\n      let cleanContent = content.trim();\r\n      if (cleanContent.startsWith('```json')) {\r\n        cleanContent = cleanContent.replace(/^```json\\s*/, '').replace(/\\s*```$/, '');\r\n      } else if (cleanContent.startsWith('```')) {\r\n        cleanContent = cleanContent.replace(/^```\\s*/, '').replace(/\\s*```$/, '');\r\n      }\r\n\r\n      const parsed = JSON.parse(cleanContent);\r\n\r\n      // Validate the structure\r\n      if (!parsed.enhancedPrompt || typeof parsed.enhancedPrompt !== 'string') {\r\n        throw new Error('Invalid response: enhancedPrompt is required and must be a string');\r\n      }\r\n\r\n      if (!parsed.improvements || !Array.isArray(parsed.improvements)) {\r\n        throw new Error('Invalid response: improvements is required and must be an array');\r\n      }\r\n\r\n      if (!parsed.recommendations || !Array.isArray(parsed.recommendations)) {\r\n        throw new Error('Invalid response: recommendations is required and must be an array');\r\n      }\r\n\r\n      // Validate improvements\r\n      for (const improvement of parsed.improvements) {\r\n        if (!improvement.type || !improvement.description) {\r\n          throw new Error('Invalid improvement: type and description are required');\r\n        }\r\n        if (!['clarity', 'specificity', 'actionability', 'completeness', 'relevance', 'best-practice', 'performance', 'security'].includes(improvement.type)) {\r\n          throw new Error(`Invalid improvement type: ${improvement.type}`);\r\n        }\r\n        if (!['low', 'medium', 'high'].includes(improvement.impact)) {\r\n          throw new Error(`Invalid improvement impact: ${improvement.impact}`);\r\n        }\r\n      }\r\n\r\n      // Create the enhancement response\r\n      const enhancement: PromptEnhancementResponse = {\r\n        enhancedPrompt: parsed.enhancedPrompt,\r\n        metadata: {\r\n          originalLength: request.originalPrompt.length,\r\n          enhancedLength: parsed.enhancedPrompt.length,\r\n          tokenUsage: {\r\n            promptTokens: 0, // Will be filled by trackUsage\r\n            completionTokens: 0,\r\n            totalTokens: 0,\r\n            cost: 0,\r\n            model: this.config.model || 'gpt-4'\r\n          },\r\n          processingTime: 0, // Will be filled by the caller\r\n          strategy: request.options.strategy,\r\n          framework: request.context.frameworkContext?.framework || 'Unknown',\r\n          projectType: request.context.projectContext?.projectType || 'Unknown',\r\n          timestamp: new Date()\r\n        },\r\n        quality: {\r\n          clarity: parsed.qualityScore || 0.8,\r\n          specificity: parsed.qualityScore || 0.8,\r\n          actionability: parsed.qualityScore || 0.8,\r\n          completeness: parsed.qualityScore || 0.8,\r\n          relevance: parsed.qualityScore || 0.8,\r\n          overall: parsed.qualityScore || 0.8\r\n        },\r\n        confidence: {\r\n          overall: parsed.confidenceScore || 0.8,\r\n          contextRelevance: parsed.confidenceScore || 0.8,\r\n          frameworkAccuracy: parsed.confidenceScore || 0.8,\r\n          qualityAlignment: parsed.confidenceScore || 0.8,\r\n          projectFit: parsed.confidenceScore || 0.8\r\n        },\r\n        improvements: parsed.improvements.map((imp: any) => ({\r\n          type: imp.type,\r\n          description: imp.description,\r\n          impact: imp.impact,\r\n          before: imp.before || '',\r\n          after: imp.after || ''\r\n        })),\r\n        recommendations: parsed.recommendations\r\n      };\r\n\r\n      return enhancement;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Failed to parse OpenAI enhancement response', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        content: content.substring(0, 200) + '...'\r\n      });\r\n      throw new Error(`Failed to parse enhancement response: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n}\r",
        "File: src/services/ai/prompt-enhancement-prompts.ts\nDescription: Class definition: PromptEnhancementPrompts\nCode:\nexport class PromptEnhancementPrompts {\r\n  \r\n  /**\r\n   * Primary enhancement agent prompt for general enhancement\r\n   */\r\n  static getPrimaryEnhancementPrompt(): string {\r\n    return `You are an expert prompt enhancement agent specialized in improving developer prompts for maximum clarity, actionability, and technical accuracy.\r\n\r\n## Core Capabilities\r\n- Transform vague requests into specific, actionable prompts\r\n- Integrate framework-specific best practices and patterns\r\n- Apply quality requirements (accessibility, performance, security, testing)\r\n- Enhance prompts with project-aware context and conventions\r\n- Provide clear, step-by-step guidance for implementation\r\n\r\n## Enhancement Strategies\r\n1. **Clarity Enhancement**: Make vague requests specific and unambiguous\r\n2. **Context Integration**: Seamlessly weave in relevant project and framework context\r\n3. **Best Practice Application**: Include industry standards and framework conventions\r\n4. **Quality Focus**: Apply specific quality requirements (a11y, perf, security, testing)\r\n5. **Actionability**: Ensure every enhanced prompt leads to concrete implementation steps\r\n\r\n## Output Format\r\nReturn a JSON object with this exact structure:\r\n{\r\n  \"enhancedPrompt\": \"The improved, specific, and actionable prompt\",\r\n  \"improvements\": [\r\n    {\r\n      \"type\": \"clarity|specificity|actionability|completeness|relevance|best-practice|performance|security\",\r\n      \"description\": \"What was improved\",\r\n      \"impact\": \"low|medium|high\",\r\n      \"before\": \"Original text\",\r\n      \"after\": \"Enhanced text\"\r\n    }\r\n  ],\r\n  \"recommendations\": [\r\n    \"Additional suggestions for the user\",\r\n    \"Best practices to consider\",\r\n    \"Potential pitfalls to avoid\"\r\n  ],\r\n  \"qualityScore\": 0.85,\r\n  \"confidenceScore\": 0.92\r\n}\r\n\r\n## Quality Standards\r\n- Enhanced prompts must be specific and actionable\r\n- Include relevant technical details and context\r\n- Apply appropriate best practices and patterns\r\n- Ensure clarity and eliminate ambiguity\r\n- Provide clear implementation guidance\r\n- Consider quality requirements (accessibility, performance, security, testing)\r\n\r\n## Guidelines\r\n- Preserve the user's original intent while making it more specific\r\n- Use technical terminology appropriate to the framework and project\r\n- Include concrete examples when helpful\r\n- Reference specific patterns, conventions, and best practices\r\n- Ensure the enhanced prompt leads to implementable code\r\n- Consider the user's experience level and project context`;\r\n  }\r\n\r\n  /**\r\n   * Framework-specific enhancement prompts\r\n   */\r\n  static getFrameworkSpecificPrompt(framework: string, version: string): string {\r\n    const frameworkPrompts: Record<string, string> = {\r\n      'react': `You are a React expert specializing in prompt enhancement for React applications.\r\n\r\n## React-Specific Enhancements\r\n- Component architecture and patterns (functional components, hooks, context)\r\n- State management (useState, useReducer, Context API, Redux, Zustand)\r\n- Performance optimization (memo, useMemo, useCallback, lazy loading)\r\n- Testing approaches (Jest, React Testing Library, Cypress)\r\n- Accessibility (ARIA attributes, semantic HTML, keyboard navigation)\r\n- Modern React patterns (Server Components, Suspense, Concurrent Features)\r\n\r\n## React Best Practices\r\n- Use functional components with hooks\r\n- Implement proper error boundaries\r\n- Follow component composition patterns\r\n- Use TypeScript for type safety\r\n- Implement proper prop validation\r\n- Follow React naming conventions\r\n- Use proper key props for lists\r\n- Implement proper cleanup in useEffect\r\n\r\n## Common React Patterns\r\n- Custom hooks for reusable logic\r\n- Higher-order components for cross-cutting concerns\r\n- Render props for component composition\r\n- Compound components for complex UI\r\n- Provider pattern for global state\r\n- Container/Presentational component pattern`,\r\n\r\n      'vue': `You are a Vue.js expert specializing in prompt enhancement for Vue applications.\r\n\r\n## Vue-Specific Enhancements\r\n- Composition API and Options API patterns\r\n- Reactive data management (ref, reactive, computed, watch)\r\n- Component lifecycle and composition\r\n- State management (Pinia, Vuex)\r\n- Performance optimization (v-memo, keep-alive, lazy loading)\r\n- Testing approaches (Vitest, Vue Test Utils, Cypress)\r\n- Accessibility (ARIA attributes, semantic HTML, focus management)\r\n\r\n## Vue Best Practices\r\n- Use Composition API for new projects\r\n- Implement proper component structure\r\n- Use TypeScript for type safety\r\n- Follow Vue naming conventions\r\n- Use proper key attributes for v-for\r\n- Implement proper error handling\r\n- Use provide/inject for dependency injection\r\n- Follow single-file component structure\r\n\r\n## Common Vue Patterns\r\n- Composables for reusable logic\r\n- Provide/inject for dependency injection\r\n- Teleport for portal-like functionality\r\n- Suspense for async components\r\n- Keep-alive for component caching\r\n- Custom directives for DOM manipulation`,\r\n\r\n      'angular': `You are an Angular expert specializing in prompt enhancement for Angular applications.\r\n\r\n## Angular-Specific Enhancements\r\n- Component architecture and lifecycle\r\n- Dependency injection and services\r\n- Reactive forms and template-driven forms\r\n- RxJS observables and operators\r\n- Routing and navigation\r\n- State management (NgRx, Akita)\r\n- Testing approaches (Jasmine, Karma, Protractor)\r\n- Accessibility (Angular CDK, ARIA attributes)\r\n\r\n## Angular Best Practices\r\n- Use Angular CLI for project generation\r\n- Follow Angular style guide conventions\r\n- Implement proper component architecture\r\n- Use TypeScript for type safety\r\n- Implement proper error handling\r\n- Use reactive forms for complex forms\r\n- Follow Angular naming conventions\r\n- Use Angular CDK for accessibility\r\n\r\n## Common Angular Patterns\r\n- Services for business logic\r\n- Guards for route protection\r\n- Interceptors for HTTP requests\r\n- Pipes for data transformation\r\n- Directives for DOM manipulation\r\n- Resolvers for data preloading\r\n- Modules for feature organization`,\r\n\r\n      'html-css': `You are a frontend expert specializing in prompt enhancement for HTML/CSS development.\r\n\r\n## HTML/CSS-Specific Enhancements\r\n- Semantic HTML structure and accessibility\r\n- CSS methodologies (BEM, OOCSS, SMACSS)\r\n- Responsive design and mobile-first approach\r\n- CSS Grid and Flexbox layouts\r\n- CSS custom properties and variables\r\n- Performance optimization (critical CSS, lazy loading)\r\n- Cross-browser compatibility\r\n- Modern CSS features (container queries, subgrid, etc.)\r\n\r\n## HTML/CSS Best Practices\r\n- Use semantic HTML elements\r\n- Implement proper accessibility attributes\r\n- Follow mobile-first responsive design\r\n- Use CSS custom properties for theming\r\n- Implement proper CSS organization\r\n- Use modern CSS features with fallbacks\r\n- Optimize for performance\r\n- Follow naming conventions (BEM, etc.)\r\n\r\n## Common HTML/CSS Patterns\r\n- CSS Grid for complex layouts\r\n- Flexbox for component layouts\r\n- CSS custom properties for theming\r\n- CSS modules for component styling\r\n- PostCSS for CSS processing\r\n- CSS-in-JS for dynamic styling\r\n- Utility-first CSS frameworks\r\n- Component-based CSS architecture`,\r\n\r\n      'nodejs': `You are a Node.js expert specializing in prompt enhancement for backend development.\r\n\r\n## Node.js-Specific Enhancements\r\n- Express.js and Fastify frameworks\r\n- Middleware patterns and error handling\r\n- Database integration (MongoDB, PostgreSQL, MySQL)\r\n- Authentication and authorization (JWT, OAuth, Passport)\r\n- API design and RESTful principles\r\n- Testing approaches (Jest, Mocha, Supertest)\r\n- Performance optimization and monitoring\r\n- Security best practices\r\n\r\n## Node.js Best Practices\r\n- Use TypeScript for type safety\r\n- Implement proper error handling\r\n- Use environment variables for configuration\r\n- Implement proper logging and monitoring\r\n- Use dependency injection\r\n- Follow RESTful API design\r\n- Implement proper validation\r\n- Use proper security measures\r\n\r\n## Common Node.js Patterns\r\n- MVC architecture\r\n- Repository pattern for data access\r\n- Service layer for business logic\r\n- Middleware for cross-cutting concerns\r\n- Factory pattern for object creation\r\n- Observer pattern for events\r\n- Strategy pattern for algorithms\r\n- Decorator pattern for functionality extension`\r\n    };\r\n\r\n    return frameworkPrompts[framework.toLowerCase()] || this.getPrimaryEnhancementPrompt();\r\n  }\r\n\r\n  /**\r\n   * Quality-focused enhancement prompts\r\n   */\r\n  static getQualityFocusedPrompt(qualityType: string): string {\r\n    const qualityPrompts: Record<string, string> = {\r\n      'accessibility': `You are an accessibility expert specializing in prompt enhancement for inclusive web development.\r\n\r\n## Accessibility Enhancements\r\n- WCAG 2.1 AA compliance requirements\r\n- Semantic HTML structure and ARIA attributes\r\n- Keyboard navigation and focus management\r\n- Screen reader compatibility\r\n- Color contrast and visual accessibility\r\n- Alternative text and media descriptions\r\n- Form accessibility and validation\r\n- Mobile accessibility considerations\r\n\r\n## Accessibility Best Practices\r\n- Use semantic HTML elements\r\n- Implement proper ARIA attributes\r\n- Ensure keyboard accessibility\r\n- Provide alternative text for images\r\n- Use proper color contrast ratios\r\n- Implement focus management\r\n- Provide clear error messages\r\n- Test with screen readers\r\n\r\n## Common Accessibility Patterns\r\n- Skip links for navigation\r\n- Focus indicators for keyboard users\r\n- ARIA landmarks for page structure\r\n- Live regions for dynamic content\r\n- Form labels and error associations\r\n- Modal dialog accessibility\r\n- Tab order management\r\n- Screen reader announcements`,\r\n\r\n      'performance': `You are a performance expert specializing in prompt enhancement for high-performance web applications.\r\n\r\n## Performance Enhancements\r\n- Core Web Vitals optimization (LCP, FID, CLS)\r\n- Bundle size optimization and code splitting\r\n- Image optimization and lazy loading\r\n- Caching strategies and CDN usage\r\n- Database query optimization\r\n- API response optimization\r\n- Memory management and garbage collection\r\n- Network optimization and compression\r\n\r\n## Performance Best Practices\r\n- Implement code splitting and lazy loading\r\n- Optimize images and media assets\r\n- Use efficient data structures and algorithms\r\n- Implement proper caching strategies\r\n- Minimize bundle size\r\n- Use performance monitoring\r\n- Optimize critical rendering path\r\n- Implement progressive enhancement\r\n\r\n## Common Performance Patterns\r\n- Lazy loading for images and components\r\n- Virtual scrolling for large lists\r\n- Debouncing and throttling for user input\r\n- Memoization for expensive calculations\r\n- Service workers for caching\r\n- Web Workers for heavy computations\r\n- Intersection Observer for visibility\r\n- Request deduplication and batching`,\r\n\r\n      'security': `You are a security expert specializing in prompt enhancement for secure web applications.\r\n\r\n## Security Enhancements\r\n- Input validation and sanitization\r\n- Authentication and authorization\r\n- CSRF and XSS protection\r\n- SQL injection prevention\r\n- Secure data transmission (HTTPS, TLS)\r\n- Content Security Policy (CSP)\r\n- Secure session management\r\n- Data privacy and GDPR compliance\r\n\r\n## Security Best Practices\r\n- Validate and sanitize all inputs\r\n- Implement proper authentication\r\n- Use HTTPS for all communications\r\n- Implement proper authorization\r\n- Use secure session management\r\n- Implement proper error handling\r\n- Keep dependencies updated\r\n- Use security headers\r\n\r\n## Common Security Patterns\r\n- Input validation and sanitization\r\n- Authentication middleware\r\n- Authorization checks\r\n- CSRF token validation\r\n- XSS protection\r\n- SQL injection prevention\r\n- Rate limiting and throttling\r\n- Security headers implementation`,\r\n\r\n      'testing': `You are a testing expert specializing in prompt enhancement for comprehensive test coverage.\r\n\r\n## Testing Enhancements\r\n- Unit testing strategies and patterns\r\n- Integration testing approaches\r\n- End-to-end testing implementation\r\n- Test-driven development (TDD)\r\n- Behavior-driven development (BDD)\r\n- Mocking and stubbing techniques\r\n- Test coverage and quality metrics\r\n- Continuous integration testing\r\n\r\n## Testing Best Practices\r\n- Write tests before implementation (TDD)\r\n- Use descriptive test names\r\n- Follow AAA pattern (Arrange, Act, Assert)\r\n- Mock external dependencies\r\n- Test edge cases and error scenarios\r\n- Maintain high test coverage\r\n- Use proper test organization\r\n- Implement continuous testing\r\n\r\n## Common Testing Patterns\r\n- Test doubles (mocks, stubs, fakes)\r\n- Test fixtures and factories\r\n- Page object model for E2E tests\r\n- Test data builders\r\n- Parameterized tests\r\n- Test hooks and setup/teardown\r\n- Test isolation and independence\r\n- Test reporting and coverage`\r\n    };\r\n\r\n    return qualityPrompts[qualityType.toLowerCase()] || this.getPrimaryEnhancementPrompt();\r\n  }\r\n\r\n  /**\r\n   * Project-aware enhancement prompts\r\n   */\r\n  static getProjectAwarePrompt(projectType: string): string {\r\n    const projectPrompts: Record<string, string> = {\r\n      'frontend': `You are a frontend expert specializing in prompt enhancement for frontend applications.\r\n\r\n## Frontend-Specific Enhancements\r\n- User interface and user experience design\r\n- Component architecture and state management\r\n- Responsive design and mobile optimization\r\n- Performance optimization and Core Web Vitals\r\n- Accessibility and inclusive design\r\n- Browser compatibility and progressive enhancement\r\n- Build tools and development workflow\r\n- Testing strategies for frontend code\r\n\r\n## Frontend Best Practices\r\n- Follow mobile-first responsive design\r\n- Implement proper component architecture\r\n- Use modern CSS and JavaScript features\r\n- Optimize for performance and accessibility\r\n- Implement proper error handling\r\n- Use proper testing strategies\r\n- Follow coding standards and conventions\r\n- Implement proper build and deployment processes\r\n\r\n## Common Frontend Patterns\r\n- Component composition and reusability\r\n- State management patterns\r\n- Event handling and user interaction\r\n- Data fetching and caching\r\n- Form handling and validation\r\n- Routing and navigation\r\n- Theming and customization\r\n- Internationalization and localization`,\r\n\r\n      'backend': `You are a backend expert specializing in prompt enhancement for backend services and APIs.\r\n\r\n## Backend-Specific Enhancements\r\n- API design and RESTful principles\r\n- Database design and optimization\r\n- Authentication and authorization\r\n- Security and data protection\r\n- Performance and scalability\r\n- Error handling and logging\r\n- Testing strategies for backend code\r\n- Deployment and infrastructure\r\n\r\n## Backend Best Practices\r\n- Follow RESTful API design principles\r\n- Implement proper error handling\r\n- Use proper authentication and authorization\r\n- Implement proper logging and monitoring\r\n- Use proper database design\r\n- Implement proper security measures\r\n- Use proper testing strategies\r\n- Follow coding standards and conventions\r\n\r\n## Common Backend Patterns\r\n- MVC architecture and separation of concerns\r\n- Repository pattern for data access\r\n- Service layer for business logic\r\n- Middleware for cross-cutting concerns\r\n- Factory pattern for object creation\r\n- Observer pattern for events\r\n- Strategy pattern for algorithms\r\n- Decorator pattern for functionality extension`,\r\n\r\n      'fullstack': `You are a full-stack expert specializing in prompt enhancement for full-stack applications.\r\n\r\n## Full-Stack Enhancements\r\n- End-to-end application architecture\r\n- Frontend-backend integration\r\n- API design and consumption\r\n- Database design and optimization\r\n- Authentication and authorization flow\r\n- Performance optimization across the stack\r\n- Security considerations for both frontend and backend\r\n- Testing strategies for full-stack applications\r\n\r\n## Full-Stack Best Practices\r\n- Design APIs with frontend consumption in mind\r\n- Implement proper error handling across the stack\r\n- Use consistent coding standards\r\n- Implement proper security measures\r\n- Use proper testing strategies\r\n- Follow proper deployment practices\r\n- Implement proper monitoring and logging\r\n- Use proper version control and CI/CD\r\n\r\n## Common Full-Stack Patterns\r\n- API-first development approach\r\n- Microservices architecture\r\n- Event-driven architecture\r\n- CQRS (Command Query Responsibility Segregation)\r\n- Event sourcing\r\n- Domain-driven design\r\n- Hexagonal architecture\r\n- Clean architecture principles`,\r\n\r\n      'library': `You are a library expert specializing in prompt enhancement for reusable libraries and packages.\r\n\r\n## Library-Specific Enhancements\r\n- API design and developer experience\r\n- Documentation and examples\r\n- TypeScript support and type safety\r\n- Testing strategies for libraries\r\n- Versioning and backward compatibility\r\n- Performance optimization\r\n- Bundle size optimization\r\n- Distribution and publishing\r\n\r\n## Library Best Practices\r\n- Design clean and intuitive APIs\r\n- Provide comprehensive documentation\r\n- Use TypeScript for type safety\r\n- Implement proper testing strategies\r\n- Follow semantic versioning\r\n- Optimize for bundle size\r\n- Provide clear migration guides\r\n- Use proper build and distribution tools\r\n\r\n## Common Library Patterns\r\n- Plugin architecture and extensibility\r\n- Configuration and customization\r\n- Event system and callbacks\r\n- Factory pattern for object creation\r\n- Builder pattern for complex objects\r\n- Observer pattern for events\r\n- Strategy pattern for algorithms\r\n- Decorator pattern for functionality extension`\r\n    };\r\n\r\n    return projectPrompts[projectType.toLowerCase()] || this.getPrimaryEnhancementPrompt();\r\n  }\r\n\r\n  /**\r\n   * Select the appropriate enhancement prompt based on strategy\r\n   */\r\n  static selectEnhancementPrompt(\r\n    strategy: EnhancementStrategy,\r\n    projectContext?: ProjectContext,\r\n    frameworkContext?: FrameworkContext,\r\n    qualityRequirements?: QualityRequirements\r\n  ): string {\r\n    // Framework-specific enhancement\r\n    if (strategy.type === 'framework-specific' && frameworkContext) {\r\n      return this.getFrameworkSpecificPrompt(frameworkContext.framework, frameworkContext.version);\r\n    }\r\n\r\n    // Quality-focused enhancement\r\n    if (strategy.type === 'quality-focused' && qualityRequirements) {\r\n      const qualityTypes = Object.entries(qualityRequirements)\r\n        .filter(([_, enabled]) => enabled)\r\n        .map(([type, _]) => type);\r\n      \r\n      if (qualityTypes.length > 0) {\r\n        return this.getQualityFocusedPrompt(qualityTypes[0]);\r\n      }\r\n    }\r\n\r\n    // Project-aware enhancement\r\n    if (strategy.type === 'project-aware' && projectContext) {\r\n      return this.getProjectAwarePrompt(projectContext.projectType);\r\n    }\r\n\r\n    // Default to primary enhancement prompt\r\n    return this.getPrimaryEnhancementPrompt();\r\n  }\r\n\r\n  /**\r\n   * Get enhancement prompt with context integration\r\n   */\r\n  static getContextualEnhancementPrompt(\r\n    originalPrompt: string,\r\n    context: any,\r\n    strategy: EnhancementStrategy\r\n  ): string {\r\n    const basePrompt = this.selectEnhancementPrompt(strategy, context.projectContext, context.frameworkContext, context.qualityRequirements);\r\n    \r\n    return `${basePrompt}\r\n\r\n## Current Context\r\n- Project Type: ${context.projectContext?.projectType || 'Unknown'}\r\n- Framework: ${context.frameworkContext?.framework || 'Unknown'}\r\n- Language: ${context.projectContext?.language || 'Unknown'}\r\n- Quality Requirements: ${JSON.stringify(context.qualityRequirements || {})}\r\n\r\n## Original Prompt\r\n\"${originalPrompt}\"\r\n\r\n## Enhancement Task\r\nEnhance the above prompt using the provided context and strategy. Make it more specific, actionable, and aligned with best practices for the given framework and project type.`;\r\n  }\r\n}\r",
        "File: src/services/analytics/semantic-similarity.service.ts\nDescription: Function definition: val1\nCode:\n      const val1 = embedding1[i] || 0;\r\n      const val2 = embedding2[i] || 0;\r\n      dotProduct += val1 * val2;\r\n      norm1 += val1 * val1;\r\n      norm2 += val2 * val2;\r\n    }\r\n\r\n    const magnitude = Math.sqrt(norm1) * Math.sqrt(norm2);\r\n    return magnitude === 0 ? 0 : dotProduct / magnitude;\r\n  }\r\n\r\n  /**\r\n   * Calculate confidence in the similarity score\r\n   */\r\n  private calculateConfidence(text1: string, text2: string, similarity: number): number {\r\n    // Base confidence on text length and similarity score\r\n    const minLength = Math.min(text1.length, text2.length);\r\n    const maxLength = Math.max(text1.length, text2.length);\r\n    \r\n    // Longer texts give more confidence\r\n    const lengthConfidence = Math.min(1, minLength / 100);\r\n    \r\n    // Higher similarity gives more confidence\r\n    const similarityConfidence = similarity;\r\n    \r\n    // Combine factors\r\n    return (lengthConfidence * 0.3 + similarityConfidence * 0.7);\r\n  }\r\n\r\n  /**\r\n   * Extract intent from text (simplified)\r\n   */\r\n  private extractIntent(text: string): string {\r\n    // Simple intent extraction - remove common words and focus on key concepts\r\n    const stopWords = new Set(['the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'is', 'are', 'was', 'were', 'how', 'what', 'when', 'where', 'why', 'can', 'could', 'should', 'would', 'will', 'do', 'does', 'did']);\r\n    \r\n    return text\r\n      .toLowerCase()\r\n      .split(/\\s+/)\r\n      .filter(word => word.length > 2 && !stopWords.has(word))\r\n      .join(' ');\r\n  }\r\n\r\n  /**\r\n   * Create fallback result when similarity calculation fails\r\n   */\r\n  private createFallbackResult(text1: string, text2: string, startTime?: number): SimilarityResult {\r\n    // Simple text-based similarity as fallback\r\n    const similarity = this.calculateTextSimilarity(text1, text2);\r\n    \r\n    return {\r",
        "File: src/services/analytics/semantic-similarity.service.ts\nDescription: Function definition: val2\nCode:\n      const val2 = embedding2[i] || 0;\r\n      dotProduct += val1 * val2;\r\n      norm1 += val1 * val1;\r\n      norm2 += val2 * val2;\r\n    }\r\n\r\n    const magnitude = Math.sqrt(norm1) * Math.sqrt(norm2);\r\n    return magnitude === 0 ? 0 : dotProduct / magnitude;\r\n  }\r\n\r\n  /**\r\n   * Calculate confidence in the similarity score\r\n   */\r\n  private calculateConfidence(text1: string, text2: string, similarity: number): number {\r\n    // Base confidence on text length and similarity score\r\n    const minLength = Math.min(text1.length, text2.length);\r\n    const maxLength = Math.max(text1.length, text2.length);\r\n    \r\n    // Longer texts give more confidence\r\n    const lengthConfidence = Math.min(1, minLength / 100);\r\n    \r\n    // Higher similarity gives more confidence\r\n    const similarityConfidence = similarity;\r\n    \r\n    // Combine factors\r\n    return (lengthConfidence * 0.3 + similarityConfidence * 0.7);\r\n  }\r\n\r\n  /**\r\n   * Extract intent from text (simplified)\r\n   */\r\n  private extractIntent(text: string): string {\r\n    // Simple intent extraction - remove common words and focus on key concepts\r\n    const stopWords = new Set(['the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'is', 'are', 'was', 'were', 'how', 'what', 'when', 'where', 'why', 'can', 'could', 'should', 'would', 'will', 'do', 'does', 'did']);\r\n    \r\n    return text\r\n      .toLowerCase()\r\n      .split(/\\s+/)\r\n      .filter(word => word.length > 2 && !stopWords.has(word))\r\n      .join(' ');\r\n  }\r\n\r\n  /**\r\n   * Create fallback result when similarity calculation fails\r\n   */\r\n  private createFallbackResult(text1: string, text2: string, startTime?: number): SimilarityResult {\r\n    // Simple text-based similarity as fallback\r\n    const similarity = this.calculateTextSimilarity(text1, text2);\r\n    \r\n    return {\r"
      ],
      "context7_docs": [
        "## /websites/react_dev Documentation:\n================\nCODE SNIPPETS\n================\nTITLE: Document 'use no memo' Directive Usage for React Best Practices\nDESCRIPTION: Emphasizes the importance of documenting the reason for using `\"use no memo\"` to ensure maintainability and understanding. It contrasts a well-documented example with one lacking explanation, promoting clear communication in code.\n\nSOURCE: https://react.dev/reference/react-compiler/directives/use-no-memo\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ Good - clear explanation and tracking  \nfunction DataProcessor() {  \n  \"use no memo\"; // TODO: Remove after fixing rule of react violation  \n  // ...  \n}  \n  \n// ❌ Bad - no explanation  \nfunction Mystery() {  \n  \"use no memo\";  \n  // ...  \n}\n```\n\n--------------------------------\n\nTITLE: Optimize custom React Hooks by memoizing returned functions with useCallback\nDESCRIPTION: When developing custom React Hooks, it's a best practice to wrap any functions that the hook returns with `useCallback`. This ensures that the functions maintain a stable reference across re-renders (provided their internal dependencies are stable), allowing consumers of your custom hook to optimize their own components more effectively.\n\nSOURCE: https://react.dev/reference/react/useCallback\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useRouter() {  \n  const { dispatch } = useContext(RouterStateContext);  \n\n  const navigate = useCallback((url) => {  \n    dispatch({ type: 'navigate', url });  \n  }, [dispatch]);  \n\n  const goBack = useCallback(() => {  \n    dispatch({ type: 'back' });  \n  }, [dispatch]);  \n\n  return {  \n    navigate,  \n    goBack,  \n  };\n}\n\n```\n\n--------------------------------\n\nTITLE: Calculating Derived React State During Render (Best Practice)\nDESCRIPTION: This React component demonstrates the best practice for managing state derived from props. Instead of storing and resetting `selection`, it stores `selectedId` and calculates the `selection` object directly during rendering based on the `items` prop and `selectedId`. This approach simplifies the data flow, eliminates the need for state adjustments, and makes the component more robust and easier to debug, as state is always consistent with props.\n\nSOURCE: https://react.dev/learn/you-might-not-need-an-effect\n\nLANGUAGE: javascript\nCODE:\n```\nfunction List({ items }) {  \n  const [isReverse, setIsReverse] = useState(false);  \n  const [selectedId, setSelectedId] = useState(null);  \n  // ✅ Best: Calculate everything during rendering  \n  const selection = items.find(item => item.id === selectedId) ?? null;  \n  // ...  \n}\n```\n\n--------------------------------\n\nTITLE: Documenting React Compiler Directive Usage\nDESCRIPTION: These JavaScript examples highlight the importance of documenting why a 'use no memo' directive is used. Good practice involves adding clear comments explaining the reason for the directive, aiding future maintenance and understanding, as opposed to leaving it unexplained.\n\nSOURCE: https://react.dev/reference/react-compiler/directives\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ Good - clear explanation  \nfunction DataGrid() {  \n  \"use no memo\"; // TODO: Remove after fixing issue with dynamic row heights (JIRA-123)  \n  // Complex grid implementation  \n}  \n  \n// ❌ Bad - no explanation  \nfunction Mystery() {  \n  \"use no memo\";  \n  // ...  \n}\n```\n\n--------------------------------\n\nTITLE: React useEffect Symmetrical Setup and Cleanup Logic\nDESCRIPTION: This `useEffect` example demonstrates the recommended practice of pairing setup logic with symmetrical cleanup. The effect establishes a connection, and its cleanup function ensures the connection is properly disconnected, which is crucial for preventing memory leaks or resource exhaustion when dependencies change or the component unmounts.\n\nSOURCE: https://react.dev/reference/react/useEffect\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {  \n    const connection = createConnection(serverUrl, roomId);  \n    connection.connect();  \n    return () => {  \n      connection.disconnect();  \n    };  \n  }, [serverUrl, roomId]);\n```\n\n--------------------------------\n\nTITLE: Correct React `useMemo` dependency arrays and compiler-optimized component\nDESCRIPTION: This snippet provides examples of proper dependency management for React `useMemo`, ensuring all necessary values are included for accurate memoization. It also shows an alternative approach where manual `useMemo` is removed entirely, allowing the React Compiler to automatically optimize the component's performance.\n\nSOURCE: https://react.dev/reference/eslint-plugin-react-hooks/lints/preserve-manual-memoization\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ Complete dependencies  \nfunction Component({ data, filter }) {  \n  const filtered = useMemo(  \n    () => data.filter(filter),  \n    [data, filter] // All dependencies included  \n  );  \n  \n  return <List items={filtered} />;\n}  \n\n// ✅ Or let the compiler handle it  \nfunction Component({ data, filter }) {  \n  // No manual memoization needed  \n  const filtered = data.filter(filter);\n  return <List items={filtered} />;\n}\n```\n\n--------------------------------\n\nTITLE: Enable React Compiler Rule in ESLint Configuration\nDESCRIPTION: Add this specific rule to your ESLint configuration to activate the `react-hooks/react-compiler` rule. This rule enforces best practices and flags issues related to the React Compiler's usage.\n\nSOURCE: https://react.dev/blog/2025/04/21/react-compiler-rc\n\nLANGUAGE: JavaScript\nCODE:\n```\n'react-hooks/react-compiler': 'error'\n```\n\n--------------------------------\n\nTITLE: Planning for Removal of Temporary React Compiler Opt-Out Directives\nDESCRIPTION: This JavaScript code demonstrates the best practice of treating 'use no memo' as a temporary workaround. It includes a TODO comment to track the removal of the directive once the underlying issue, such as an incompatible third-party library version, is resolved.\n\nSOURCE: https://react.dev/reference/react-compiler/directives\n\nLANGUAGE: javascript\nCODE:\n```\nfunction TemporaryWorkaround() {  \n  \"use no memo\"; // TODO: Remove after upgrading ThirdPartyLib to v2.0  \n  return <ThirdPartyComponent />;  \n}\n```\n\n--------------------------------\n\nTITLE: Ensure Correct Placement of 'use no memo' Directive in React\nDESCRIPTION: Highlights the critical requirement that `\"use no memo\"` must be the first statement within a function body (after comments) to be effective. It provides examples of incorrect and correct placement to guide proper implementation.\n\nSOURCE: https://react.dev/reference/react-compiler/directives/use-no-memo\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ Wrong - directive after code  \nfunction Component() {  \n  const data = getData();  \n  \"use no memo\"; // Too late!  \n}  \n  \n// ✅ Correct - directive first  \nfunction Component() {  \n  \"use no memo\";  \n  const data = getData();  \n}\n```\n\n--------------------------------\n\nTITLE: Correct useFormStatus Usage (Fix for Pitfall)\nDESCRIPTION: This snippet demonstrates the correct way to use `useFormStatus` by calling it from a component that is rendered *inside* the `<form>`. This ensures that the `pending` property accurately reflects the submission status of the wrapping form, allowing for proper UI state management.\n\nSOURCE: https://react.dev/reference/react-dom/hooks/useFormStatus\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Submit() {\n\n  // ✅ `pending` will be derived from the form that wraps the Submit component\n\n  const { pending } = useFormStatus();\n\n  return <button disabled={pending}>...</button>;\n\n}\n\n\nfunction Form() {\n\n  // This is the <form> `useFormStatus` tracks\n\n  return (\n\n    <form action={submit}>\n\n      <Submit />\n\n    </form>\n\n  );\n\n}\n```\n\n--------------------------------\n\nTITLE: Annotate Inline Reducer Parameters for `useReducer` (TypeScript)\nDESCRIPTION: When defining the reducer function inline with `useReducer`, the new best practice is to annotate the function parameters directly with their types (`state: State`, `action: Action`). This provides clear type information without needing to pass type arguments to `useReducer` itself.\n\nSOURCE: https://react.dev/blog/2024/04/25/react-19-upgrade-guide\n\nLANGUAGE: typescript\nCODE:\n```\n- useReducer<React.Reducer<State, Action>>((state, action) => state)  \n+ useReducer((state: State, action: Action) => state)\n```\n\n--------------------------------\n\nTITLE: Optimizing React Components with useMemo and useCallback\nDESCRIPTION: This React functional component demonstrates the use of `useMemo` to cache the result of a computation (`requirements`) and `useCallback` to cache a function (`handleSubmit`). Both hooks take a dependency array to re-evaluate only when specific values change, preventing unnecessary re-renders of child components like `ShippingForm`.\n\nSOURCE: https://react.dev/reference/react/useCallback\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMemo, useCallback } from 'react';\n\nfunction ProductPage({ productId, referrer }) {\n  const product = useData('/product/' + productId);\n\n  const requirements = useMemo(() => { // Calls your function and caches its result\n    return computeRequirements(product);\n  }, [product]);\n\n  const handleSubmit = useCallback((orderDetails) => { // Caches your function itself\n    post('/product/' + productId + '/buy', {\n      referrer,\n      orderDetails,\n    });\n  }, [productId, referrer]);\n\n  return (\n    <div className={theme}>\n      <ShippingForm requirements={requirements} onSubmit={handleSubmit} />\n    </div>\n  );\n}\n```\n\n--------------------------------\n\nTITLE: Correct: Defining React Components at Top Level\nDESCRIPTION: This snippet demonstrates the recommended best practice for defining React components, where each component (e.g., Profile) is declared at the top level. This approach ensures proper component lifecycle management, avoids unnecessary re-creations, and prevents performance bottlenecks and bugs associated with nested definitions.\n\nSOURCE: https://react.dev/learn/your-first-component\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Gallery() {  \\n\\n  // ...  \\n\\n}  \\n\\n  \\n\\n// ✅ Declare components at the top level  \\n\\nfunction Profile() {  \\n\\n  // ...  \\n\\n}\n```\n\n--------------------------------\n\nTITLE: Optimize React component re-rendering with useCallback and memo\nDESCRIPTION: This snippet presents the correct approach to combine `useCallback` with a `memo`-wrapped child component for optimal performance. By caching the `handleSubmit` function using `useCallback`, `ShippingForm` consistently receives the same prop reference across re-renders, allowing `memo` to effectively skip unnecessary updates.\n\nSOURCE: https://react.dev/reference/react/useCallback\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProductPage({ productId, referrer, theme }) {\n  // Tell React to cache your function between re-renders...\n  const handleSubmit = useCallback((orderDetails) => {\n    post('/product/' + productId + '/buy', {\n      referrer,\n      orderDetails,\n    });\n  }, [productId, referrer]); // ...so as long as these dependencies don't change...\n\n  return (\n    <div className={theme}>\n      {/* ...ShippingForm will receive the same props and can skip re-rendering */}\n      <ShippingForm onSubmit={handleSubmit} />\n    </div>\n  );\n}\n```\n\n--------------------------------\n\nTITLE: Improved `useReducer` Type Inference (TypeScript)\nDESCRIPTION: React 19's `useReducer` now has improved type inference, making it best practice to omit explicit type arguments and rely on contextual typing. This reduces boilerplate and simplifies its usage, though it's a breaking change from previous explicit full reducer type parameters.\n\nSOURCE: https://react.dev/blog/2024/04/25/react-19-upgrade-guide\n\nLANGUAGE: typescript\nCODE:\n```\n- useReducer<React.Reducer<State, Action>>(reducer)  \n+ useReducer(reducer)\n```\n\n--------------------------------\n\nTITLE: Accessing Next State Value Before Set in React\nDESCRIPTION: When you need to use the value of the 'next state' immediately after calling a `set` function, it's best practice to store that value in a temporary variable before passing it to `set. This ensures you have access to the upcoming state value without relying on the snapshot behavior of the original state variable.\n\nSOURCE: https://react.dev/reference/react/useState\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextCount = count + 1;  \nsetCount(nextCount);  \n  \nconsole.log(count);     // 0  \nconsole.log(nextCount); // 1\n```\n\n--------------------------------\n\nTITLE: Correct Usage: Adhering to React Rules of Hooks\nDESCRIPTION: Provides an example of a React component correctly using hooks by calling them at the top level and demonstrating valid conditional usage of the 'use' hook.\n\nSOURCE: https://react.dev/reference/eslint-plugin-react-hooks/lints/rules-of-hooks\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Component({ isSpecial, shouldFetch, fetchPromise }) {  \n  // ✅ Hooks at top level  \n  const [count, setCount] = useState(0);  \n  const [name, setName] = useState('');  \n  \n  if (!isSpecial) {  \n    return null;  \n  }  \n  \n  if (shouldFetch) {  \n    // ✅ `use` can be conditional  \n    const data = use(fetchPromise);  \n    return <div>{data}</div>;  \n  }  \n  \n  return <div>{name}: {count}</div>;  \n}\n```\n\n--------------------------------\n\nTITLE: React App.js using Activity for Dynamic Pre-rendering\nDESCRIPTION: An `App.js` example showcasing the dynamic application of React's experimental `Activity` and `ViewTransition` components. It iteratively pre-renders `Details` components for multiple videos and a `Home` component, controlling their visibility via the `Activity`'s `mode` prop based on the current URL. This pattern optimizes perceived performance by initiating data fetching and component rendering for potential future routes proactively.\n\nSOURCE: https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unstable_ViewTransition as ViewTransition, unstable_Activity as Activity, use } from \"react\"; import Details from \"./Details\"; import Home from \"./Home\"; import { useRouter } from \"./router\"; import {fetchVideos} from './data'\n\nexport default function App() {\n  const { url } = useRouter();\n  const videoId = url.split(\"/\").pop();\n  const videos = use(fetchVideos());\n  \n  return (\n    <ViewTransition>\n      {/* Render videos in Activity to pre-render them */}\n      {videos.map(({id}) => (\n        <Activity key={id} mode={videoId === id ? 'visible' : 'hidden'}>\n          <Details id={id}/>\n        </Activity>\n      ))}\n      <Activity mode={url === '/' ? 'visible' : 'hidden'}>\n        <Home />\n      </Activity>\n    </ViewTransition>\n  );\n}\n```\n\n--------------------------------\n\nTITLE: React Effect with optimized dependency list\nDESCRIPTION: This refactored React component moves the `options` object declaration inside the `useEffect` hook. This change ensures that the effect only depends on `roomId`, preventing unnecessary reconnections when the `message` state updates, thus optimizing performance. It demonstrates the best practice of making dependencies unnecessary rather than removing them from the array directly.\n\nSOURCE: https://react.dev/learn/escape-hatches\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  return (\n    <>\n      <h1>Welcome to the {roomId} room!</h1>\n      <input value={message} onChange={e => setMessage(e.target.value)} />\n    </>\n  );\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}\n```"
      ]
    },
    "success": true,
    "todos": [],
    "frameworks_detected": [],
    "ai_enhancement": {
      "enabled": false,
      "strategy": "none",
      "quality_score": 0,
      "confidence_score": 0,
      "improvements": [],
      "recommendations": [],
      "processing_time": 0,
      "cost": 0
    }
  },
  "performance": {
    "originalTokens": 3,
    "enhancedTokens": 1717,
    "tokenRatio": 572.3333333333334,
    "responseTime": 2214,
    "context7Used": true,
    "context7LibrariesResolved": 1
  },
  "quality": {
    "overall": 60,
    "details": {
      "minimalResponse": "Poor",
      "responseSpeed": "Excellent",
      "frameworkAccuracy": "100%",
      "context7Accuracy": "100%",
      "contentQuality": "0/25"
    },
    "breakdown": {
      "performance": 18,
      "accuracy": 27,
      "content": 15
    }
  },
  "context": {
    "repoFacts": 16,
    "codeSnippets": 10,
    "frameworkDocs": 0,
    "projectDocs": 0,
    "context7Docs": 1
  },
  "libraries": [
    "/websites/react_dev"
  ],
  "timestamp": "2025-09-25T21:06:24.977Z"
}